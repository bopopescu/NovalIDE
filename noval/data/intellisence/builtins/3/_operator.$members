(dp0
Vname
p1
V_operator
p2
sVis_builtin
p3
I01
sVdoc
p4
VOperator interface.\u000a\u000aThis module exports a set of functions implemented in C corresponding\u000ato the intrinsic operators of Python.  For example, operator.add(x, y)\u000ais equivalent to the expression x+y.  The function names are those\u000aused for special methods; variants without leading and trailing\u000a'__' are also provided for convenience.
p5
sVchilds
p6
(lp7
(dp8
g1
V__doc__
p9
sg3
I01
sVtype
p10
L5L
sa(dp11
g1
V__loader__
p12
sg3
I01
sg10
L3L
sg6
(lp13
(dp14
g1
V__delattr__
p15
sg3
I01
sg10
L5L
sa(dp16
g1
V__dict__
p17
sg3
I01
sg10
L5L
sa(dp18
g1
V__dir__
p19
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p20
sa(dp21
g1
g9
sg3
I01
sg10
L5L
sa(dp22
g1
V__eq__
p23
sg3
I01
sg10
L5L
sa(dp24
g1
V__format__
p25
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p26
sa(dp27
g1
V__ge__
p28
sg3
I01
sg10
L5L
sa(dp29
g1
V__getattribute__
p30
sg3
I01
sg10
L5L
sa(dp31
g1
V__gt__
p32
sg3
I01
sg10
L5L
sa(dp33
g1
V__hash__
p34
sg3
I01
sg10
L5L
sa(dp35
g1
V__init__
p36
sg3
I01
sg10
L5L
sa(dp37
g1
V__init_subclass__
p38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p39
sa(dp40
g1
V__le__
p41
sg3
I01
sg10
L5L
sa(dp42
g1
V__lt__
p43
sg3
I01
sg10
L5L
sa(dp44
g1
V__module__
p45
sg3
I01
sg10
L5L
sa(dp46
g1
V__ne__
p47
sg3
I01
sg10
L5L
sa(dp48
g1
V__new__
p49
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p50
sa(dp51
g1
V__reduce__
p52
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p53
sa(dp54
g1
V__reduce_ex__
p55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p56
sa(dp57
g1
V__repr__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__setattr__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__sizeof__
p62
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p63
sa(dp64
g1
V__str__
p65
sg3
I01
sg10
L5L
sa(dp66
g1
V__subclasshook__
p67
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p68
sa(dp69
g1
V__weakref__
p70
sg3
I01
sg10
L5L
sa(dp71
g1
Vcreate_module
p72
sg3
I01
sg10
L5L
sa(dp73
g1
Vexec_module
p74
sg3
I01
sg10
L5L
sa(dp75
g1
Vfind_module
p76
sg3
I01
sg10
L5L
sa(dp77
g1
Vfind_spec
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Vget_code
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vget_source
p82
sg3
I01
sg10
L5L
sa(dp83
g1
Vis_package
p84
sg3
I01
sg10
L5L
sa(dp85
g1
Vload_module
p86
sg3
I01
sg10
L5L
sa(dp87
g1
Vmodule_repr
p88
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p89
sa(dp90
g1
V__name__
p91
sg3
I01
sg10
L5L
sa(dp92
g1
V__package__
p93
sg3
I01
sg10
L5L
sa(dp94
g1
V__spec__
p95
sg3
I01
sg10
L5L
sa(dp96
g1
V_compare_digest
p97
sg3
I01
sg10
L2L
sg4
Vcompare_digest(a, b) -> bool\u000a\u000aReturn 'a == b'.  This function uses an approach designed to prevent\u000atiming analysis, making it appropriate for cryptography.\u000aa and b must both be of the same type: either str (ASCII only),\u000aor any bytes-like object.\u000a\u000aNote: If a and b are of different lengths, or if an error occurs,\u000aa timing attack could theoretically reveal information about the\u000atypes and lengths of a and b--but not their values.\u000a
p98
sa(dp99
g1
Vabs
p100
sg3
I01
sg10
L2L
sg4
Vabs(a) -- Same as abs(a).
p101
sa(dp102
g1
Vadd
p103
sg3
I01
sg10
L2L
sg4
Vadd(a, b) -- Same as a + b.
p104
sa(dp105
g1
Vand_
p106
sg3
I01
sg10
L2L
sg4
Vand_(a, b) -- Same as a & b.
p107
sa(dp108
g1
Vattrgetter
p109
sg3
I01
sg10
L3L
sg6
(lp110
(dp111
g1
V__call__
p112
sg3
I01
sg10
L5L
sa(dp113
g1
g15
sg3
I01
sg10
L5L
sa(dp114
g1
g19
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p115
sa(dp116
g1
g9
sg3
I01
sg10
L5L
sa(dp117
g1
g23
sg3
I01
sg10
L5L
sa(dp118
g1
g25
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p119
sa(dp120
g1
g28
sg3
I01
sg10
L5L
sa(dp121
g1
g30
sg3
I01
sg10
L5L
sa(dp122
g1
g32
sg3
I01
sg10
L5L
sa(dp123
g1
g34
sg3
I01
sg10
L5L
sa(dp124
g1
g36
sg3
I01
sg10
L5L
sa(dp125
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p126
sa(dp127
g1
g41
sg3
I01
sg10
L5L
sa(dp128
g1
g43
sg3
I01
sg10
L5L
sa(dp129
g1
g47
sg3
I01
sg10
L5L
sa(dp130
g1
g49
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p131
sa(dp132
g1
g52
sg3
I01
sg10
L2L
sg4
VReturn state information for pickling
p133
sa(dp134
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p135
sa(dp136
g1
g58
sg3
I01
sg10
L5L
sa(dp137
g1
g60
sg3
I01
sg10
L5L
sa(dp138
g1
g62
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p139
sa(dp140
g1
g65
sg3
I01
sg10
L5L
sa(dp141
g1
g67
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p142
sasg4
Vattrgetter(attr, ...) --> attrgetter object\u000a\u000aReturn a callable object that fetches the given attribute(s) from its operand.\u000aAfter f = attrgetter('name'), the call f(r) returns r.name.\u000aAfter g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\u000aAfter h = attrgetter('name.first', 'name.last'), the call h(r) returns\u000a(r.name.first, r.name.last).
p143
sa(dp144
g1
Vconcat
p145
sg3
I01
sg10
L2L
sg4
Vconcat(a, b) -- Same as a + b, for a and b sequences.
p146
sa(dp147
g1
Vcontains
p148
sg3
I01
sg10
L2L
sg4
Vcontains(a, b) -- Same as b in a (note reversed operands).
p149
sa(dp150
g1
VcountOf
p151
sg3
I01
sg10
L2L
sg4
VcountOf(a, b) -- Return the number of times b occurs in a.
p152
sa(dp153
g1
Vdelitem
p154
sg3
I01
sg10
L2L
sg4
Vdelitem(a, b) -- Same as del a[b].
p155
sa(dp156
g1
Veq
p157
sg3
I01
sg10
L2L
sg4
Veq(a, b) -- Same as a==b.
p158
sa(dp159
g1
Vfloordiv
p160
sg3
I01
sg10
L2L
sg4
Vfloordiv(a, b) -- Same as a // b.
p161
sa(dp162
g1
Vge
p163
sg3
I01
sg10
L2L
sg4
Vge(a, b) -- Same as a>=b.
p164
sa(dp165
g1
Vgetitem
p166
sg3
I01
sg10
L2L
sg4
Vgetitem(a, b) -- Same as a[b].
p167
sa(dp168
g1
Vgt
p169
sg3
I01
sg10
L2L
sg4
Vgt(a, b) -- Same as a>b.
p170
sa(dp171
g1
Viadd
p172
sg3
I01
sg10
L2L
sg4
Va = iadd(a, b) -- Same as a += b.
p173
sa(dp174
g1
Viand
p175
sg3
I01
sg10
L2L
sg4
Va = iand(a, b) -- Same as a &= b.
p176
sa(dp177
g1
Viconcat
p178
sg3
I01
sg10
L2L
sg4
Va = iconcat(a, b) -- Same as a += b, for a and b sequences.
p179
sa(dp180
g1
Vifloordiv
p181
sg3
I01
sg10
L2L
sg4
Va = ifloordiv(a, b) -- Same as a //= b.
p182
sa(dp183
g1
Vilshift
p184
sg3
I01
sg10
L2L
sg4
Va = ilshift(a, b) -- Same as a <<= b.
p185
sa(dp186
g1
Vimatmul
p187
sg3
I01
sg10
L2L
sg4
Va = imatmul(a, b) -- Same as a @= b.
p188
sa(dp189
g1
Vimod
p190
sg3
I01
sg10
L2L
sg4
Va = imod(a, b) -- Same as a %= b.
p191
sa(dp192
g1
Vimul
p193
sg3
I01
sg10
L2L
sg4
Va = imul(a, b) -- Same as a *= b.
p194
sa(dp195
g1
Vindex
p196
sg3
I01
sg10
L2L
sg4
Vindex(a) -- Same as a.__index__()
p197
sa(dp198
g1
VindexOf
p199
sg3
I01
sg10
L2L
sg4
VindexOf(a, b) -- Return the first index of b in a.
p200
sa(dp201
g1
Vinv
p202
sg3
I01
sg10
L2L
sg4
Vinv(a) -- Same as ~a.
p203
sa(dp204
g1
Vinvert
p205
sg3
I01
sg10
L2L
sg4
Vinvert(a) -- Same as ~a.
p206
sa(dp207
g1
Vior
p208
sg3
I01
sg10
L2L
sg4
Va = ior(a, b) -- Same as a |= b.
p209
sa(dp210
g1
Vipow
p211
sg3
I01
sg10
L2L
sg4
Va = ipow(a, b) -- Same as a **= b.
p212
sa(dp213
g1
Virshift
p214
sg3
I01
sg10
L2L
sg4
Va = irshift(a, b) -- Same as a >>= b.
p215
sa(dp216
g1
Vis_
p217
sg3
I01
sg10
L2L
sg4
Vis_(a, b) -- Same as a is b.
p218
sa(dp219
g1
Vis_not
p220
sg3
I01
sg10
L2L
sg4
Vis_not(a, b) -- Same as a is not b.
p221
sa(dp222
g1
Visub
p223
sg3
I01
sg10
L2L
sg4
Va = isub(a, b) -- Same as a -= b.
p224
sa(dp225
g1
Vitemgetter
p226
sg3
I01
sg10
L3L
sg6
(lp227
(dp228
g1
g112
sg3
I01
sg10
L5L
sa(dp229
g1
g15
sg3
I01
sg10
L5L
sa(dp230
g1
g19
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p231
sa(dp232
g1
g9
sg3
I01
sg10
L5L
sa(dp233
g1
g23
sg3
I01
sg10
L5L
sa(dp234
g1
g25
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p235
sa(dp236
g1
g28
sg3
I01
sg10
L5L
sa(dp237
g1
g30
sg3
I01
sg10
L5L
sa(dp238
g1
g32
sg3
I01
sg10
L5L
sa(dp239
g1
g34
sg3
I01
sg10
L5L
sa(dp240
g1
g36
sg3
I01
sg10
L5L
sa(dp241
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p242
sa(dp243
g1
g41
sg3
I01
sg10
L5L
sa(dp244
g1
g43
sg3
I01
sg10
L5L
sa(dp245
g1
g47
sg3
I01
sg10
L5L
sa(dp246
g1
g49
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p247
sa(dp248
g1
g52
sg3
I01
sg10
L2L
sg4
VReturn state information for pickling
p249
sa(dp250
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p251
sa(dp252
g1
g58
sg3
I01
sg10
L5L
sa(dp253
g1
g60
sg3
I01
sg10
L5L
sa(dp254
g1
g62
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p255
sa(dp256
g1
g65
sg3
I01
sg10
L5L
sa(dp257
g1
g67
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p258
sasg4
Vitemgetter(item, ...) --> itemgetter object\u000a\u000aReturn a callable object that fetches the given item(s) from its operand.\u000aAfter f = itemgetter(2), the call f(r) returns r[2].\u000aAfter g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
p259
sa(dp260
g1
Vitruediv
p261
sg3
I01
sg10
L2L
sg4
Va = itruediv(a, b) -- Same as a /= b
p262
sa(dp263
g1
Vixor
p264
sg3
I01
sg10
L2L
sg4
Va = ixor(a, b) -- Same as a ^= b.
p265
sa(dp266
g1
Vle
p267
sg3
I01
sg10
L2L
sg4
Vle(a, b) -- Same as a<=b.
p268
sa(dp269
g1
Vlength_hint
p270
sg3
I01
sg10
L2L
sg4
Vlength_hint(obj, default=0) -> int\u000aReturn an estimate of the number of items in obj.\u000aThis is useful for presizing containers when building from an\u000aiterable.\u000a\u000aIf the object supports len(), the result will be\u000aexact. Otherwise, it may over- or under-estimate by an\u000aarbitrary amount. The result will be an integer >= 0.
p271
sa(dp272
g1
Vlshift
p273
sg3
I01
sg10
L2L
sg4
Vlshift(a, b) -- Same as a << b.
p274
sa(dp275
g1
Vlt
p276
sg3
I01
sg10
L2L
sg4
Vlt(a, b) -- Same as a<b.
p277
sa(dp278
g1
Vmatmul
p279
sg3
I01
sg10
L2L
sg4
Vmatmul(a, b) -- Same as a @ b.
p280
sa(dp281
g1
Vmethodcaller
p282
sg3
I01
sg10
L3L
sg6
(lp283
(dp284
g1
g112
sg3
I01
sg10
L5L
sa(dp285
g1
g15
sg3
I01
sg10
L5L
sa(dp286
g1
g19
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p287
sa(dp288
g1
g9
sg3
I01
sg10
L5L
sa(dp289
g1
g23
sg3
I01
sg10
L5L
sa(dp290
g1
g25
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p291
sa(dp292
g1
g28
sg3
I01
sg10
L5L
sa(dp293
g1
g30
sg3
I01
sg10
L5L
sa(dp294
g1
g32
sg3
I01
sg10
L5L
sa(dp295
g1
g34
sg3
I01
sg10
L5L
sa(dp296
g1
g36
sg3
I01
sg10
L5L
sa(dp297
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p298
sa(dp299
g1
g41
sg3
I01
sg10
L5L
sa(dp300
g1
g43
sg3
I01
sg10
L5L
sa(dp301
g1
g47
sg3
I01
sg10
L5L
sa(dp302
g1
g49
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p303
sa(dp304
g1
g52
sg3
I01
sg10
L2L
sg4
VReturn state information for pickling
p305
sa(dp306
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p307
sa(dp308
g1
g58
sg3
I01
sg10
L5L
sa(dp309
g1
g60
sg3
I01
sg10
L5L
sa(dp310
g1
g62
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p311
sa(dp312
g1
g65
sg3
I01
sg10
L5L
sa(dp313
g1
g67
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p314
sasg4
Vmethodcaller(name, ...) --> methodcaller object\u000a\u000aReturn a callable object that calls the given method on its operand.\u000aAfter f = methodcaller('name'), the call f(r) returns r.name().\u000aAfter g = methodcaller('name', 'date', foo=1), the call g(r) returns\u000ar.name('date', foo=1).
p315
sa(dp316
g1
Vmod
p317
sg3
I01
sg10
L2L
sg4
Vmod(a, b) -- Same as a % b.
p318
sa(dp319
g1
Vmul
p320
sg3
I01
sg10
L2L
sg4
Vmul(a, b) -- Same as a * b.
p321
sa(dp322
g1
Vne
p323
sg3
I01
sg10
L2L
sg4
Vne(a, b) -- Same as a!=b.
p324
sa(dp325
g1
Vneg
p326
sg3
I01
sg10
L2L
sg4
Vneg(a) -- Same as -a.
p327
sa(dp328
g1
Vnot_
p329
sg3
I01
sg10
L2L
sg4
Vnot_(a) -- Same as not a.
p330
sa(dp331
g1
Vor_
p332
sg3
I01
sg10
L2L
sg4
Vor_(a, b) -- Same as a | b.
p333
sa(dp334
g1
Vpos
p335
sg3
I01
sg10
L2L
sg4
Vpos(a) -- Same as +a.
p336
sa(dp337
g1
Vpow
p338
sg3
I01
sg10
L2L
sg4
Vpow(a, b) -- Same as a ** b.
p339
sa(dp340
g1
Vrshift
p341
sg3
I01
sg10
L2L
sg4
Vrshift(a, b) -- Same as a >> b.
p342
sa(dp343
g1
Vsetitem
p344
sg3
I01
sg10
L2L
sg4
Vsetitem(a, b, c) -- Same as a[b] = c.
p345
sa(dp346
g1
Vsub
p347
sg3
I01
sg10
L2L
sg4
Vsub(a, b) -- Same as a - b.
p348
sa(dp349
g1
Vtruediv
p350
sg3
I01
sg10
L2L
sg4
Vtruediv(a, b) -- Same as a / b.
p351
sa(dp352
g1
Vtruth
p353
sg3
I01
sg10
L2L
sg4
Vtruth(a) -- Return True if a is true, False otherwise.
p354
sa(dp355
g1
Vxor
p356
sg3
I01
sg10
L2L
sg4
Vxor(a, b) -- Same as a ^ b.
p357
sasg10
L1L
s.