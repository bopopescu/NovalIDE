(dp0
Vchilds
p1
(lp2
(dp3
g1
(lp4
(dp5
Vis_builtin
p6
I01
sVname
p7
V__add__
p8
sVtype
p9
L5L
sa(dp10
g6
I01
sg7
V__contains__
p11
sg9
L5L
sa(dp12
g6
I01
sg7
V__copy__
p13
sg9
L2L
sVdoc
p14
VReturn a copy of the array.
p15
sa(dp16
g6
I01
sg7
V__deepcopy__
p17
sg9
L2L
sg14
VReturn a copy of the array.
p18
sa(dp19
g6
I01
sg7
V__delattr__
p20
sg9
L5L
sa(dp21
g6
I01
sg7
V__delitem__
p22
sg9
L5L
sa(dp23
g6
I01
sg7
V__dir__
p24
sg9
L2L
sg14
V__dir__() -> list\u000adefault dir() implementation
p25
sa(dp26
g6
I01
sg7
V__doc__
p27
sg9
L5L
sa(dp28
g6
I01
sg7
V__eq__
p29
sg9
L5L
sa(dp30
g6
I01
sg7
V__format__
p31
sg9
L2L
sg14
Vdefault object formatter
p32
sa(dp33
g6
I01
sg7
V__ge__
p34
sg9
L5L
sa(dp35
g6
I01
sg7
V__getattribute__
p36
sg9
L5L
sa(dp37
g6
I01
sg7
V__getitem__
p38
sg9
L5L
sa(dp39
g6
I01
sg7
V__gt__
p40
sg9
L5L
sa(dp41
g6
I01
sg7
V__hash__
p42
sg9
L5L
sa(dp43
g6
I01
sg7
V__iadd__
p44
sg9
L5L
sa(dp45
g6
I01
sg7
V__imul__
p46
sg9
L5L
sa(dp47
g6
I01
sg7
V__init__
p48
sg9
L5L
sa(dp49
g6
I01
sg7
V__iter__
p50
sg9
L5L
sa(dp51
g6
I01
sg7
V__le__
p52
sg9
L5L
sa(dp53
g6
I01
sg7
V__len__
p54
sg9
L5L
sa(dp55
g6
I01
sg7
V__lt__
p56
sg9
L5L
sa(dp57
g6
I01
sg7
V__mul__
p58
sg9
L5L
sa(dp59
g6
I01
sg7
V__ne__
p60
sg9
L5L
sa(dp61
g6
I01
sg7
V__new__
p62
sg9
L2L
sg14
VCreate and return a new object.  See help(type) for accurate signature.
p63
sa(dp64
g6
I01
sg7
V__reduce__
p65
sg9
L2L
sg14
Vhelper for pickle
p66
sa(dp67
g6
I01
sg7
V__reduce_ex__
p68
sg9
L2L
sg14
VReturn state information for pickling.
p69
sa(dp70
g6
I01
sg7
V__repr__
p71
sg9
L5L
sa(dp72
g6
I01
sg7
V__rmul__
p73
sg9
L5L
sa(dp74
g6
I01
sg7
V__setattr__
p75
sg9
L5L
sa(dp76
g6
I01
sg7
V__setitem__
p77
sg9
L5L
sa(dp78
g6
I01
sg7
V__sizeof__
p79
sg9
L2L
sg14
VSize of the array in memory, in bytes.
p80
sa(dp81
g6
I01
sg7
V__str__
p82
sg9
L5L
sa(dp83
g6
I01
sg7
V__subclasshook__
p84
sg9
L2L
sg14
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p85
sa(dp86
g6
I01
sg7
Vappend
p87
sg9
L2L
sg14
VAppend new value v to the end of the array.
p88
sa(dp89
g6
I01
sg7
Vbuffer_info
p90
sg9
L2L
sg14
VReturn a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.\u000a\u000aThe length should be multiplied by the itemsize attribute to calculate\u000athe buffer length in bytes.
p91
sa(dp92
g6
I01
sg7
Vbyteswap
p93
sg9
L2L
sg14
VByteswap all items of the array.\u000a\u000aIf the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is\u000araised.
p94
sa(dp95
g6
I01
sg7
Vcount
p96
sg9
L2L
sg14
VReturn number of occurrences of v in the array.
p97
sa(dp98
g6
I01
sg7
Vextend
p99
sg9
L2L
sg14
VAppend items to the end of the array.
p100
sa(dp101
g6
I01
sg7
Vfrombytes
p102
sg9
L2L
sg14
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
p103
sa(dp104
g6
I01
sg7
Vfromfile
p105
sg9
L2L
sg14
VRead n objects from the file object f and append them to the end of the array.
p106
sa(dp107
g6
I01
sg7
Vfromlist
p108
sg9
L2L
sg14
VAppend items to array from list.
p109
sa(dp110
g6
I01
sg7
Vfromstring
p111
sg9
L2L
sg14
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).\u000a\u000aThis method is deprecated. Use frombytes instead.
p112
sa(dp113
g6
I01
sg7
Vfromunicode
p114
sg9
L2L
sg14
VExtends this array with data from the unicode string ustr.\u000a\u000aThe array must be a unicode type array; otherwise a ValueError is raised.\u000aUse array.frombytes(ustr.encode(...)) to append Unicode data to an array of\u000asome other type.
p115
sa(dp116
g6
I01
sg7
Vindex
p117
sg9
L2L
sg14
VReturn index of first occurrence of v in the array.
p118
sa(dp119
g6
I01
sg7
Vinsert
p120
sg9
L2L
sg14
VInsert a new item v into the array before position i.
p121
sa(dp122
g6
I01
sg7
Vitemsize
p123
sg9
L5L
sa(dp124
g6
I01
sg7
Vpop
p125
sg9
L2L
sg14
VReturn the i-th element and delete it from the array.\u000a\u000ai defaults to -1.
p126
sa(dp127
g6
I01
sg7
Vremove
p128
sg9
L2L
sg14
VRemove the first occurrence of v in the array.
p129
sa(dp130
g6
I01
sg7
Vreverse
p131
sg9
L2L
sg14
VReverse the order of the items in the array.
p132
sa(dp133
g6
I01
sg7
Vtobytes
p134
sg9
L2L
sg14
VConvert the array to an array of machine values and return the bytes representation.
p135
sa(dp136
g6
I01
sg7
Vtofile
p137
sg9
L2L
sg14
VWrite all items (as machine values) to the file object f.
p138
sa(dp139
g6
I01
sg7
Vtolist
p140
sg9
L2L
sg14
VConvert array to an ordinary list with the same items.
p141
sa(dp142
g6
I01
sg7
Vtostring
p143
sg9
L2L
sg14
VConvert the array to an array of machine values and return the bytes representation.\u000a\u000aThis method is deprecated. Use tobytes instead.
p144
sa(dp145
g6
I01
sg7
Vtounicode
p146
sg9
L2L
sg14
VExtends this array with data from the unicode string ustr.\u000a\u000aConvert the array to a unicode string.  The array must be a unicode type array;\u000aotherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a\u000aunicode string from an array of some other type.
p147
sa(dp148
g6
I01
sg7
Vtypecode
p149
sg9
L5L
sasg6
I01
sg7
VArrayType
p150
sg9
L3L
sg14
Varray(typecode [, initializer]) -> array\u000a\u000aReturn a new array whose items are restricted by typecode, and\u000ainitialized from the optional initializer value, which must be a list,\u000astring or iterable over elements of the appropriate type.\u000a\u000aArrays represent basic values and behave very much like lists, except\u000athe type of objects stored in them is constrained. The type is specified\u000aat object creation time by using a type code, which is a single character.\u000aThe following type codes are defined:\u000a\u000a    Type code   C Type             Minimum size in bytes \u000a    'b'         signed integer     1 \u000a    'B'         unsigned integer   1 \u000a    'u'         Unicode character  2 (see note) \u000a    'h'         signed integer     2 \u000a    'H'         unsigned integer   2 \u000a    'i'         signed integer     2 \u000a    'I'         unsigned integer   2 \u000a    'l'         signed integer     4 \u000a    'L'         unsigned integer   4 \u000a    'q'         signed integer     8 (see note) \u000a    'Q'         unsigned integer   8 (see note) \u000a    'f'         floating point     4 \u000a    'd'         floating point     8 \u000a\u000aNOTE: The 'u' typecode corresponds to Python's unicode character. On \u000anarrow builds this is 2-bytes on wide builds this is 4-bytes.\u000a\u000aNOTE: The 'q' and 'Q' type codes are only available if the platform \u000aC compiler used to build Python supports 'long long', or, on Windows, \u000a'__int64'.\u000a\u000aMethods:\u000a\u000aappend() -- append a new item to the end of the array\u000abuffer_info() -- return information giving the current memory info\u000abyteswap() -- byteswap all the items of the array\u000acount() -- return number of occurrences of an object\u000aextend() -- extend array by appending multiple elements from an iterable\u000afromfile() -- read items from a file object\u000afromlist() -- append items from the list\u000afrombytes() -- append items from the string\u000aindex() -- return index of first occurrence of an object\u000ainsert() -- insert a new item into the array at a provided position\u000apop() -- remove and return item (default last)\u000aremove() -- remove first occurrence of an object\u000areverse() -- reverse the order of the items in the array\u000atofile() -- write all items to a file object\u000atolist() -- return the array converted to an ordinary list\u000atobytes() -- return the array converted to a string\u000a\u000aAttributes:\u000a\u000atypecode -- the typecode character used to create the array\u000aitemsize -- the length in bytes of one array item\u000a
p151
sa(dp152
g6
I01
sg7
g27
sg9
L5L
sa(dp153
g1
(lp154
(dp155
g6
I01
sg7
g20
sg9
L5L
sa(dp156
g6
I01
sg7
V__dict__
p157
sg9
L5L
sa(dp158
g6
I01
sg7
g24
sg9
L2L
sg14
V__dir__() -> list\u000adefault dir() implementation
p159
sa(dp160
g6
I01
sg7
g27
sg9
L5L
sa(dp161
g6
I01
sg7
g29
sg9
L5L
sa(dp162
g6
I01
sg7
g31
sg9
L2L
sg14
Vdefault object formatter
p163
sa(dp164
g6
I01
sg7
g34
sg9
L5L
sa(dp165
g6
I01
sg7
g36
sg9
L5L
sa(dp166
g6
I01
sg7
g40
sg9
L5L
sa(dp167
g6
I01
sg7
g42
sg9
L5L
sa(dp168
g6
I01
sg7
g48
sg9
L5L
sa(dp169
g6
I01
sg7
g52
sg9
L5L
sa(dp170
g6
I01
sg7
g56
sg9
L5L
sa(dp171
g6
I01
sg7
V__module__
p172
sg9
L5L
sa(dp173
g6
I01
sg7
g60
sg9
L5L
sa(dp174
g6
I01
sg7
g62
sg9
L2L
sg14
VCreate and return a new object.  See help(type) for accurate signature.
p175
sa(dp176
g6
I01
sg7
g65
sg9
L2L
sg14
Vhelper for pickle
p177
sa(dp178
g6
I01
sg7
g68
sg9
L2L
sg14
Vhelper for pickle
p179
sa(dp180
g6
I01
sg7
g71
sg9
L5L
sa(dp181
g6
I01
sg7
g75
sg9
L5L
sa(dp182
g6
I01
sg7
g79
sg9
L2L
sg14
V__sizeof__() -> int\u000asize of object in memory, in bytes
p183
sa(dp184
g6
I01
sg7
g82
sg9
L5L
sa(dp185
g6
I01
sg7
g84
sg9
L2L
sg14
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p186
sa(dp187
g6
I01
sg7
V__weakref__
p188
sg9
L5L
sa(dp189
g6
I01
sg7
Vcreate_module
p190
sg9
L5L
sa(dp191
g6
I01
sg7
Vexec_module
p192
sg9
L5L
sa(dp193
g6
I01
sg7
Vfind_module
p194
sg9
L5L
sa(dp195
g6
I01
sg7
Vfind_spec
p196
sg9
L5L
sa(dp197
g6
I01
sg7
Vget_code
p198
sg9
L5L
sa(dp199
g6
I01
sg7
Vget_source
p200
sg9
L5L
sa(dp201
g6
I01
sg7
Vis_package
p202
sg9
L5L
sa(dp203
g6
I01
sg7
Vload_module
p204
sg9
L5L
sa(dp205
g6
I01
sg7
Vmodule_repr
p206
sg9
L5L
sasg6
I01
sg7
V__loader__
p207
sg9
L3L
sg14
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p208
sa(dp209
g6
I01
sg7
V__name__
p210
sg9
L5L
sa(dp211
g6
I01
sg7
V__package__
p212
sg9
L5L
sa(dp213
g6
I01
sg7
V__spec__
p214
sg9
L5L
sa(dp215
g6
I01
sg7
V_array_reconstructor
p216
sg9
L2L
sg14
VInternal. Used for pickling support.
p217
sa(dp218
g1
(lp219
(dp220
g6
I01
sg7
g8
sg9
L5L
sa(dp221
g6
I01
sg7
g11
sg9
L5L
sa(dp222
g6
I01
sg7
g13
sg9
L2L
sg14
VReturn a copy of the array.
p223
sa(dp224
g6
I01
sg7
g17
sg9
L2L
sg14
VReturn a copy of the array.
p225
sa(dp226
g6
I01
sg7
g20
sg9
L5L
sa(dp227
g6
I01
sg7
g22
sg9
L5L
sa(dp228
g6
I01
sg7
g24
sg9
L2L
sg14
V__dir__() -> list\u000adefault dir() implementation
p229
sa(dp230
g6
I01
sg7
g27
sg9
L5L
sa(dp231
g6
I01
sg7
g29
sg9
L5L
sa(dp232
g6
I01
sg7
g31
sg9
L2L
sg14
Vdefault object formatter
p233
sa(dp234
g6
I01
sg7
g34
sg9
L5L
sa(dp235
g6
I01
sg7
g36
sg9
L5L
sa(dp236
g6
I01
sg7
g38
sg9
L5L
sa(dp237
g6
I01
sg7
g40
sg9
L5L
sa(dp238
g6
I01
sg7
g42
sg9
L5L
sa(dp239
g6
I01
sg7
g44
sg9
L5L
sa(dp240
g6
I01
sg7
g46
sg9
L5L
sa(dp241
g6
I01
sg7
g48
sg9
L5L
sa(dp242
g6
I01
sg7
g50
sg9
L5L
sa(dp243
g6
I01
sg7
g52
sg9
L5L
sa(dp244
g6
I01
sg7
g54
sg9
L5L
sa(dp245
g6
I01
sg7
g56
sg9
L5L
sa(dp246
g6
I01
sg7
g58
sg9
L5L
sa(dp247
g6
I01
sg7
g60
sg9
L5L
sa(dp248
g6
I01
sg7
g62
sg9
L2L
sg14
VCreate and return a new object.  See help(type) for accurate signature.
p249
sa(dp250
g6
I01
sg7
g65
sg9
L2L
sg14
Vhelper for pickle
p251
sa(dp252
g6
I01
sg7
g68
sg9
L2L
sg14
VReturn state information for pickling.
p253
sa(dp254
g6
I01
sg7
g71
sg9
L5L
sa(dp255
g6
I01
sg7
g73
sg9
L5L
sa(dp256
g6
I01
sg7
g75
sg9
L5L
sa(dp257
g6
I01
sg7
g77
sg9
L5L
sa(dp258
g6
I01
sg7
g79
sg9
L2L
sg14
VSize of the array in memory, in bytes.
p259
sa(dp260
g6
I01
sg7
g82
sg9
L5L
sa(dp261
g6
I01
sg7
g84
sg9
L2L
sg14
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p262
sa(dp263
g6
I01
sg7
g87
sg9
L2L
sg14
VAppend new value v to the end of the array.
p264
sa(dp265
g6
I01
sg7
g90
sg9
L2L
sg14
VReturn a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.\u000a\u000aThe length should be multiplied by the itemsize attribute to calculate\u000athe buffer length in bytes.
p266
sa(dp267
g6
I01
sg7
g93
sg9
L2L
sg14
VByteswap all items of the array.\u000a\u000aIf the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is\u000araised.
p268
sa(dp269
g6
I01
sg7
g96
sg9
L2L
sg14
VReturn number of occurrences of v in the array.
p270
sa(dp271
g6
I01
sg7
g99
sg9
L2L
sg14
VAppend items to the end of the array.
p272
sa(dp273
g6
I01
sg7
g102
sg9
L2L
sg14
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
p274
sa(dp275
g6
I01
sg7
g105
sg9
L2L
sg14
VRead n objects from the file object f and append them to the end of the array.
p276
sa(dp277
g6
I01
sg7
g108
sg9
L2L
sg14
VAppend items to array from list.
p278
sa(dp279
g6
I01
sg7
g111
sg9
L2L
sg14
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).\u000a\u000aThis method is deprecated. Use frombytes instead.
p280
sa(dp281
g6
I01
sg7
g114
sg9
L2L
sg14
VExtends this array with data from the unicode string ustr.\u000a\u000aThe array must be a unicode type array; otherwise a ValueError is raised.\u000aUse array.frombytes(ustr.encode(...)) to append Unicode data to an array of\u000asome other type.
p282
sa(dp283
g6
I01
sg7
g117
sg9
L2L
sg14
VReturn index of first occurrence of v in the array.
p284
sa(dp285
g6
I01
sg7
g120
sg9
L2L
sg14
VInsert a new item v into the array before position i.
p286
sa(dp287
g6
I01
sg7
g123
sg9
L5L
sa(dp288
g6
I01
sg7
g125
sg9
L2L
sg14
VReturn the i-th element and delete it from the array.\u000a\u000ai defaults to -1.
p289
sa(dp290
g6
I01
sg7
g128
sg9
L2L
sg14
VRemove the first occurrence of v in the array.
p291
sa(dp292
g6
I01
sg7
g131
sg9
L2L
sg14
VReverse the order of the items in the array.
p293
sa(dp294
g6
I01
sg7
g134
sg9
L2L
sg14
VConvert the array to an array of machine values and return the bytes representation.
p295
sa(dp296
g6
I01
sg7
g137
sg9
L2L
sg14
VWrite all items (as machine values) to the file object f.
p297
sa(dp298
g6
I01
sg7
g140
sg9
L2L
sg14
VConvert array to an ordinary list with the same items.
p299
sa(dp300
g6
I01
sg7
g143
sg9
L2L
sg14
VConvert the array to an array of machine values and return the bytes representation.\u000a\u000aThis method is deprecated. Use tobytes instead.
p301
sa(dp302
g6
I01
sg7
g146
sg9
L2L
sg14
VExtends this array with data from the unicode string ustr.\u000a\u000aConvert the array to a unicode string.  The array must be a unicode type array;\u000aotherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a\u000aunicode string from an array of some other type.
p303
sa(dp304
g6
I01
sg7
g149
sg9
L5L
sasg6
I01
sg7
Varray
p305
sg9
L3L
sg14
Varray(typecode [, initializer]) -> array\u000a\u000aReturn a new array whose items are restricted by typecode, and\u000ainitialized from the optional initializer value, which must be a list,\u000astring or iterable over elements of the appropriate type.\u000a\u000aArrays represent basic values and behave very much like lists, except\u000athe type of objects stored in them is constrained. The type is specified\u000aat object creation time by using a type code, which is a single character.\u000aThe following type codes are defined:\u000a\u000a    Type code   C Type             Minimum size in bytes \u000a    'b'         signed integer     1 \u000a    'B'         unsigned integer   1 \u000a    'u'         Unicode character  2 (see note) \u000a    'h'         signed integer     2 \u000a    'H'         unsigned integer   2 \u000a    'i'         signed integer     2 \u000a    'I'         unsigned integer   2 \u000a    'l'         signed integer     4 \u000a    'L'         unsigned integer   4 \u000a    'q'         signed integer     8 (see note) \u000a    'Q'         unsigned integer   8 (see note) \u000a    'f'         floating point     4 \u000a    'd'         floating point     8 \u000a\u000aNOTE: The 'u' typecode corresponds to Python's unicode character. On \u000anarrow builds this is 2-bytes on wide builds this is 4-bytes.\u000a\u000aNOTE: The 'q' and 'Q' type codes are only available if the platform \u000aC compiler used to build Python supports 'long long', or, on Windows, \u000a'__int64'.\u000a\u000aMethods:\u000a\u000aappend() -- append a new item to the end of the array\u000abuffer_info() -- return information giving the current memory info\u000abyteswap() -- byteswap all the items of the array\u000acount() -- return number of occurrences of an object\u000aextend() -- extend array by appending multiple elements from an iterable\u000afromfile() -- read items from a file object\u000afromlist() -- append items from the list\u000afrombytes() -- append items from the string\u000aindex() -- return index of first occurrence of an object\u000ainsert() -- insert a new item into the array at a provided position\u000apop() -- remove and return item (default last)\u000aremove() -- remove first occurrence of an object\u000areverse() -- reverse the order of the items in the array\u000atofile() -- write all items to a file object\u000atolist() -- return the array converted to an ordinary list\u000atobytes() -- return the array converted to a string\u000a\u000aAttributes:\u000a\u000atypecode -- the typecode character used to create the array\u000aitemsize -- the length in bytes of one array item\u000a
p306
sa(dp307
g6
I01
sg7
Vtypecodes
p308
sg9
L5L
sasg6
I01
sg7
Varray
p309
sg14
VThis module defines an object type which can efficiently represent\u000aan array of basic values: characters, integers, floating point\u000anumbers.  Arrays are sequence types and behave very much like lists,\u000aexcept that the type of objects stored in them is constrained.\u000a
p310
s.