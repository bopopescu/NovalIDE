(dp0
Vname
p1
Varray
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module defines an object type which can efficiently represent\u000aan array of basic values: characters, integers, floating point\u000anumbers.  Arrays are sequence types and behave very much like lists,\u000aexcept that the type of objects stored in them is constrained.\u000a
p5
sVchilds
p6
(lp7
(dp8
g1
VArrayType
p9
sg3
I01
sVtype
p10
L3L
sg6
(lp11
(dp12
g1
V__add__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__contains__
p15
sg3
I01
sg10
L5L
sa(dp16
g1
V__copy__
p17
sg3
I01
sg10
L2L
sg4
VReturn a copy of the array.
p18
sa(dp19
g1
V__deepcopy__
p20
sg3
I01
sg10
L2L
sg4
VReturn a copy of the array.
p21
sa(dp22
g1
V__delattr__
p23
sg3
I01
sg10
L5L
sa(dp24
g1
V__delitem__
p25
sg3
I01
sg10
L5L
sa(dp26
g1
V__dir__
p27
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p28
sa(dp29
g1
V__doc__
p30
sg3
I01
sg10
L5L
sa(dp31
g1
V__eq__
p32
sg3
I01
sg10
L5L
sa(dp33
g1
V__format__
p34
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p35
sa(dp36
g1
V__ge__
p37
sg3
I01
sg10
L5L
sa(dp38
g1
V__getattribute__
p39
sg3
I01
sg10
L5L
sa(dp40
g1
V__getitem__
p41
sg3
I01
sg10
L5L
sa(dp42
g1
V__gt__
p43
sg3
I01
sg10
L5L
sa(dp44
g1
V__hash__
p45
sg3
I01
sg10
L5L
sa(dp46
g1
V__iadd__
p47
sg3
I01
sg10
L5L
sa(dp48
g1
V__imul__
p49
sg3
I01
sg10
L5L
sa(dp50
g1
V__init__
p51
sg3
I01
sg10
L5L
sa(dp52
g1
V__init_subclass__
p53
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p54
sa(dp55
g1
V__iter__
p56
sg3
I01
sg10
L5L
sa(dp57
g1
V__le__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__len__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__lt__
p62
sg3
I01
sg10
L5L
sa(dp63
g1
V__mul__
p64
sg3
I01
sg10
L5L
sa(dp65
g1
V__ne__
p66
sg3
I01
sg10
L5L
sa(dp67
g1
V__new__
p68
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p69
sa(dp70
g1
V__reduce__
p71
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p72
sa(dp73
g1
V__reduce_ex__
p74
sg3
I01
sg10
L2L
sg4
VReturn state information for pickling.
p75
sa(dp76
g1
V__repr__
p77
sg3
I01
sg10
L5L
sa(dp78
g1
V__rmul__
p79
sg3
I01
sg10
L5L
sa(dp80
g1
V__setattr__
p81
sg3
I01
sg10
L5L
sa(dp82
g1
V__setitem__
p83
sg3
I01
sg10
L5L
sa(dp84
g1
V__sizeof__
p85
sg3
I01
sg10
L2L
sg4
VSize of the array in memory, in bytes.
p86
sa(dp87
g1
V__str__
p88
sg3
I01
sg10
L5L
sa(dp89
g1
V__subclasshook__
p90
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p91
sa(dp92
g1
Vappend
p93
sg3
I01
sg10
L2L
sg4
VAppend new value v to the end of the array.
p94
sa(dp95
g1
Vbuffer_info
p96
sg3
I01
sg10
L2L
sg4
VReturn a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.\u000a\u000aThe length should be multiplied by the itemsize attribute to calculate\u000athe buffer length in bytes.
p97
sa(dp98
g1
Vbyteswap
p99
sg3
I01
sg10
L2L
sg4
VByteswap all items of the array.\u000a\u000aIf the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is\u000araised.
p100
sa(dp101
g1
Vcount
p102
sg3
I01
sg10
L2L
sg4
VReturn number of occurrences of v in the array.
p103
sa(dp104
g1
Vextend
p105
sg3
I01
sg10
L2L
sg4
VAppend items to the end of the array.
p106
sa(dp107
g1
Vfrombytes
p108
sg3
I01
sg10
L2L
sg4
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
p109
sa(dp110
g1
Vfromfile
p111
sg3
I01
sg10
L2L
sg4
VRead n objects from the file object f and append them to the end of the array.
p112
sa(dp113
g1
Vfromlist
p114
sg3
I01
sg10
L2L
sg4
VAppend items to array from list.
p115
sa(dp116
g1
Vfromstring
p117
sg3
I01
sg10
L2L
sg4
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).\u000a\u000aThis method is deprecated. Use frombytes instead.
p118
sa(dp119
g1
Vfromunicode
p120
sg3
I01
sg10
L2L
sg4
VExtends this array with data from the unicode string ustr.\u000a\u000aThe array must be a unicode type array; otherwise a ValueError is raised.\u000aUse array.frombytes(ustr.encode(...)) to append Unicode data to an array of\u000asome other type.
p121
sa(dp122
g1
Vindex
p123
sg3
I01
sg10
L2L
sg4
VReturn index of first occurrence of v in the array.
p124
sa(dp125
g1
Vinsert
p126
sg3
I01
sg10
L2L
sg4
VInsert a new item v into the array before position i.
p127
sa(dp128
g1
Vitemsize
p129
sg3
I01
sg10
L5L
sa(dp130
g1
Vpop
p131
sg3
I01
sg10
L2L
sg4
VReturn the i-th element and delete it from the array.\u000a\u000ai defaults to -1.
p132
sa(dp133
g1
Vremove
p134
sg3
I01
sg10
L2L
sg4
VRemove the first occurrence of v in the array.
p135
sa(dp136
g1
Vreverse
p137
sg3
I01
sg10
L2L
sg4
VReverse the order of the items in the array.
p138
sa(dp139
g1
Vtobytes
p140
sg3
I01
sg10
L2L
sg4
VConvert the array to an array of machine values and return the bytes representation.
p141
sa(dp142
g1
Vtofile
p143
sg3
I01
sg10
L2L
sg4
VWrite all items (as machine values) to the file object f.
p144
sa(dp145
g1
Vtolist
p146
sg3
I01
sg10
L2L
sg4
VConvert array to an ordinary list with the same items.
p147
sa(dp148
g1
Vtostring
p149
sg3
I01
sg10
L2L
sg4
VConvert the array to an array of machine values and return the bytes representation.\u000a\u000aThis method is deprecated. Use tobytes instead.
p150
sa(dp151
g1
Vtounicode
p152
sg3
I01
sg10
L2L
sg4
VExtends this array with data from the unicode string ustr.\u000a\u000aConvert the array to a unicode string.  The array must be a unicode type array;\u000aotherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a\u000aunicode string from an array of some other type.
p153
sa(dp154
g1
Vtypecode
p155
sg3
I01
sg10
L5L
sasg4
Varray(typecode [, initializer]) -> array\u000a\u000aReturn a new array whose items are restricted by typecode, and\u000ainitialized from the optional initializer value, which must be a list,\u000astring or iterable over elements of the appropriate type.\u000a\u000aArrays represent basic values and behave very much like lists, except\u000athe type of objects stored in them is constrained. The type is specified\u000aat object creation time by using a type code, which is a single character.\u000aThe following type codes are defined:\u000a\u000a    Type code   C Type             Minimum size in bytes \u000a    'b'         signed integer     1 \u000a    'B'         unsigned integer   1 \u000a    'u'         Unicode character  2 (see note) \u000a    'h'         signed integer     2 \u000a    'H'         unsigned integer   2 \u000a    'i'         signed integer     2 \u000a    'I'         unsigned integer   2 \u000a    'l'         signed integer     4 \u000a    'L'         unsigned integer   4 \u000a    'q'         signed integer     8 (see note) \u000a    'Q'         unsigned integer   8 (see note) \u000a    'f'         floating point     4 \u000a    'd'         floating point     8 \u000a\u000aNOTE: The 'u' typecode corresponds to Python's unicode character. On \u000anarrow builds this is 2-bytes on wide builds this is 4-bytes.\u000a\u000aNOTE: The 'q' and 'Q' type codes are only available if the platform \u000aC compiler used to build Python supports 'long long', or, on Windows, \u000a'__int64'.\u000a\u000aMethods:\u000a\u000aappend() -- append a new item to the end of the array\u000abuffer_info() -- return information giving the current memory info\u000abyteswap() -- byteswap all the items of the array\u000acount() -- return number of occurrences of an object\u000aextend() -- extend array by appending multiple elements from an iterable\u000afromfile() -- read items from a file object\u000afromlist() -- append items from the list\u000afrombytes() -- append items from the string\u000aindex() -- return index of first occurrence of an object\u000ainsert() -- insert a new item into the array at a provided position\u000apop() -- remove and return item (default last)\u000aremove() -- remove first occurrence of an object\u000areverse() -- reverse the order of the items in the array\u000atofile() -- write all items to a file object\u000atolist() -- return the array converted to an ordinary list\u000atobytes() -- return the array converted to a string\u000a\u000aAttributes:\u000a\u000atypecode -- the typecode character used to create the array\u000aitemsize -- the length in bytes of one array item\u000a
p156
sa(dp157
g1
g30
sg3
I01
sg10
L5L
sa(dp158
g1
V__loader__
p159
sg3
I01
sg10
L3L
sg6
(lp160
(dp161
g1
g23
sg3
I01
sg10
L5L
sa(dp162
g1
V__dict__
p163
sg3
I01
sg10
L5L
sa(dp164
g1
g27
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p165
sa(dp166
g1
g30
sg3
I01
sg10
L5L
sa(dp167
g1
g32
sg3
I01
sg10
L5L
sa(dp168
g1
g34
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p169
sa(dp170
g1
g37
sg3
I01
sg10
L5L
sa(dp171
g1
g39
sg3
I01
sg10
L5L
sa(dp172
g1
g43
sg3
I01
sg10
L5L
sa(dp173
g1
g45
sg3
I01
sg10
L5L
sa(dp174
g1
g51
sg3
I01
sg10
L5L
sa(dp175
g1
g53
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p176
sa(dp177
g1
g58
sg3
I01
sg10
L5L
sa(dp178
g1
g62
sg3
I01
sg10
L5L
sa(dp179
g1
V__module__
p180
sg3
I01
sg10
L5L
sa(dp181
g1
g66
sg3
I01
sg10
L5L
sa(dp182
g1
g68
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p183
sa(dp184
g1
g71
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p185
sa(dp186
g1
g74
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p187
sa(dp188
g1
g77
sg3
I01
sg10
L5L
sa(dp189
g1
g81
sg3
I01
sg10
L5L
sa(dp190
g1
g85
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p191
sa(dp192
g1
g88
sg3
I01
sg10
L5L
sa(dp193
g1
g90
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p194
sa(dp195
g1
V__weakref__
p196
sg3
I01
sg10
L5L
sa(dp197
g1
Vcreate_module
p198
sg3
I01
sg10
L5L
sa(dp199
g1
Vexec_module
p200
sg3
I01
sg10
L5L
sa(dp201
g1
Vfind_module
p202
sg3
I01
sg10
L5L
sa(dp203
g1
Vfind_spec
p204
sg3
I01
sg10
L5L
sa(dp205
g1
Vget_code
p206
sg3
I01
sg10
L5L
sa(dp207
g1
Vget_source
p208
sg3
I01
sg10
L5L
sa(dp209
g1
Vis_package
p210
sg3
I01
sg10
L5L
sa(dp211
g1
Vload_module
p212
sg3
I01
sg10
L5L
sa(dp213
g1
Vmodule_repr
p214
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p215
sa(dp216
g1
V__name__
p217
sg3
I01
sg10
L5L
sa(dp218
g1
V__package__
p219
sg3
I01
sg10
L5L
sa(dp220
g1
V__spec__
p221
sg3
I01
sg10
L5L
sa(dp222
g1
V_array_reconstructor
p223
sg3
I01
sg10
L2L
sg4
VInternal. Used for pickling support.
p224
sa(dp225
g1
Varray
p226
sg3
I01
sg10
L3L
sg6
(lp227
(dp228
g1
g13
sg3
I01
sg10
L5L
sa(dp229
g1
g15
sg3
I01
sg10
L5L
sa(dp230
g1
g17
sg3
I01
sg10
L2L
sg4
VReturn a copy of the array.
p231
sa(dp232
g1
g20
sg3
I01
sg10
L2L
sg4
VReturn a copy of the array.
p233
sa(dp234
g1
g23
sg3
I01
sg10
L5L
sa(dp235
g1
g25
sg3
I01
sg10
L5L
sa(dp236
g1
g27
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p237
sa(dp238
g1
g30
sg3
I01
sg10
L5L
sa(dp239
g1
g32
sg3
I01
sg10
L5L
sa(dp240
g1
g34
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p241
sa(dp242
g1
g37
sg3
I01
sg10
L5L
sa(dp243
g1
g39
sg3
I01
sg10
L5L
sa(dp244
g1
g41
sg3
I01
sg10
L5L
sa(dp245
g1
g43
sg3
I01
sg10
L5L
sa(dp246
g1
g45
sg3
I01
sg10
L5L
sa(dp247
g1
g47
sg3
I01
sg10
L5L
sa(dp248
g1
g49
sg3
I01
sg10
L5L
sa(dp249
g1
g51
sg3
I01
sg10
L5L
sa(dp250
g1
g53
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p251
sa(dp252
g1
g56
sg3
I01
sg10
L5L
sa(dp253
g1
g58
sg3
I01
sg10
L5L
sa(dp254
g1
g60
sg3
I01
sg10
L5L
sa(dp255
g1
g62
sg3
I01
sg10
L5L
sa(dp256
g1
g64
sg3
I01
sg10
L5L
sa(dp257
g1
g66
sg3
I01
sg10
L5L
sa(dp258
g1
g68
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p259
sa(dp260
g1
g71
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p261
sa(dp262
g1
g74
sg3
I01
sg10
L2L
sg4
VReturn state information for pickling.
p263
sa(dp264
g1
g77
sg3
I01
sg10
L5L
sa(dp265
g1
g79
sg3
I01
sg10
L5L
sa(dp266
g1
g81
sg3
I01
sg10
L5L
sa(dp267
g1
g83
sg3
I01
sg10
L5L
sa(dp268
g1
g85
sg3
I01
sg10
L2L
sg4
VSize of the array in memory, in bytes.
p269
sa(dp270
g1
g88
sg3
I01
sg10
L5L
sa(dp271
g1
g90
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p272
sa(dp273
g1
g93
sg3
I01
sg10
L2L
sg4
VAppend new value v to the end of the array.
p274
sa(dp275
g1
g96
sg3
I01
sg10
L2L
sg4
VReturn a tuple (address, length) giving the current memory address and the length in items of the buffer used to hold array's contents.\u000a\u000aThe length should be multiplied by the itemsize attribute to calculate\u000athe buffer length in bytes.
p276
sa(dp277
g1
g99
sg3
I01
sg10
L2L
sg4
VByteswap all items of the array.\u000a\u000aIf the items in the array are not 1, 2, 4, or 8 bytes in size, RuntimeError is\u000araised.
p278
sa(dp279
g1
g102
sg3
I01
sg10
L2L
sg4
VReturn number of occurrences of v in the array.
p280
sa(dp281
g1
g105
sg3
I01
sg10
L2L
sg4
VAppend items to the end of the array.
p282
sa(dp283
g1
g108
sg3
I01
sg10
L2L
sg4
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).
p284
sa(dp285
g1
g111
sg3
I01
sg10
L2L
sg4
VRead n objects from the file object f and append them to the end of the array.
p286
sa(dp287
g1
g114
sg3
I01
sg10
L2L
sg4
VAppend items to array from list.
p288
sa(dp289
g1
g117
sg3
I01
sg10
L2L
sg4
VAppends items from the string, interpreting it as an array of machine values, as if it had been read from a file using the fromfile() method).\u000a\u000aThis method is deprecated. Use frombytes instead.
p290
sa(dp291
g1
g120
sg3
I01
sg10
L2L
sg4
VExtends this array with data from the unicode string ustr.\u000a\u000aThe array must be a unicode type array; otherwise a ValueError is raised.\u000aUse array.frombytes(ustr.encode(...)) to append Unicode data to an array of\u000asome other type.
p292
sa(dp293
g1
g123
sg3
I01
sg10
L2L
sg4
VReturn index of first occurrence of v in the array.
p294
sa(dp295
g1
g126
sg3
I01
sg10
L2L
sg4
VInsert a new item v into the array before position i.
p296
sa(dp297
g1
g129
sg3
I01
sg10
L5L
sa(dp298
g1
g131
sg3
I01
sg10
L2L
sg4
VReturn the i-th element and delete it from the array.\u000a\u000ai defaults to -1.
p299
sa(dp300
g1
g134
sg3
I01
sg10
L2L
sg4
VRemove the first occurrence of v in the array.
p301
sa(dp302
g1
g137
sg3
I01
sg10
L2L
sg4
VReverse the order of the items in the array.
p303
sa(dp304
g1
g140
sg3
I01
sg10
L2L
sg4
VConvert the array to an array of machine values and return the bytes representation.
p305
sa(dp306
g1
g143
sg3
I01
sg10
L2L
sg4
VWrite all items (as machine values) to the file object f.
p307
sa(dp308
g1
g146
sg3
I01
sg10
L2L
sg4
VConvert array to an ordinary list with the same items.
p309
sa(dp310
g1
g149
sg3
I01
sg10
L2L
sg4
VConvert the array to an array of machine values and return the bytes representation.\u000a\u000aThis method is deprecated. Use tobytes instead.
p311
sa(dp312
g1
g152
sg3
I01
sg10
L2L
sg4
VExtends this array with data from the unicode string ustr.\u000a\u000aConvert the array to a unicode string.  The array must be a unicode type array;\u000aotherwise a ValueError is raised.  Use array.tobytes().decode() to obtain a\u000aunicode string from an array of some other type.
p313
sa(dp314
g1
g155
sg3
I01
sg10
L5L
sasg4
Varray(typecode [, initializer]) -> array\u000a\u000aReturn a new array whose items are restricted by typecode, and\u000ainitialized from the optional initializer value, which must be a list,\u000astring or iterable over elements of the appropriate type.\u000a\u000aArrays represent basic values and behave very much like lists, except\u000athe type of objects stored in them is constrained. The type is specified\u000aat object creation time by using a type code, which is a single character.\u000aThe following type codes are defined:\u000a\u000a    Type code   C Type             Minimum size in bytes \u000a    'b'         signed integer     1 \u000a    'B'         unsigned integer   1 \u000a    'u'         Unicode character  2 (see note) \u000a    'h'         signed integer     2 \u000a    'H'         unsigned integer   2 \u000a    'i'         signed integer     2 \u000a    'I'         unsigned integer   2 \u000a    'l'         signed integer     4 \u000a    'L'         unsigned integer   4 \u000a    'q'         signed integer     8 (see note) \u000a    'Q'         unsigned integer   8 (see note) \u000a    'f'         floating point     4 \u000a    'd'         floating point     8 \u000a\u000aNOTE: The 'u' typecode corresponds to Python's unicode character. On \u000anarrow builds this is 2-bytes on wide builds this is 4-bytes.\u000a\u000aNOTE: The 'q' and 'Q' type codes are only available if the platform \u000aC compiler used to build Python supports 'long long', or, on Windows, \u000a'__int64'.\u000a\u000aMethods:\u000a\u000aappend() -- append a new item to the end of the array\u000abuffer_info() -- return information giving the current memory info\u000abyteswap() -- byteswap all the items of the array\u000acount() -- return number of occurrences of an object\u000aextend() -- extend array by appending multiple elements from an iterable\u000afromfile() -- read items from a file object\u000afromlist() -- append items from the list\u000afrombytes() -- append items from the string\u000aindex() -- return index of first occurrence of an object\u000ainsert() -- insert a new item into the array at a provided position\u000apop() -- remove and return item (default last)\u000aremove() -- remove first occurrence of an object\u000areverse() -- reverse the order of the items in the array\u000atofile() -- write all items to a file object\u000atolist() -- return the array converted to an ordinary list\u000atobytes() -- return the array converted to a string\u000a\u000aAttributes:\u000a\u000atypecode -- the typecode character used to create the array\u000aitemsize -- the length in bytes of one array item\u000a
p315
sa(dp316
g1
Vtypecodes
p317
sg3
I01
sg10
L5L
sasg10
L1L
s.