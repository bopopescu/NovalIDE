(dp0
Vchilds
p1
(lp2
(dp3
Vis_builtin
p4
I01
sVname
p5
VCLOCK_MONOTONIC
p6
sVtype
p7
L5L
sa(dp8
g4
I01
sg5
VCLOCK_MONOTONIC_RAW
p9
sg7
L5L
sa(dp10
g4
I01
sg5
VCLOCK_PROCESS_CPUTIME_ID
p11
sg7
L5L
sa(dp12
g4
I01
sg5
VCLOCK_REALTIME
p13
sg7
L5L
sa(dp14
g4
I01
sg5
VCLOCK_THREAD_CPUTIME_ID
p15
sg7
L5L
sa(dp16
g4
I01
sg5
V_STRUCT_TM_ITEMS
p17
sg7
L5L
sa(dp18
g4
I01
sg5
V__doc__
p19
sg7
L5L
sa(dp20
g1
(lp21
(dp22
g4
I01
sg5
V__delattr__
p23
sg7
L5L
sa(dp24
g4
I01
sg5
V__dict__
p25
sg7
L5L
sa(dp26
g4
I01
sg5
V__dir__
p27
sg7
L2L
sVdoc
p28
V__dir__() -> list\u000adefault dir() implementation
p29
sa(dp30
g4
I01
sg5
g19
sg7
L5L
sa(dp31
g4
I01
sg5
V__eq__
p32
sg7
L5L
sa(dp33
g4
I01
sg5
V__format__
p34
sg7
L2L
sg28
Vdefault object formatter
p35
sa(dp36
g4
I01
sg5
V__ge__
p37
sg7
L5L
sa(dp38
g4
I01
sg5
V__getattribute__
p39
sg7
L5L
sa(dp40
g4
I01
sg5
V__gt__
p41
sg7
L5L
sa(dp42
g4
I01
sg5
V__hash__
p43
sg7
L5L
sa(dp44
g4
I01
sg5
V__init__
p45
sg7
L5L
sa(dp46
g4
I01
sg5
V__le__
p47
sg7
L5L
sa(dp48
g4
I01
sg5
V__lt__
p49
sg7
L5L
sa(dp50
g4
I01
sg5
V__module__
p51
sg7
L5L
sa(dp52
g4
I01
sg5
V__ne__
p53
sg7
L5L
sa(dp54
g4
I01
sg5
V__new__
p55
sg7
L2L
sg28
VCreate and return a new object.  See help(type) for accurate signature.
p56
sa(dp57
g4
I01
sg5
V__reduce__
p58
sg7
L2L
sg28
Vhelper for pickle
p59
sa(dp60
g4
I01
sg5
V__reduce_ex__
p61
sg7
L2L
sg28
Vhelper for pickle
p62
sa(dp63
g4
I01
sg5
V__repr__
p64
sg7
L5L
sa(dp65
g4
I01
sg5
V__setattr__
p66
sg7
L5L
sa(dp67
g4
I01
sg5
V__sizeof__
p68
sg7
L2L
sg28
V__sizeof__() -> int\u000asize of object in memory, in bytes
p69
sa(dp70
g4
I01
sg5
V__str__
p71
sg7
L5L
sa(dp72
g4
I01
sg5
V__subclasshook__
p73
sg7
L2L
sg28
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p74
sa(dp75
g4
I01
sg5
V__weakref__
p76
sg7
L5L
sa(dp77
g4
I01
sg5
Vcreate_module
p78
sg7
L5L
sa(dp79
g4
I01
sg5
Vexec_module
p80
sg7
L5L
sa(dp81
g4
I01
sg5
Vfind_module
p82
sg7
L5L
sa(dp83
g4
I01
sg5
Vfind_spec
p84
sg7
L5L
sa(dp85
g4
I01
sg5
Vget_code
p86
sg7
L5L
sa(dp87
g4
I01
sg5
Vget_source
p88
sg7
L5L
sa(dp89
g4
I01
sg5
Vis_package
p90
sg7
L5L
sa(dp91
g4
I01
sg5
Vload_module
p92
sg7
L5L
sa(dp93
g4
I01
sg5
Vmodule_repr
p94
sg7
L5L
sasg4
I01
sg5
V__loader__
p95
sg7
L3L
sg28
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p96
sa(dp97
g4
I01
sg5
V__name__
p98
sg7
L5L
sa(dp99
g4
I01
sg5
V__package__
p100
sg7
L5L
sa(dp101
g4
I01
sg5
V__spec__
p102
sg7
L5L
sa(dp103
g4
I01
sg5
Valtzone
p104
sg7
L5L
sa(dp105
g4
I01
sg5
Vasctime
p106
sg7
L2L
sg28
Vasctime([tuple]) -> string\u000a\u000aConvert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\u000aWhen the time tuple is not present, current time as returned by localtime()\u000ais used.
p107
sa(dp108
g4
I01
sg5
Vclock
p109
sg7
L2L
sg28
Vclock() -> floating point number\u000a\u000aReturn the CPU time or real time since the start of the process or since\u000athe first call to clock().  This has as much precision as the system\u000arecords.
p110
sa(dp111
g4
I01
sg5
Vclock_getres
p112
sg7
L2L
sg28
Vclock_getres(clk_id) -> floating point number\u000a\u000aReturn the resolution (precision) of the specified clock clk_id.
p113
sa(dp114
g4
I01
sg5
Vclock_gettime
p115
sg7
L2L
sg28
Vclock_gettime(clk_id) -> floating point number\u000a\u000aReturn the time of the specified clock clk_id.
p116
sa(dp117
g4
I01
sg5
Vclock_settime
p118
sg7
L2L
sg28
Vclock_settime(clk_id, time)\u000a\u000aSet the time of the specified clock clk_id.
p119
sa(dp120
g4
I01
sg5
Vctime
p121
sg7
L2L
sg28
Vctime(seconds) -> string\u000a\u000aConvert a time in seconds since the Epoch to a string in local time.\u000aThis is equivalent to asctime(localtime(seconds)). When the time tuple is\u000anot present, current time as returned by localtime() is used.
p122
sa(dp123
g4
I01
sg5
Vdaylight
p124
sg7
L5L
sa(dp125
g4
I01
sg5
Vget_clock_info
p126
sg7
L2L
sg28
Vget_clock_info(name: str) -> dict\u000a\u000aGet information of the specified clock.
p127
sa(dp128
g4
I01
sg5
Vgmtime
p129
sg7
L2L
sg28
Vgmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,\u000a                       tm_sec, tm_wday, tm_yday, tm_isdst)\u000a\u000aConvert seconds since the Epoch to a time tuple expressing UTC (a.k.a.\u000aGMT).  When 'seconds' is not passed in, convert the current time instead.\u000a\u000aIf the platform supports the tm_gmtoff and tm_zone, they are available as\u000aattributes only.
p130
sa(dp131
g4
I01
sg5
Vlocaltime
p132
sg7
L2L
sg28
Vlocaltime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\u000a                          tm_sec,tm_wday,tm_yday,tm_isdst)\u000a\u000aConvert seconds since the Epoch to a time tuple expressing local time.\u000aWhen 'seconds' is not passed in, convert the current time instead.
p133
sa(dp134
g4
I01
sg5
Vmktime
p135
sg7
L2L
sg28
Vmktime(tuple) -> floating point number\u000a\u000aConvert a time tuple in local time to seconds since the Epoch.\u000aNote that mktime(gmtime(0)) will not generally return zero for most\u000atime zones; instead the returned value will either be equal to that\u000aof the timezone or altzone attributes on the time module.
p136
sa(dp137
g4
I01
sg5
Vmonotonic
p138
sg7
L2L
sg28
Vmonotonic() -> float\u000a\u000aMonotonic clock, cannot go backward.
p139
sa(dp140
g4
I01
sg5
Vperf_counter
p141
sg7
L2L
sg28
Vperf_counter() -> float\u000a\u000aPerformance counter for benchmarking.
p142
sa(dp143
g4
I01
sg5
Vprocess_time
p144
sg7
L2L
sg28
Vprocess_time() -> float\u000a\u000aProcess time for profiling: sum of the kernel and user-space CPU time.
p145
sa(dp146
g4
I01
sg5
Vsleep
p147
sg7
L2L
sg28
Vsleep(seconds)\u000a\u000aDelay execution for a given number of seconds.  The argument may be\u000aa floating point number for subsecond precision.
p148
sa(dp149
g4
I01
sg5
Vstrftime
p150
sg7
L2L
sg28
Vstrftime(format[, tuple]) -> string\u000a\u000aConvert a time tuple to a string according to a format specification.\u000aSee the library reference manual for formatting codes. When the time tuple\u000ais not present, current time as returned by localtime() is used.\u000a\u000aCommonly used format codes:\u000a\u000a%Y  Year with century as a decimal number.\u000a%m  Month as a decimal number [01,12].\u000a%d  Day of the month as a decimal number [01,31].\u000a%H  Hour (24-hour clock) as a decimal number [00,23].\u000a%M  Minute as a decimal number [00,59].\u000a%S  Second as a decimal number [00,61].\u000a%z  Time zone offset from UTC.\u000a%a  Locale's abbreviated weekday name.\u000a%A  Locale's full weekday name.\u000a%b  Locale's abbreviated month name.\u000a%B  Locale's full month name.\u000a%c  Locale's appropriate date and time representation.\u000a%I  Hour (12-hour clock) as a decimal number [01,12].\u000a%p  Locale's equivalent of either AM or PM.\u000a\u000aOther codes may be available on your platform.  See documentation for\u000athe C library strftime function.\u000a
p151
sa(dp152
g4
I01
sg5
Vstrptime
p153
sg7
L2L
sg28
Vstrptime(string, format) -> struct_time\u000a\u000aParse a string to a time tuple according to a format specification.\u000aSee the library reference manual for formatting codes (same as\u000astrftime()).\u000a\u000aCommonly used format codes:\u000a\u000a%Y  Year with century as a decimal number.\u000a%m  Month as a decimal number [01,12].\u000a%d  Day of the month as a decimal number [01,31].\u000a%H  Hour (24-hour clock) as a decimal number [00,23].\u000a%M  Minute as a decimal number [00,59].\u000a%S  Second as a decimal number [00,61].\u000a%z  Time zone offset from UTC.\u000a%a  Locale's abbreviated weekday name.\u000a%A  Locale's full weekday name.\u000a%b  Locale's abbreviated month name.\u000a%B  Locale's full month name.\u000a%c  Locale's appropriate date and time representation.\u000a%I  Hour (12-hour clock) as a decimal number [01,12].\u000a%p  Locale's equivalent of either AM or PM.\u000a\u000aOther codes may be available on your platform.  See documentation for\u000athe C library strftime function.\u000a
p154
sa(dp155
g1
(lp156
(dp157
g4
I01
sg5
V__add__
p158
sg7
L5L
sa(dp159
g4
I01
sg5
V__contains__
p160
sg7
L5L
sa(dp161
g4
I01
sg5
g23
sg7
L5L
sa(dp162
g4
I01
sg5
g27
sg7
L2L
sg28
V__dir__() -> list\u000adefault dir() implementation
p163
sa(dp164
g4
I01
sg5
g19
sg7
L5L
sa(dp165
g4
I01
sg5
g32
sg7
L5L
sa(dp166
g4
I01
sg5
g34
sg7
L2L
sg28
Vdefault object formatter
p167
sa(dp168
g4
I01
sg5
g37
sg7
L5L
sa(dp169
g4
I01
sg5
g39
sg7
L5L
sa(dp170
g4
I01
sg5
V__getitem__
p171
sg7
L5L
sa(dp172
g4
I01
sg5
V__getnewargs__
p173
sg7
L2L
sg28
Nsa(dp174
g4
I01
sg5
g41
sg7
L5L
sa(dp175
g4
I01
sg5
g43
sg7
L5L
sa(dp176
g4
I01
sg5
g45
sg7
L5L
sa(dp177
g4
I01
sg5
V__iter__
p178
sg7
L5L
sa(dp179
g4
I01
sg5
g47
sg7
L5L
sa(dp180
g4
I01
sg5
V__len__
p181
sg7
L5L
sa(dp182
g4
I01
sg5
g49
sg7
L5L
sa(dp183
g4
I01
sg5
V__mul__
p184
sg7
L5L
sa(dp185
g4
I01
sg5
g53
sg7
L5L
sa(dp186
g4
I01
sg5
g55
sg7
L2L
sg28
VCreate and return a new object.  See help(type) for accurate signature.
p187
sa(dp188
g4
I01
sg5
g58
sg7
L2L
sg28
Nsa(dp189
g4
I01
sg5
g61
sg7
L2L
sg28
Vhelper for pickle
p190
sa(dp191
g4
I01
sg5
g64
sg7
L5L
sa(dp192
g4
I01
sg5
V__rmul__
p193
sg7
L5L
sa(dp194
g4
I01
sg5
g66
sg7
L5L
sa(dp195
g4
I01
sg5
g68
sg7
L2L
sg28
V__sizeof__() -> int\u000asize of object in memory, in bytes
p196
sa(dp197
g4
I01
sg5
g71
sg7
L5L
sa(dp198
g4
I01
sg5
g73
sg7
L2L
sg28
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p199
sa(dp200
g4
I01
sg5
Vcount
p201
sg7
L2L
sg28
VT.count(value) -> integer -- return number of occurrences of value
p202
sa(dp203
g4
I01
sg5
Vindex
p204
sg7
L2L
sg28
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p205
sa(dp206
g4
I01
sg5
Vn_fields
p207
sg7
L5L
sa(dp208
g4
I01
sg5
Vn_sequence_fields
p209
sg7
L5L
sa(dp210
g4
I01
sg5
Vn_unnamed_fields
p211
sg7
L5L
sa(dp212
g4
I01
sg5
Vtm_gmtoff
p213
sg7
L5L
sa(dp214
g4
I01
sg5
Vtm_hour
p215
sg7
L5L
sa(dp216
g4
I01
sg5
Vtm_isdst
p217
sg7
L5L
sa(dp218
g4
I01
sg5
Vtm_mday
p219
sg7
L5L
sa(dp220
g4
I01
sg5
Vtm_min
p221
sg7
L5L
sa(dp222
g4
I01
sg5
Vtm_mon
p223
sg7
L5L
sa(dp224
g4
I01
sg5
Vtm_sec
p225
sg7
L5L
sa(dp226
g4
I01
sg5
Vtm_wday
p227
sg7
L5L
sa(dp228
g4
I01
sg5
Vtm_yday
p229
sg7
L5L
sa(dp230
g4
I01
sg5
Vtm_year
p231
sg7
L5L
sa(dp232
g4
I01
sg5
Vtm_zone
p233
sg7
L5L
sasg4
I01
sg5
Vstruct_time
p234
sg7
L3L
sg28
VThe time value as returned by gmtime(), localtime(), and strptime(), and\u000a accepted by asctime(), mktime() and strftime().  May be considered as a\u000a sequence of 9 integers.\u000a\u000a Note that several fields' values are not the same as those defined by\u000a the C language standard for struct tm.  For example, the value of the\u000a field tm_year is the actual year, not year - 1900.  See individual\u000a fields' descriptions for details.
p235
sa(dp236
g4
I01
sg5
Vtime
p237
sg7
L2L
sg28
Vtime() -> floating point number\u000a\u000aReturn the current time in seconds since the Epoch.\u000aFractions of a second may be present if the system clock provides them.
p238
sa(dp239
g4
I01
sg5
Vtimezone
p240
sg7
L5L
sa(dp241
g4
I01
sg5
Vtzname
p242
sg7
L5L
sa(dp243
g4
I01
sg5
Vtzset
p244
sg7
L2L
sg28
Vtzset()\u000a\u000aInitialize, or reinitialize, the local timezone to the value stored in\u000aos.environ['TZ']. The TZ environment variable should be specified in\u000astandard Unix timezone format as documented in the tzset man page\u000a(eg. 'US/Eastern', 'Europe/Amsterdam'). Unknown timezones will silently\u000afall back to UTC. If the TZ environment variable is not set, the local\u000atimezone is set to the systems best guess of wallclock time.\u000aChanging the TZ environment variable without calling tzset *may* change\u000athe local timezone used by methods such as localtime, but this behaviour\u000ashould not be relied on.
p245
sasg4
I01
sg5
Vtime
p246
sg28
VThis module provides various functions to manipulate time values.\u000a\u000aThere are two standard representations of time.  One is the number\u000aof seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer\u000aor a floating point number (to represent fractions of seconds).\u000aThe Epoch is system-defined; on Unix, it is generally January 1st, 1970.\u000aThe actual value can be retrieved by calling gmtime(0).\u000a\u000aThe other representation is a tuple of 9 integers giving local time.\u000aThe tuple items are:\u000a  year (including century, e.g. 1998)\u000a  month (1-12)\u000a  day (1-31)\u000a  hours (0-23)\u000a  minutes (0-59)\u000a  seconds (0-59)\u000a  weekday (0-6, Monday is 0)\u000a  Julian day (day in the year, 1-366)\u000a  DST (Daylight Savings Time) flag (-1, 0 or 1)\u000aIf the DST flag is 0, the time is given in the regular time zone;\u000aif it is 1, the time is given in the DST time zone;\u000aif it is -1, mktime() should guess based on the date and time.\u000a\u000aVariables:\u000a\u000atimezone -- difference in seconds between UTC and local standard time\u000aaltzone -- difference in  seconds between UTC and local DST time\u000adaylight -- whether local time should reflect DST\u000atzname -- tuple of (standard time zone name, DST time zone name)\u000a\u000aFunctions:\u000a\u000atime() -- return current time in seconds since the Epoch as a float\u000aclock() -- return CPU time since process start as a float\u000asleep() -- delay for a number of seconds given as a float\u000agmtime() -- convert seconds since Epoch to UTC tuple\u000alocaltime() -- convert seconds since Epoch to local time tuple\u000aasctime() -- convert time tuple to string\u000actime() -- convert time in seconds to string\u000amktime() -- convert local time tuple to seconds since Epoch\u000astrftime() -- convert time tuple to string according to format specification\u000astrptime() -- parse string to time tuple according to format specification\u000atzset() -- change the local timezone
p247
s.