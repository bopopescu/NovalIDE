(dp0
Vname
p1
Vtime
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module provides various functions to manipulate time values.\u000a\u000aThere are two standard representations of time.  One is the number\u000aof seconds since the Epoch, in UTC (a.k.a. GMT).  It may be an integer\u000aor a floating point number (to represent fractions of seconds).\u000aThe Epoch is system-defined; on Unix, it is generally January 1st, 1970.\u000aThe actual value can be retrieved by calling gmtime(0).\u000a\u000aThe other representation is a tuple of 9 integers giving local time.\u000aThe tuple items are:\u000a  year (including century, e.g. 1998)\u000a  month (1-12)\u000a  day (1-31)\u000a  hours (0-23)\u000a  minutes (0-59)\u000a  seconds (0-59)\u000a  weekday (0-6, Monday is 0)\u000a  Julian day (day in the year, 1-366)\u000a  DST (Daylight Savings Time) flag (-1, 0 or 1)\u000aIf the DST flag is 0, the time is given in the regular time zone;\u000aif it is 1, the time is given in the DST time zone;\u000aif it is -1, mktime() should guess based on the date and time.\u000a
p5
sVchilds
p6
(lp7
(dp8
g1
V_STRUCT_TM_ITEMS
p9
sg3
I01
sVtype
p10
L5L
sa(dp11
g1
V__doc__
p12
sg3
I01
sg10
L5L
sa(dp13
g1
V__loader__
p14
sg3
I01
sg10
L3L
sg6
(lp15
(dp16
g1
V__delattr__
p17
sg3
I01
sg10
L5L
sa(dp18
g1
V__dict__
p19
sg3
I01
sg10
L5L
sa(dp20
g1
V__dir__
p21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p22
sa(dp23
g1
g12
sg3
I01
sg10
L5L
sa(dp24
g1
V__eq__
p25
sg3
I01
sg10
L5L
sa(dp26
g1
V__format__
p27
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p28
sa(dp29
g1
V__ge__
p30
sg3
I01
sg10
L5L
sa(dp31
g1
V__getattribute__
p32
sg3
I01
sg10
L5L
sa(dp33
g1
V__gt__
p34
sg3
I01
sg10
L5L
sa(dp35
g1
V__hash__
p36
sg3
I01
sg10
L5L
sa(dp37
g1
V__init__
p38
sg3
I01
sg10
L5L
sa(dp39
g1
V__init_subclass__
p40
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p41
sa(dp42
g1
V__le__
p43
sg3
I01
sg10
L5L
sa(dp44
g1
V__lt__
p45
sg3
I01
sg10
L5L
sa(dp46
g1
V__module__
p47
sg3
I01
sg10
L5L
sa(dp48
g1
V__ne__
p49
sg3
I01
sg10
L5L
sa(dp50
g1
V__new__
p51
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p52
sa(dp53
g1
V__reduce__
p54
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p55
sa(dp56
g1
V__reduce_ex__
p57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p58
sa(dp59
g1
V__repr__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__setattr__
p62
sg3
I01
sg10
L5L
sa(dp63
g1
V__sizeof__
p64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p65
sa(dp66
g1
V__str__
p67
sg3
I01
sg10
L5L
sa(dp68
g1
V__subclasshook__
p69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p70
sa(dp71
g1
V__weakref__
p72
sg3
I01
sg10
L5L
sa(dp73
g1
Vcreate_module
p74
sg3
I01
sg10
L5L
sa(dp75
g1
Vexec_module
p76
sg3
I01
sg10
L5L
sa(dp77
g1
Vfind_module
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Vfind_spec
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vget_code
p82
sg3
I01
sg10
L5L
sa(dp83
g1
Vget_source
p84
sg3
I01
sg10
L5L
sa(dp85
g1
Vis_package
p86
sg3
I01
sg10
L5L
sa(dp87
g1
Vload_module
p88
sg3
I01
sg10
L5L
sa(dp89
g1
Vmodule_repr
p90
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p91
sa(dp92
g1
V__name__
p93
sg3
I01
sg10
L5L
sa(dp94
g1
V__package__
p95
sg3
I01
sg10
L5L
sa(dp96
g1
V__spec__
p97
sg3
I01
sg10
L5L
sa(dp98
g1
Valtzone
p99
sg3
I01
sg10
L5L
sa(dp100
g1
Vasctime
p101
sg3
I01
sg10
L2L
sg4
Vasctime([tuple]) -> string\u000a\u000aConvert a time tuple to a string, e.g. 'Sat Jun 06 16:26:11 1998'.\u000aWhen the time tuple is not present, current time as returned by localtime()\u000ais used.
p102
sa(dp103
g1
Vclock
p104
sg3
I01
sg10
L2L
sg4
Vclock() -> floating point number\u000a\u000aReturn the CPU time or real time since the start of the process or since\u000athe first call to clock().  This has as much precision as the system\u000arecords.
p105
sa(dp106
g1
Vctime
p107
sg3
I01
sg10
L2L
sg4
Vctime(seconds) -> string\u000a\u000aConvert a time in seconds since the Epoch to a string in local time.\u000aThis is equivalent to asctime(localtime(seconds)). When the time tuple is\u000anot present, current time as returned by localtime() is used.
p108
sa(dp109
g1
Vdaylight
p110
sg3
I01
sg10
L5L
sa(dp111
g1
Vget_clock_info
p112
sg3
I01
sg10
L2L
sg4
Vget_clock_info(name: str) -> dict\u000a\u000aGet information of the specified clock.
p113
sa(dp114
g1
Vgmtime
p115
sg3
I01
sg10
L2L
sg4
Vgmtime([seconds]) -> (tm_year, tm_mon, tm_mday, tm_hour, tm_min,\u000a                       tm_sec, tm_wday, tm_yday, tm_isdst)\u000a\u000aConvert seconds since the Epoch to a time tuple expressing UTC (a.k.a.\u000aGMT).  When 'seconds' is not passed in, convert the current time instead.\u000a\u000aIf the platform supports the tm_gmtoff and tm_zone, they are available as\u000aattributes only.
p116
sa(dp117
g1
Vlocaltime
p118
sg3
I01
sg10
L2L
sg4
Vlocaltime([seconds]) -> (tm_year,tm_mon,tm_mday,tm_hour,tm_min,\u000a                          tm_sec,tm_wday,tm_yday,tm_isdst)\u000a\u000aConvert seconds since the Epoch to a time tuple expressing local time.\u000aWhen 'seconds' is not passed in, convert the current time instead.
p119
sa(dp120
g1
Vmktime
p121
sg3
I01
sg10
L2L
sg4
Vmktime(tuple) -> floating point number\u000a\u000aConvert a time tuple in local time to seconds since the Epoch.\u000aNote that mktime(gmtime(0)) will not generally return zero for most\u000atime zones; instead the returned value will either be equal to that\u000aof the timezone or altzone attributes on the time module.
p122
sa(dp123
g1
Vmonotonic
p124
sg3
I01
sg10
L2L
sg4
Vmonotonic() -> float\u000a\u000aMonotonic clock, cannot go backward.
p125
sa(dp126
g1
Vperf_counter
p127
sg3
I01
sg10
L2L
sg4
Vperf_counter() -> float\u000a\u000aPerformance counter for benchmarking.
p128
sa(dp129
g1
Vprocess_time
p130
sg3
I01
sg10
L2L
sg4
Vprocess_time() -> float\u000a\u000aProcess time for profiling: sum of the kernel and user-space CPU time.
p131
sa(dp132
g1
Vsleep
p133
sg3
I01
sg10
L2L
sg4
Vsleep(seconds)\u000a\u000aDelay execution for a given number of seconds.  The argument may be\u000aa floating point number for subsecond precision.
p134
sa(dp135
g1
Vstrftime
p136
sg3
I01
sg10
L2L
sg4
Vstrftime(format[, tuple]) -> string\u000a\u000aConvert a time tuple to a string according to a format specification.\u000aSee the library reference manual for formatting codes. When the time tuple\u000ais not present, current time as returned by localtime() is used.\u000a\u000aCommonly used format codes:\u000a\u000a%Y  Year with century as a decimal number.\u000a%m  Month as a decimal number [01,12].\u000a%d  Day of the month as a decimal number [01,31].\u000a%H  Hour (24-hour clock) as a decimal number [00,23].\u000a%M  Minute as a decimal number [00,59].\u000a%S  Second as a decimal number [00,61].\u000a%z  Time zone offset from UTC.\u000a%a  Locale's abbreviated weekday name.\u000a%A  Locale's full weekday name.\u000a%b  Locale's abbreviated month name.\u000a%B  Locale's full month name.\u000a%c  Locale's appropriate date and time representation.\u000a%I  Hour (12-hour clock) as a decimal number [01,12].\u000a%p  Locale's equivalent of either AM or PM.\u000a\u000aOther codes may be available on your platform.  See documentation for\u000athe C library strftime function.\u000a
p137
sa(dp138
g1
Vstrptime
p139
sg3
I01
sg10
L2L
sg4
Vstrptime(string, format) -> struct_time\u000a\u000aParse a string to a time tuple according to a format specification.\u000aSee the library reference manual for formatting codes (same as\u000astrftime()).\u000a\u000aCommonly used format codes:\u000a\u000a%Y  Year with century as a decimal number.\u000a%m  Month as a decimal number [01,12].\u000a%d  Day of the month as a decimal number [01,31].\u000a%H  Hour (24-hour clock) as a decimal number [00,23].\u000a%M  Minute as a decimal number [00,59].\u000a%S  Second as a decimal number [00,61].\u000a%z  Time zone offset from UTC.\u000a%a  Locale's abbreviated weekday name.\u000a%A  Locale's full weekday name.\u000a%b  Locale's abbreviated month name.\u000a%B  Locale's full month name.\u000a%c  Locale's appropriate date and time representation.\u000a%I  Hour (12-hour clock) as a decimal number [01,12].\u000a%p  Locale's equivalent of either AM or PM.\u000a\u000aOther codes may be available on your platform.  See documentation for\u000athe C library strftime function.\u000a
p140
sa(dp141
g1
Vstruct_time
p142
sg3
I01
sg10
L3L
sg6
(lp143
(dp144
g1
V__add__
p145
sg3
I01
sg10
L5L
sa(dp146
g1
V__contains__
p147
sg3
I01
sg10
L5L
sa(dp148
g1
g17
sg3
I01
sg10
L5L
sa(dp149
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p150
sa(dp151
g1
g12
sg3
I01
sg10
L5L
sa(dp152
g1
g25
sg3
I01
sg10
L5L
sa(dp153
g1
g27
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p154
sa(dp155
g1
g30
sg3
I01
sg10
L5L
sa(dp156
g1
g32
sg3
I01
sg10
L5L
sa(dp157
g1
V__getitem__
p158
sg3
I01
sg10
L5L
sa(dp159
g1
V__getnewargs__
p160
sg3
I01
sg10
L2L
sg4
Nsa(dp161
g1
g34
sg3
I01
sg10
L5L
sa(dp162
g1
g36
sg3
I01
sg10
L5L
sa(dp163
g1
g38
sg3
I01
sg10
L5L
sa(dp164
g1
g40
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p165
sa(dp166
g1
V__iter__
p167
sg3
I01
sg10
L5L
sa(dp168
g1
g43
sg3
I01
sg10
L5L
sa(dp169
g1
V__len__
p170
sg3
I01
sg10
L5L
sa(dp171
g1
g45
sg3
I01
sg10
L5L
sa(dp172
g1
V__mul__
p173
sg3
I01
sg10
L5L
sa(dp174
g1
g49
sg3
I01
sg10
L5L
sa(dp175
g1
g51
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p176
sa(dp177
g1
g54
sg3
I01
sg10
L2L
sg4
Nsa(dp178
g1
g57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p179
sa(dp180
g1
g60
sg3
I01
sg10
L5L
sa(dp181
g1
V__rmul__
p182
sg3
I01
sg10
L5L
sa(dp183
g1
g62
sg3
I01
sg10
L5L
sa(dp184
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p185
sa(dp186
g1
g67
sg3
I01
sg10
L5L
sa(dp187
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p188
sa(dp189
g1
Vcount
p190
sg3
I01
sg10
L2L
sg4
VT.count(value) -> integer -- return number of occurrences of value
p191
sa(dp192
g1
Vindex
p193
sg3
I01
sg10
L2L
sg4
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p194
sa(dp195
g1
Vn_fields
p196
sg3
I01
sg10
L5L
sa(dp197
g1
Vn_sequence_fields
p198
sg3
I01
sg10
L5L
sa(dp199
g1
Vn_unnamed_fields
p200
sg3
I01
sg10
L5L
sa(dp201
g1
Vtm_gmtoff
p202
sg3
I01
sg10
L5L
sa(dp203
g1
Vtm_hour
p204
sg3
I01
sg10
L5L
sa(dp205
g1
Vtm_isdst
p206
sg3
I01
sg10
L5L
sa(dp207
g1
Vtm_mday
p208
sg3
I01
sg10
L5L
sa(dp209
g1
Vtm_min
p210
sg3
I01
sg10
L5L
sa(dp211
g1
Vtm_mon
p212
sg3
I01
sg10
L5L
sa(dp213
g1
Vtm_sec
p214
sg3
I01
sg10
L5L
sa(dp215
g1
Vtm_wday
p216
sg3
I01
sg10
L5L
sa(dp217
g1
Vtm_yday
p218
sg3
I01
sg10
L5L
sa(dp219
g1
Vtm_year
p220
sg3
I01
sg10
L5L
sa(dp221
g1
Vtm_zone
p222
sg3
I01
sg10
L5L
sasg4
VThe time value as returned by gmtime(), localtime(), and strptime(), and\u000a accepted by asctime(), mktime() and strftime().  May be considered as a\u000a sequence of 9 integers.\u000a\u000a Note that several fields' values are not the same as those defined by\u000a the C language standard for struct tm.  For example, the value of the\u000a field tm_year is the actual year, not year - 1900.  See individual\u000a fields' descriptions for details.
p223
sa(dp224
g1
Vtime
p225
sg3
I01
sg10
L2L
sg4
Vtime() -> floating point number\u000a\u000aReturn the current time in seconds since the Epoch.\u000aFractions of a second may be present if the system clock provides them.
p226
sa(dp227
g1
Vtimezone
p228
sg3
I01
sg10
L5L
sa(dp229
g1
Vtzname
p230
sg3
I01
sg10
L5L
sasg10
L1L
s.