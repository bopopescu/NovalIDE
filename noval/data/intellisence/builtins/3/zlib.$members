(dp0
Vname
p1
Vzlib
p2
sVis_builtin
p3
I01
sVdoc
p4
VThe functions in this module allow compression and decompression using the\u000azlib library, which is based on GNU zip.\u000a\u000aadler32(string[, start]) -- Compute an Adler-32 checksum.\u000acompress(data[, level]) -- Compress data, with compression level 0-9 or -1.\u000acompressobj([level[, ...]]) -- Return a compressor object.\u000acrc32(string[, start]) -- Compute a CRC-32 checksum.\u000adecompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.\u000adecompressobj([wbits[, zdict]]]) -- Return a decompressor object.\u000a\u000a'wbits' is window buffer size and container format.\u000aCompressor objects support compress() and flush() methods; decompressor\u000aobjects support decompress() and flush().
p5
sVchilds
p6
(lp7
(dp8
g1
VDEFLATED
p9
sg3
I01
sVtype
p10
L5L
sa(dp11
g1
VDEF_BUF_SIZE
p12
sg3
I01
sg10
L5L
sa(dp13
g1
VDEF_MEM_LEVEL
p14
sg3
I01
sg10
L5L
sa(dp15
g1
VMAX_WBITS
p16
sg3
I01
sg10
L5L
sa(dp17
g1
VZLIB_RUNTIME_VERSION
p18
sg3
I01
sg10
L5L
sa(dp19
g1
VZLIB_VERSION
p20
sg3
I01
sg10
L5L
sa(dp21
g1
VZ_BEST_COMPRESSION
p22
sg3
I01
sg10
L5L
sa(dp23
g1
VZ_BEST_SPEED
p24
sg3
I01
sg10
L5L
sa(dp25
g1
VZ_DEFAULT_COMPRESSION
p26
sg3
I01
sg10
L5L
sa(dp27
g1
VZ_DEFAULT_STRATEGY
p28
sg3
I01
sg10
L5L
sa(dp29
g1
VZ_FILTERED
p30
sg3
I01
sg10
L5L
sa(dp31
g1
VZ_FINISH
p32
sg3
I01
sg10
L5L
sa(dp33
g1
VZ_FULL_FLUSH
p34
sg3
I01
sg10
L5L
sa(dp35
g1
VZ_HUFFMAN_ONLY
p36
sg3
I01
sg10
L5L
sa(dp37
g1
VZ_NO_FLUSH
p38
sg3
I01
sg10
L5L
sa(dp39
g1
VZ_SYNC_FLUSH
p40
sg3
I01
sg10
L5L
sa(dp41
g1
V__doc__
p42
sg3
I01
sg10
L5L
sa(dp43
g1
V__loader__
p44
sg3
I01
sg10
L3L
sg6
(lp45
(dp46
g1
V__delattr__
p47
sg3
I01
sg10
L5L
sa(dp48
g1
V__dict__
p49
sg3
I01
sg10
L5L
sa(dp50
g1
V__dir__
p51
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p52
sa(dp53
g1
g42
sg3
I01
sg10
L5L
sa(dp54
g1
V__eq__
p55
sg3
I01
sg10
L5L
sa(dp56
g1
V__format__
p57
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p58
sa(dp59
g1
V__ge__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__getattribute__
p62
sg3
I01
sg10
L5L
sa(dp63
g1
V__gt__
p64
sg3
I01
sg10
L5L
sa(dp65
g1
V__hash__
p66
sg3
I01
sg10
L5L
sa(dp67
g1
V__init__
p68
sg3
I01
sg10
L5L
sa(dp69
g1
V__init_subclass__
p70
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p71
sa(dp72
g1
V__le__
p73
sg3
I01
sg10
L5L
sa(dp74
g1
V__lt__
p75
sg3
I01
sg10
L5L
sa(dp76
g1
V__module__
p77
sg3
I01
sg10
L5L
sa(dp78
g1
V__ne__
p79
sg3
I01
sg10
L5L
sa(dp80
g1
V__new__
p81
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p82
sa(dp83
g1
V__reduce__
p84
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p85
sa(dp86
g1
V__reduce_ex__
p87
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p88
sa(dp89
g1
V__repr__
p90
sg3
I01
sg10
L5L
sa(dp91
g1
V__setattr__
p92
sg3
I01
sg10
L5L
sa(dp93
g1
V__sizeof__
p94
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p95
sa(dp96
g1
V__str__
p97
sg3
I01
sg10
L5L
sa(dp98
g1
V__subclasshook__
p99
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p100
sa(dp101
g1
V__weakref__
p102
sg3
I01
sg10
L5L
sa(dp103
g1
Vcreate_module
p104
sg3
I01
sg10
L5L
sa(dp105
g1
Vexec_module
p106
sg3
I01
sg10
L5L
sa(dp107
g1
Vfind_module
p108
sg3
I01
sg10
L5L
sa(dp109
g1
Vfind_spec
p110
sg3
I01
sg10
L5L
sa(dp111
g1
Vget_code
p112
sg3
I01
sg10
L5L
sa(dp113
g1
Vget_source
p114
sg3
I01
sg10
L5L
sa(dp115
g1
Vis_package
p116
sg3
I01
sg10
L5L
sa(dp117
g1
Vload_module
p118
sg3
I01
sg10
L5L
sa(dp119
g1
Vmodule_repr
p120
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p121
sa(dp122
g1
V__name__
p123
sg3
I01
sg10
L5L
sa(dp124
g1
V__package__
p125
sg3
I01
sg10
L5L
sa(dp126
g1
V__spec__
p127
sg3
I01
sg10
L5L
sa(dp128
g1
V__version__
p129
sg3
I01
sg10
L5L
sa(dp130
g1
Vadler32
p131
sg3
I01
sg10
L2L
sg4
VCompute an Adler-32 checksum of data.\u000a\u000a  value\u000a    Starting value of the checksum.\u000a\u000aThe returned checksum is an integer.
p132
sa(dp133
g1
Vcompress
p134
sg3
I01
sg10
L2L
sg4
VReturns a bytes object containing compressed data.\u000a\u000a  data\u000a    Binary data to be compressed.\u000a  level\u000a    Compression level, in 0-9 or -1.
p135
sa(dp136
g1
Vcompressobj
p137
sg3
I01
sg10
L2L
sg4
VReturn a compressor object.\u000a\u000a  level\u000a    The compression level (an integer in the range 0-9 or -1; default is\u000a    currently equivalent to 6).  Higher compression levels are slower,\u000a    but produce smaller results.\u000a  method\u000a    The compression algorithm.  If given, this must be DEFLATED.\u000a  wbits\u000a    +9 to +15: The base-two logarithm of the window size.  Include a zlib\u000a        container.\u000a    -9 to -15: Generate a raw stream.\u000a    +25 to +31: Include a gzip container.\u000a  memLevel\u000a    Controls the amount of memory used for internal compression state.\u000a    Valid values range from 1 to 9.  Higher values result in higher memory\u000a    usage, faster compression, and smaller output.\u000a  strategy\u000a    Used to tune the compression algorithm.  Possible values are\u000a    Z_DEFAULT_STRATEGY, Z_FILTERED, and Z_HUFFMAN_ONLY.\u000a  zdict\u000a    The predefined compression dictionary - a sequence of bytes\u000a    containing subsequences that are likely to occur in the input data.
p138
sa(dp139
g1
Vcrc32
p140
sg3
I01
sg10
L2L
sg4
VCompute a CRC-32 checksum of data.\u000a\u000a  value\u000a    Starting value of the checksum.\u000a\u000aThe returned checksum is an integer.
p141
sa(dp142
g1
Vdecompress
p143
sg3
I01
sg10
L2L
sg4
VReturns a bytes object containing the uncompressed data.\u000a\u000a  data\u000a    Compressed data.\u000a  wbits\u000a    The window buffer size and container format.\u000a  bufsize\u000a    The initial output buffer size.
p144
sa(dp145
g1
Vdecompressobj
p146
sg3
I01
sg10
L2L
sg4
VReturn a decompressor object.\u000a\u000a  wbits\u000a    The window buffer size and container format.\u000a  zdict\u000a    The predefined compression dictionary.  This must be the same\u000a    dictionary as used by the compressor that produced the input data.
p147
sa(dp148
g1
Verror
p149
sg3
I01
sg10
L3L
sg6
(lp150
(dp151
g1
V__cause__
p152
sg3
I01
sg10
L5L
sa(dp153
g1
V__context__
p154
sg3
I01
sg10
L5L
sa(dp155
g1
g47
sg3
I01
sg10
L5L
sa(dp156
g1
g49
sg3
I01
sg10
L5L
sa(dp157
g1
g51
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p158
sa(dp159
g1
g42
sg3
I01
sg10
L5L
sa(dp160
g1
g55
sg3
I01
sg10
L5L
sa(dp161
g1
g57
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p162
sa(dp163
g1
g60
sg3
I01
sg10
L5L
sa(dp164
g1
g62
sg3
I01
sg10
L5L
sa(dp165
g1
g64
sg3
I01
sg10
L5L
sa(dp166
g1
g66
sg3
I01
sg10
L5L
sa(dp167
g1
g68
sg3
I01
sg10
L5L
sa(dp168
g1
g70
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p169
sa(dp170
g1
g73
sg3
I01
sg10
L5L
sa(dp171
g1
g75
sg3
I01
sg10
L5L
sa(dp172
g1
g77
sg3
I01
sg10
L5L
sa(dp173
g1
g79
sg3
I01
sg10
L5L
sa(dp174
g1
g81
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p175
sa(dp176
g1
g84
sg3
I01
sg10
L2L
sg4
Nsa(dp177
g1
g87
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p178
sa(dp179
g1
g90
sg3
I01
sg10
L5L
sa(dp180
g1
g92
sg3
I01
sg10
L5L
sa(dp181
g1
V__setstate__
p182
sg3
I01
sg10
L2L
sg4
Nsa(dp183
g1
g94
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p184
sa(dp185
g1
g97
sg3
I01
sg10
L5L
sa(dp186
g1
g99
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p187
sa(dp188
g1
V__suppress_context__
p189
sg3
I01
sg10
L5L
sa(dp190
g1
V__traceback__
p191
sg3
I01
sg10
L5L
sa(dp192
g1
g102
sg3
I01
sg10
L5L
sa(dp193
g1
Vargs
p194
sg3
I01
sg10
L5L
sa(dp195
g1
Vwith_traceback
p196
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p197
sasg4
Nsasg10
L1L
s.