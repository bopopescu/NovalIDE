(dp0
Vname
p1
V_winapi
p2
sVis_builtin
p3
I01
sVdoc
p4
NsVchilds
p5
(lp6
(dp7
g1
VCREATE_NEW_CONSOLE
p8
sg3
I01
sVtype
p9
L5L
sa(dp10
g1
VCREATE_NEW_PROCESS_GROUP
p11
sg3
I01
sg9
L5L
sa(dp12
g1
VCloseHandle
p13
sg3
I01
sg9
L2L
sg4
VClose handle.
p14
sa(dp15
g1
VConnectNamedPipe
p16
sg3
I01
sg9
L2L
sg4
Nsa(dp17
g1
VCreateFile
p18
sg3
I01
sg9
L2L
sg4
Nsa(dp19
g1
VCreateJunction
p20
sg3
I01
sg9
L2L
sg4
Nsa(dp21
g1
VCreateNamedPipe
p22
sg3
I01
sg9
L2L
sg4
Nsa(dp23
g1
VCreatePipe
p24
sg3
I01
sg9
L2L
sg4
VCreate an anonymous pipe.\u000a\u000a  pipe_attrs\u000a    Ignored internally, can be None.\u000a\u000aReturns a 2-tuple of handles, to the read and write ends of the pipe.
p25
sa(dp26
g1
VCreateProcess
p27
sg3
I01
sg9
L2L
sg4
VCreate a new process and its primary thread.\u000a\u000a  proc_attrs\u000a    Ignored internally, can be None.\u000a  thread_attrs\u000a    Ignored internally, can be None.\u000a\u000aThe return value is a tuple of the process handle, thread handle,\u000aprocess ID, and thread ID.
p28
sa(dp29
g1
VDUPLICATE_CLOSE_SOURCE
p30
sg3
I01
sg9
L5L
sa(dp31
g1
VDUPLICATE_SAME_ACCESS
p32
sg3
I01
sg9
L5L
sa(dp33
g1
VDuplicateHandle
p34
sg3
I01
sg9
L2L
sg4
VReturn a duplicate handle object.\u000a\u000aThe duplicate handle refers to the same object as the original\u000ahandle. Therefore, any changes to the object are reflected\u000athrough both handles.
p35
sa(dp36
g1
VERROR_ALREADY_EXISTS
p37
sg3
I01
sg9
L5L
sa(dp38
g1
VERROR_BROKEN_PIPE
p39
sg3
I01
sg9
L5L
sa(dp40
g1
VERROR_IO_PENDING
p41
sg3
I01
sg9
L5L
sa(dp42
g1
VERROR_MORE_DATA
p43
sg3
I01
sg9
L5L
sa(dp44
g1
VERROR_NETNAME_DELETED
p45
sg3
I01
sg9
L5L
sa(dp46
g1
VERROR_NO_DATA
p47
sg3
I01
sg9
L5L
sa(dp48
g1
VERROR_NO_SYSTEM_RESOURCES
p49
sg3
I01
sg9
L5L
sa(dp50
g1
VERROR_OPERATION_ABORTED
p51
sg3
I01
sg9
L5L
sa(dp52
g1
VERROR_PIPE_BUSY
p53
sg3
I01
sg9
L5L
sa(dp54
g1
VERROR_PIPE_CONNECTED
p55
sg3
I01
sg9
L5L
sa(dp56
g1
VERROR_SEM_TIMEOUT
p57
sg3
I01
sg9
L5L
sa(dp58
g1
VExitProcess
p59
sg3
I01
sg9
L2L
sg4
Nsa(dp60
g1
VFILE_FLAG_FIRST_PIPE_INSTANCE
p61
sg3
I01
sg9
L5L
sa(dp62
g1
VFILE_FLAG_OVERLAPPED
p63
sg3
I01
sg9
L5L
sa(dp64
g1
VFILE_GENERIC_READ
p65
sg3
I01
sg9
L5L
sa(dp66
g1
VFILE_GENERIC_WRITE
p67
sg3
I01
sg9
L5L
sa(dp68
g1
VGENERIC_READ
p69
sg3
I01
sg9
L5L
sa(dp70
g1
VGENERIC_WRITE
p71
sg3
I01
sg9
L5L
sa(dp72
g1
VGetCurrentProcess
p73
sg3
I01
sg9
L2L
sg4
VReturn a handle object for the current process.
p74
sa(dp75
g1
VGetExitCodeProcess
p76
sg3
I01
sg9
L2L
sg4
VReturn the termination status of the specified process.
p77
sa(dp78
g1
VGetLastError
p79
sg3
I01
sg9
L2L
sg4
Nsa(dp80
g1
VGetModuleFileName
p81
sg3
I01
sg9
L2L
sg4
VReturn the fully-qualified path for the file that contains module.\u000a\u000aThe module must have been loaded by the current process.\u000a\u000aThe module parameter should be a handle to the loaded module\u000awhose path is being requested. If this parameter is 0,\u000aGetModuleFileName retrieves the path of the executable file\u000aof the current process.
p82
sa(dp83
g1
VGetStdHandle
p84
sg3
I01
sg9
L2L
sg4
VReturn a handle to the specified standard device.\u000a\u000a  std_handle\u000a    One of STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, or STD_ERROR_HANDLE.\u000a\u000aThe integer associated with the handle object is returned.
p85
sa(dp86
g1
VGetVersion
p87
sg3
I01
sg9
L2L
sg4
VReturn the version number of the current operating system.
p88
sa(dp89
g1
VINFINITE
p90
sg3
I01
sg9
L5L
sa(dp91
g1
VNMPWAIT_WAIT_FOREVER
p92
sg3
I01
sg9
L5L
sa(dp93
g1
VNULL
p94
sg3
I01
sg9
L5L
sa(dp95
g1
VOPEN_EXISTING
p96
sg3
I01
sg9
L5L
sa(dp97
g1
VOpenProcess
p98
sg3
I01
sg9
L2L
sg4
Nsa(dp99
g1
VOverlapped
p100
sg3
I01
sg9
L3L
sg5
(lp101
(dp102
g1
VGetOverlappedResult
p103
sg3
I01
sg9
L2L
sg4
Nsa(dp104
g1
V__delattr__
p105
sg3
I01
sg9
L5L
sa(dp106
g1
V__dir__
p107
sg3
I01
sg9
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p108
sa(dp109
g1
V__doc__
p110
sg3
I01
sg9
L5L
sa(dp111
g1
V__eq__
p112
sg3
I01
sg9
L5L
sa(dp113
g1
V__format__
p114
sg3
I01
sg9
L2L
sg4
Vdefault object formatter
p115
sa(dp116
g1
V__ge__
p117
sg3
I01
sg9
L5L
sa(dp118
g1
V__getattribute__
p119
sg3
I01
sg9
L5L
sa(dp120
g1
V__gt__
p121
sg3
I01
sg9
L5L
sa(dp122
g1
V__hash__
p123
sg3
I01
sg9
L5L
sa(dp124
g1
V__init__
p125
sg3
I01
sg9
L5L
sa(dp126
g1
V__init_subclass__
p127
sg3
I01
sg9
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p128
sa(dp129
g1
V__le__
p130
sg3
I01
sg9
L5L
sa(dp131
g1
V__lt__
p132
sg3
I01
sg9
L5L
sa(dp133
g1
V__ne__
p134
sg3
I01
sg9
L5L
sa(dp135
g1
V__new__
p136
sg3
I01
sg9
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p137
sa(dp138
g1
V__reduce__
p139
sg3
I01
sg9
L2L
sg4
Vhelper for pickle
p140
sa(dp141
g1
V__reduce_ex__
p142
sg3
I01
sg9
L2L
sg4
Vhelper for pickle
p143
sa(dp144
g1
V__repr__
p145
sg3
I01
sg9
L5L
sa(dp146
g1
V__setattr__
p147
sg3
I01
sg9
L5L
sa(dp148
g1
V__sizeof__
p149
sg3
I01
sg9
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p150
sa(dp151
g1
V__str__
p152
sg3
I01
sg9
L5L
sa(dp153
g1
V__subclasshook__
p154
sg3
I01
sg9
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p155
sa(dp156
g1
Vcancel
p157
sg3
I01
sg9
L2L
sg4
Nsa(dp158
g1
Vevent
p159
sg3
I01
sg9
L5L
sa(dp160
g1
Vgetbuffer
p161
sg3
I01
sg9
L2L
sg4
Nsasg4
VOVERLAPPED structure wrapper
p162
sa(dp163
g1
VPIPE_ACCESS_DUPLEX
p164
sg3
I01
sg9
L5L
sa(dp165
g1
VPIPE_ACCESS_INBOUND
p166
sg3
I01
sg9
L5L
sa(dp167
g1
VPIPE_READMODE_MESSAGE
p168
sg3
I01
sg9
L5L
sa(dp169
g1
VPIPE_TYPE_MESSAGE
p170
sg3
I01
sg9
L5L
sa(dp171
g1
VPIPE_UNLIMITED_INSTANCES
p172
sg3
I01
sg9
L5L
sa(dp173
g1
VPIPE_WAIT
p174
sg3
I01
sg9
L5L
sa(dp175
g1
VPROCESS_ALL_ACCESS
p176
sg3
I01
sg9
L5L
sa(dp177
g1
VPROCESS_DUP_HANDLE
p178
sg3
I01
sg9
L5L
sa(dp179
g1
VPeekNamedPipe
p180
sg3
I01
sg9
L2L
sg4
Nsa(dp181
g1
VReadFile
p182
sg3
I01
sg9
L2L
sg4
Nsa(dp183
g1
VSTARTF_USESHOWWINDOW
p184
sg3
I01
sg9
L5L
sa(dp185
g1
VSTARTF_USESTDHANDLES
p186
sg3
I01
sg9
L5L
sa(dp187
g1
VSTD_ERROR_HANDLE
p188
sg3
I01
sg9
L5L
sa(dp189
g1
VSTD_INPUT_HANDLE
p190
sg3
I01
sg9
L5L
sa(dp191
g1
VSTD_OUTPUT_HANDLE
p192
sg3
I01
sg9
L5L
sa(dp193
g1
VSTILL_ACTIVE
p194
sg3
I01
sg9
L5L
sa(dp195
g1
VSW_HIDE
p196
sg3
I01
sg9
L5L
sa(dp197
g1
VSetNamedPipeHandleState
p198
sg3
I01
sg9
L2L
sg4
Nsa(dp199
g1
VTerminateProcess
p200
sg3
I01
sg9
L2L
sg4
VTerminate the specified process and all of its threads.
p201
sa(dp202
g1
VWAIT_ABANDONED_0
p203
sg3
I01
sg9
L5L
sa(dp204
g1
VWAIT_OBJECT_0
p205
sg3
I01
sg9
L5L
sa(dp206
g1
VWAIT_TIMEOUT
p207
sg3
I01
sg9
L5L
sa(dp208
g1
VWaitForMultipleObjects
p209
sg3
I01
sg9
L2L
sg4
Nsa(dp210
g1
VWaitForSingleObject
p211
sg3
I01
sg9
L2L
sg4
VWait for a single object.\u000a\u000aWait until the specified object is in the signaled state or\u000athe time-out interval elapses. The timeout value is specified\u000ain milliseconds.
p212
sa(dp213
g1
VWaitNamedPipe
p214
sg3
I01
sg9
L2L
sg4
Nsa(dp215
g1
VWriteFile
p216
sg3
I01
sg9
L2L
sg4
Nsa(dp217
g1
g110
sg3
I01
sg9
L5L
sa(dp218
g1
V__loader__
p219
sg3
I01
sg9
L3L
sg5
(lp220
(dp221
g1
g105
sg3
I01
sg9
L5L
sa(dp222
g1
V__dict__
p223
sg3
I01
sg9
L5L
sa(dp224
g1
g107
sg3
I01
sg9
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p225
sa(dp226
g1
g110
sg3
I01
sg9
L5L
sa(dp227
g1
g112
sg3
I01
sg9
L5L
sa(dp228
g1
g114
sg3
I01
sg9
L2L
sg4
Vdefault object formatter
p229
sa(dp230
g1
g117
sg3
I01
sg9
L5L
sa(dp231
g1
g119
sg3
I01
sg9
L5L
sa(dp232
g1
g121
sg3
I01
sg9
L5L
sa(dp233
g1
g123
sg3
I01
sg9
L5L
sa(dp234
g1
g125
sg3
I01
sg9
L5L
sa(dp235
g1
g127
sg3
I01
sg9
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p236
sa(dp237
g1
g130
sg3
I01
sg9
L5L
sa(dp238
g1
g132
sg3
I01
sg9
L5L
sa(dp239
g1
V__module__
p240
sg3
I01
sg9
L5L
sa(dp241
g1
g134
sg3
I01
sg9
L5L
sa(dp242
g1
g136
sg3
I01
sg9
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p243
sa(dp244
g1
g139
sg3
I01
sg9
L2L
sg4
Vhelper for pickle
p245
sa(dp246
g1
g142
sg3
I01
sg9
L2L
sg4
Vhelper for pickle
p247
sa(dp248
g1
g145
sg3
I01
sg9
L5L
sa(dp249
g1
g147
sg3
I01
sg9
L5L
sa(dp250
g1
g149
sg3
I01
sg9
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p251
sa(dp252
g1
g152
sg3
I01
sg9
L5L
sa(dp253
g1
g154
sg3
I01
sg9
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p254
sa(dp255
g1
V__weakref__
p256
sg3
I01
sg9
L5L
sa(dp257
g1
Vcreate_module
p258
sg3
I01
sg9
L5L
sa(dp259
g1
Vexec_module
p260
sg3
I01
sg9
L5L
sa(dp261
g1
Vfind_module
p262
sg3
I01
sg9
L5L
sa(dp263
g1
Vfind_spec
p264
sg3
I01
sg9
L5L
sa(dp265
g1
Vget_code
p266
sg3
I01
sg9
L5L
sa(dp267
g1
Vget_source
p268
sg3
I01
sg9
L5L
sa(dp269
g1
Vis_package
p270
sg3
I01
sg9
L5L
sa(dp271
g1
Vload_module
p272
sg3
I01
sg9
L5L
sa(dp273
g1
Vmodule_repr
p274
sg3
I01
sg9
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p275
sa(dp276
g1
V__name__
p277
sg3
I01
sg9
L5L
sa(dp278
g1
V__package__
p279
sg3
I01
sg9
L5L
sa(dp280
g1
V__spec__
p281
sg3
I01
sg9
L5L
sasg9
L1L
s.