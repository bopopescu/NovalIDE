(dp0
Vname
p1
Vmarshal
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module contains functions that can read and write Python values in\u000aa binary format. The format is specific to Python, but independent of\u000amachine architecture issues.\u000a\u000aNot all Python object types are supported; in general, only objects\u000awhose value is independent from a particular invocation of Python can be\u000awritten and read by this module. The following types are supported:\u000aNone, integers, floating point numbers, strings, bytes, bytearrays,\u000atuples, lists, sets, dictionaries, and code objects, where it\u000ashould be understood that tuples, lists and dictionaries are only\u000asupported as long as the values contained therein are themselves\u000asupported; and recursive lists and dictionaries should not be written\u000a(they will cause infinite loops).\u000a\u000aVariables:\u000a\u000aversion -- indicates the format that the module uses. Version 0 is the\u000a    historical format, version 1 shares interned strings and version 2\u000a    uses a binary format for floating point numbers.\u000a    Version 3 shares common object references (New in version 3.4).\u000a\u000aFunctions:\u000a\u000adump() -- write value to a file\u000aload() -- read value from a file\u000adumps() -- marshal value as a bytes object\u000aloads() -- read value from a bytes-like object
p5
sVchilds
p6
(lp7
(dp8
g1
V__doc__
p9
sg3
I01
sVtype
p10
L5L
sa(dp11
g1
V__loader__
p12
sg3
I01
sg10
L3L
sg6
(lp13
(dp14
g1
V__delattr__
p15
sg3
I01
sg10
L5L
sa(dp16
g1
V__dict__
p17
sg3
I01
sg10
L5L
sa(dp18
g1
V__dir__
p19
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p20
sa(dp21
g1
g9
sg3
I01
sg10
L5L
sa(dp22
g1
V__eq__
p23
sg3
I01
sg10
L5L
sa(dp24
g1
V__format__
p25
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p26
sa(dp27
g1
V__ge__
p28
sg3
I01
sg10
L5L
sa(dp29
g1
V__getattribute__
p30
sg3
I01
sg10
L5L
sa(dp31
g1
V__gt__
p32
sg3
I01
sg10
L5L
sa(dp33
g1
V__hash__
p34
sg3
I01
sg10
L5L
sa(dp35
g1
V__init__
p36
sg3
I01
sg10
L5L
sa(dp37
g1
V__init_subclass__
p38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p39
sa(dp40
g1
V__le__
p41
sg3
I01
sg10
L5L
sa(dp42
g1
V__lt__
p43
sg3
I01
sg10
L5L
sa(dp44
g1
V__module__
p45
sg3
I01
sg10
L5L
sa(dp46
g1
V__ne__
p47
sg3
I01
sg10
L5L
sa(dp48
g1
V__new__
p49
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p50
sa(dp51
g1
V__reduce__
p52
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p53
sa(dp54
g1
V__reduce_ex__
p55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p56
sa(dp57
g1
V__repr__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__setattr__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__sizeof__
p62
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p63
sa(dp64
g1
V__str__
p65
sg3
I01
sg10
L5L
sa(dp66
g1
V__subclasshook__
p67
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p68
sa(dp69
g1
V__weakref__
p70
sg3
I01
sg10
L5L
sa(dp71
g1
Vcreate_module
p72
sg3
I01
sg10
L5L
sa(dp73
g1
Vexec_module
p74
sg3
I01
sg10
L5L
sa(dp75
g1
Vfind_module
p76
sg3
I01
sg10
L5L
sa(dp77
g1
Vfind_spec
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Vget_code
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vget_source
p82
sg3
I01
sg10
L5L
sa(dp83
g1
Vis_package
p84
sg3
I01
sg10
L5L
sa(dp85
g1
Vload_module
p86
sg3
I01
sg10
L5L
sa(dp87
g1
Vmodule_repr
p88
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p89
sa(dp90
g1
V__name__
p91
sg3
I01
sg10
L5L
sa(dp92
g1
V__package__
p93
sg3
I01
sg10
L5L
sa(dp94
g1
V__spec__
p95
sg3
I01
sg10
L5L
sa(dp96
g1
Vdump
p97
sg3
I01
sg10
L2L
sg4
Vdump(value, file[, version])\u000a\u000aWrite the value on the open file. The value must be a supported type.\u000aThe file must be a writeable binary file.\u000a\u000aIf the value has (or contains an object that has) an unsupported type, a\u000aValueError exception is raised - but garbage data will also be written\u000ato the file. The object will not be properly read back by load()\u000a\u000aThe version argument indicates the data format that dump should use.
p98
sa(dp99
g1
Vdumps
p100
sg3
I01
sg10
L2L
sg4
Vdumps(value[, version])\u000a\u000aReturn the bytes object that would be written to a file by dump(value, file).\u000aThe value must be a supported type. Raise a ValueError exception if\u000avalue has (or contains an object that has) an unsupported type.\u000a\u000aThe version argument indicates the data format that dumps should use.
p101
sa(dp102
g1
Vload
p103
sg3
I01
sg10
L2L
sg4
Vload(file)\u000a\u000aRead one value from the open file and return it. If no valid value is\u000aread (e.g. because the data has a different Python version's\u000aincompatible marshal format), raise EOFError, ValueError or TypeError.\u000aThe file must be a readable binary file.\u000a\u000aNote: If an object containing an unsupported type was marshalled with\u000adump(), load() will substitute None for the unmarshallable type.
p104
sa(dp105
g1
Vloads
p106
sg3
I01
sg10
L2L
sg4
Vloads(bytes)\u000a\u000aConvert the bytes-like object to a value. If no valid value is found,\u000araise EOFError, ValueError or TypeError. Extra bytes in the input are\u000aignored.
p107
sa(dp108
g1
Vversion
p109
sg3
I01
sg10
L5L
sasg10
L1L
s.