(dp0
Vchilds
p1
(lp2
(dp3
g1
(lp4
(dp5
Vis_builtin
p6
I01
sVname
p7
V__delattr__
p8
sVtype
p9
L5L
sa(dp10
g6
I01
sg7
V__dir__
p11
sg9
L2L
sVdoc
p12
V__dir__() -> list\u000adefault dir() implementation
p13
sa(dp14
g6
I01
sg7
V__doc__
p15
sg9
L5L
sa(dp16
g6
I01
sg7
V__enter__
p17
sg9
L2L
sg12
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p18
sa(dp19
g6
I01
sg7
V__eq__
p20
sg9
L5L
sa(dp21
g6
I01
sg7
V__exit__
p22
sg9
L2L
sg12
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p23
sa(dp24
g6
I01
sg7
V__format__
p25
sg9
L2L
sg12
Vdefault object formatter
p26
sa(dp27
g6
I01
sg7
V__ge__
p28
sg9
L5L
sa(dp29
g6
I01
sg7
V__getattribute__
p30
sg9
L5L
sa(dp31
g6
I01
sg7
V__gt__
p32
sg9
L5L
sa(dp33
g6
I01
sg7
V__hash__
p34
sg9
L5L
sa(dp35
g6
I01
sg7
V__init__
p36
sg9
L5L
sa(dp37
g6
I01
sg7
V__le__
p38
sg9
L5L
sa(dp39
g6
I01
sg7
V__lt__
p40
sg9
L5L
sa(dp41
g6
I01
sg7
V__ne__
p42
sg9
L5L
sa(dp43
g6
I01
sg7
V__new__
p44
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p45
sa(dp46
g6
I01
sg7
V__reduce__
p47
sg9
L2L
sg12
Vhelper for pickle
p48
sa(dp49
g6
I01
sg7
V__reduce_ex__
p50
sg9
L2L
sg12
Vhelper for pickle
p51
sa(dp52
g6
I01
sg7
V__repr__
p53
sg9
L5L
sa(dp54
g6
I01
sg7
V__setattr__
p55
sg9
L5L
sa(dp56
g6
I01
sg7
V__sizeof__
p57
sg9
L2L
sg12
V__sizeof__() -> int\u000asize of object in memory, in bytes
p58
sa(dp59
g6
I01
sg7
V__str__
p60
sg9
L5L
sa(dp61
g6
I01
sg7
V__subclasshook__
p62
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p63
sa(dp64
g6
I01
sg7
Vacquire
p65
sg9
L2L
sg12
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p66
sa(dp67
g6
I01
sg7
Vacquire_lock
p68
sg9
L2L
sg12
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p69
sa(dp70
g6
I01
sg7
Vlocked
p71
sg9
L2L
sg12
Vlocked() -> bool\u000a(locked_lock() is an obsolete synonym)\u000a\u000aReturn whether the lock is in the locked state.
p72
sa(dp73
g6
I01
sg7
Vlocked_lock
p74
sg9
L2L
sg12
Vlocked() -> bool\u000a(locked_lock() is an obsolete synonym)\u000a\u000aReturn whether the lock is in the locked state.
p75
sa(dp76
g6
I01
sg7
Vrelease
p77
sg9
L2L
sg12
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p78
sa(dp79
g6
I01
sg7
Vrelease_lock
p80
sg9
L2L
sg12
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p81
sasg6
I01
sg7
VLockType
p82
sg9
L3L
sg12
VA lock object is a synchronization primitive.  To create a lock,\u000acall threading.Lock().  Methods are:\u000a\u000aacquire() -- lock the lock, possibly blocking until it can be obtained\u000arelease() -- unlock of the lock\u000alocked() -- test whether the lock is currently locked\u000a\u000aA lock is not owned by the thread that locked it; another thread may\u000aunlock it.  A thread attempting to lock a lock that it has already locked\u000awill block until another thread unlocks it.  Deadlocks may ensue.
p83
sa(dp84
g1
(lp85
(dp86
g6
I01
sg7
g8
sg9
L5L
sa(dp87
g6
I01
sg7
g11
sg9
L2L
sg12
V__dir__() -> list\u000adefault dir() implementation
p88
sa(dp89
g6
I01
sg7
g15
sg9
L5L
sa(dp90
g6
I01
sg7
g17
sg9
L2L
sg12
Vacquire(blocking=True) -> bool\u000a\u000aLock the lock.  `blocking` indicates whether we should wait\u000afor the lock to be available or not.  If `blocking` is False\u000aand another thread holds the lock, the method will return False\u000aimmediately.  If `blocking` is True and another thread holds\u000athe lock, the method will wait for the lock to be released,\u000atake it and then return True.\u000a(note: the blocking operation is interruptible.)\u000a\u000aIn all other cases, the method will return True immediately.\u000aPrecisely, if the current thread already holds the lock, its\u000ainternal counter is simply incremented. If nobody holds the lock,\u000athe lock is taken and its internal counter initialized to 1.
p91
sa(dp92
g6
I01
sg7
g20
sg9
L5L
sa(dp93
g6
I01
sg7
g22
sg9
L2L
sg12
Vrelease()\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000aand must be locked by the same thread that unlocks it; otherwise a\u000a`RuntimeError` is raised.\u000a\u000aDo note that if the lock was acquire()d several times in a row by the\u000acurrent thread, release() needs to be called as many times for the lock\u000ato be available for other threads.
p94
sa(dp95
g6
I01
sg7
g25
sg9
L2L
sg12
Vdefault object formatter
p96
sa(dp97
g6
I01
sg7
g28
sg9
L5L
sa(dp98
g6
I01
sg7
g30
sg9
L5L
sa(dp99
g6
I01
sg7
g32
sg9
L5L
sa(dp100
g6
I01
sg7
g34
sg9
L5L
sa(dp101
g6
I01
sg7
g36
sg9
L5L
sa(dp102
g6
I01
sg7
g38
sg9
L5L
sa(dp103
g6
I01
sg7
g40
sg9
L5L
sa(dp104
g6
I01
sg7
g42
sg9
L5L
sa(dp105
g6
I01
sg7
g44
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p106
sa(dp107
g6
I01
sg7
g47
sg9
L2L
sg12
Vhelper for pickle
p108
sa(dp109
g6
I01
sg7
g50
sg9
L2L
sg12
Vhelper for pickle
p110
sa(dp111
g6
I01
sg7
g53
sg9
L5L
sa(dp112
g6
I01
sg7
g55
sg9
L5L
sa(dp113
g6
I01
sg7
g57
sg9
L2L
sg12
V__sizeof__() -> int\u000asize of object in memory, in bytes
p114
sa(dp115
g6
I01
sg7
g60
sg9
L5L
sa(dp116
g6
I01
sg7
g62
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p117
sa(dp118
g6
I01
sg7
V_acquire_restore
p119
sg9
L2L
sg12
V_acquire_restore(state) -> None\u000a\u000aFor internal use by `threading.Condition`.
p120
sa(dp121
g6
I01
sg7
V_is_owned
p122
sg9
L2L
sg12
V_is_owned() -> bool\u000a\u000aFor internal use by `threading.Condition`.
p123
sa(dp124
g6
I01
sg7
V_release_save
p125
sg9
L2L
sg12
V_release_save() -> tuple\u000a\u000aFor internal use by `threading.Condition`.
p126
sa(dp127
g6
I01
sg7
g65
sg9
L2L
sg12
Vacquire(blocking=True) -> bool\u000a\u000aLock the lock.  `blocking` indicates whether we should wait\u000afor the lock to be available or not.  If `blocking` is False\u000aand another thread holds the lock, the method will return False\u000aimmediately.  If `blocking` is True and another thread holds\u000athe lock, the method will wait for the lock to be released,\u000atake it and then return True.\u000a(note: the blocking operation is interruptible.)\u000a\u000aIn all other cases, the method will return True immediately.\u000aPrecisely, if the current thread already holds the lock, its\u000ainternal counter is simply incremented. If nobody holds the lock,\u000athe lock is taken and its internal counter initialized to 1.
p128
sa(dp129
g6
I01
sg7
g77
sg9
L2L
sg12
Vrelease()\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000aand must be locked by the same thread that unlocks it; otherwise a\u000a`RuntimeError` is raised.\u000a\u000aDo note that if the lock was acquire()d several times in a row by the\u000acurrent thread, release() needs to be called as many times for the lock\u000ato be available for other threads.
p130
sasg6
I01
sg7
VRLock
p131
sg9
L3L
sg12
Nsa(dp132
g6
I01
sg7
VTIMEOUT_MAX
p133
sg9
L5L
sa(dp134
g6
I01
sg7
g15
sg9
L5L
sa(dp135
g1
(lp136
(dp137
g6
I01
sg7
g8
sg9
L5L
sa(dp138
g6
I01
sg7
V__dict__
p139
sg9
L5L
sa(dp140
g6
I01
sg7
g11
sg9
L2L
sg12
V__dir__() -> list\u000adefault dir() implementation
p141
sa(dp142
g6
I01
sg7
g15
sg9
L5L
sa(dp143
g6
I01
sg7
g20
sg9
L5L
sa(dp144
g6
I01
sg7
g25
sg9
L2L
sg12
Vdefault object formatter
p145
sa(dp146
g6
I01
sg7
g28
sg9
L5L
sa(dp147
g6
I01
sg7
g30
sg9
L5L
sa(dp148
g6
I01
sg7
g32
sg9
L5L
sa(dp149
g6
I01
sg7
g34
sg9
L5L
sa(dp150
g6
I01
sg7
g36
sg9
L5L
sa(dp151
g6
I01
sg7
g38
sg9
L5L
sa(dp152
g6
I01
sg7
g40
sg9
L5L
sa(dp153
g6
I01
sg7
V__module__
p154
sg9
L5L
sa(dp155
g6
I01
sg7
g42
sg9
L5L
sa(dp156
g6
I01
sg7
g44
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p157
sa(dp158
g6
I01
sg7
g47
sg9
L2L
sg12
Vhelper for pickle
p159
sa(dp160
g6
I01
sg7
g50
sg9
L2L
sg12
Vhelper for pickle
p161
sa(dp162
g6
I01
sg7
g53
sg9
L5L
sa(dp163
g6
I01
sg7
g55
sg9
L5L
sa(dp164
g6
I01
sg7
g57
sg9
L2L
sg12
V__sizeof__() -> int\u000asize of object in memory, in bytes
p165
sa(dp166
g6
I01
sg7
g60
sg9
L5L
sa(dp167
g6
I01
sg7
g62
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p168
sa(dp169
g6
I01
sg7
V__weakref__
p170
sg9
L5L
sa(dp171
g6
I01
sg7
Vcreate_module
p172
sg9
L5L
sa(dp173
g6
I01
sg7
Vexec_module
p174
sg9
L5L
sa(dp175
g6
I01
sg7
Vfind_module
p176
sg9
L5L
sa(dp177
g6
I01
sg7
Vfind_spec
p178
sg9
L5L
sa(dp179
g6
I01
sg7
Vget_code
p180
sg9
L5L
sa(dp181
g6
I01
sg7
Vget_source
p182
sg9
L5L
sa(dp183
g6
I01
sg7
Vis_package
p184
sg9
L5L
sa(dp185
g6
I01
sg7
Vload_module
p186
sg9
L5L
sa(dp187
g6
I01
sg7
Vmodule_repr
p188
sg9
L5L
sasg6
I01
sg7
V__loader__
p189
sg9
L3L
sg12
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p190
sa(dp191
g6
I01
sg7
V__name__
p192
sg9
L5L
sa(dp193
g6
I01
sg7
V__package__
p194
sg9
L5L
sa(dp195
g6
I01
sg7
V__spec__
p196
sg9
L5L
sa(dp197
g6
I01
sg7
V_count
p198
sg9
L2L
sg12
V_count() -> integer\u000a\u000aReturn the number of currently running Python threads, excluding \u000athe main thread. The returned number comprises all threads created\u000athrough `start_new_thread()` as well as `threading.Thread`, and not\u000ayet finished.\u000a\u000aThis function is meant for internal and specialized purposes only.\u000aIn most applications `threading.enumerate()` should be used instead.
p199
sa(dp200
g1
(lp201
(dp202
g6
I01
sg7
g8
sg9
L5L
sa(dp203
g6
I01
sg7
g11
sg9
L2L
sg12
V__dir__() -> list\u000adefault dir() implementation
p204
sa(dp205
g6
I01
sg7
g15
sg9
L5L
sa(dp206
g6
I01
sg7
g20
sg9
L5L
sa(dp207
g6
I01
sg7
g25
sg9
L2L
sg12
Vdefault object formatter
p208
sa(dp209
g6
I01
sg7
g28
sg9
L5L
sa(dp210
g6
I01
sg7
g30
sg9
L5L
sa(dp211
g6
I01
sg7
g32
sg9
L5L
sa(dp212
g6
I01
sg7
g34
sg9
L5L
sa(dp213
g6
I01
sg7
g36
sg9
L5L
sa(dp214
g6
I01
sg7
g38
sg9
L5L
sa(dp215
g6
I01
sg7
g40
sg9
L5L
sa(dp216
g6
I01
sg7
g42
sg9
L5L
sa(dp217
g6
I01
sg7
g44
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p218
sa(dp219
g6
I01
sg7
g47
sg9
L2L
sg12
Vhelper for pickle
p220
sa(dp221
g6
I01
sg7
g50
sg9
L2L
sg12
Vhelper for pickle
p222
sa(dp223
g6
I01
sg7
g53
sg9
L5L
sa(dp224
g6
I01
sg7
g55
sg9
L5L
sa(dp225
g6
I01
sg7
g57
sg9
L2L
sg12
V__sizeof__() -> int\u000asize of object in memory, in bytes
p226
sa(dp227
g6
I01
sg7
g60
sg9
L5L
sa(dp228
g6
I01
sg7
g62
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p229
sasg6
I01
sg7
V_local
p230
sg9
L3L
sg12
VThread-local data
p231
sa(dp232
g6
I01
sg7
V_set_sentinel
p233
sg9
L2L
sg12
V_set_sentinel() -> lock\u000a\u000aSet a sentinel lock that will be released when the current thread\u000astate is finalized (after it is untied from the interpreter).\u000a\u000aThis is a private API for the threading module.
p234
sa(dp235
g6
I01
sg7
Vallocate
p236
sg9
L2L
sg12
Vallocate_lock() -> lock object\u000a(allocate() is an obsolete synonym)\u000a\u000aCreate a new lock object. See help(type(threading.Lock())) for\u000ainformation about locks.
p237
sa(dp238
g6
I01
sg7
Vallocate_lock
p239
sg9
L2L
sg12
Vallocate_lock() -> lock object\u000a(allocate() is an obsolete synonym)\u000a\u000aCreate a new lock object. See help(type(threading.Lock())) for\u000ainformation about locks.
p240
sa(dp241
g1
(lp242
(dp243
g6
I01
sg7
V__cause__
p244
sg9
L5L
sa(dp245
g6
I01
sg7
V__context__
p246
sg9
L5L
sa(dp247
g6
I01
sg7
g8
sg9
L5L
sa(dp248
g6
I01
sg7
g139
sg9
L5L
sa(dp249
g6
I01
sg7
g11
sg9
L2L
sg12
V__dir__() -> list\u000adefault dir() implementation
p250
sa(dp251
g6
I01
sg7
g15
sg9
L5L
sa(dp252
g6
I01
sg7
g20
sg9
L5L
sa(dp253
g6
I01
sg7
g25
sg9
L2L
sg12
Vdefault object formatter
p254
sa(dp255
g6
I01
sg7
g28
sg9
L5L
sa(dp256
g6
I01
sg7
g30
sg9
L5L
sa(dp257
g6
I01
sg7
g32
sg9
L5L
sa(dp258
g6
I01
sg7
g34
sg9
L5L
sa(dp259
g6
I01
sg7
g36
sg9
L5L
sa(dp260
g6
I01
sg7
g38
sg9
L5L
sa(dp261
g6
I01
sg7
g40
sg9
L5L
sa(dp262
g6
I01
sg7
g42
sg9
L5L
sa(dp263
g6
I01
sg7
g44
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p264
sa(dp265
g6
I01
sg7
g47
sg9
L2L
sg12
Nsa(dp266
g6
I01
sg7
g50
sg9
L2L
sg12
Vhelper for pickle
p267
sa(dp268
g6
I01
sg7
g53
sg9
L5L
sa(dp269
g6
I01
sg7
g55
sg9
L5L
sa(dp270
g6
I01
sg7
V__setstate__
p271
sg9
L2L
sg12
Nsa(dp272
g6
I01
sg7
g57
sg9
L2L
sg12
V__sizeof__() -> int\u000asize of object in memory, in bytes
p273
sa(dp274
g6
I01
sg7
g60
sg9
L5L
sa(dp275
g6
I01
sg7
g62
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p276
sa(dp277
g6
I01
sg7
V__suppress_context__
p278
sg9
L5L
sa(dp279
g6
I01
sg7
V__traceback__
p280
sg9
L5L
sa(dp281
g6
I01
sg7
Vargs
p282
sg9
L5L
sa(dp283
g6
I01
sg7
Vwith_traceback
p284
sg9
L2L
sg12
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p285
sasg6
I01
sg7
Verror
p286
sg9
L3L
sg12
VUnspecified run-time error.
p287
sa(dp288
g6
I01
sg7
Vexit
p289
sg9
L2L
sg12
Vexit()\u000a(exit_thread() is an obsolete synonym)\u000a\u000aThis is synonymous to ``raise SystemExit''.  It will cause the current\u000athread to exit silently unless the exception is caught.
p290
sa(dp291
g6
I01
sg7
Vexit_thread
p292
sg9
L2L
sg12
Vexit()\u000a(exit_thread() is an obsolete synonym)\u000a\u000aThis is synonymous to ``raise SystemExit''.  It will cause the current\u000athread to exit silently unless the exception is caught.
p293
sa(dp294
g6
I01
sg7
Vget_ident
p295
sg9
L2L
sg12
Vget_ident() -> integer\u000a\u000aReturn a non-zero integer that uniquely identifies the current thread\u000aamongst other threads that exist simultaneously.\u000aThis may be used to identify per-thread resources.\u000aEven though on some platforms threads identities may appear to be\u000aallocated consecutive numbers starting at 1, this behavior should not\u000abe relied upon, and the number should be seen purely as a magic cookie.\u000aA thread's identity may be reused for another thread after it exits.
p296
sa(dp297
g6
I01
sg7
Vinterrupt_main
p298
sg9
L2L
sg12
Vinterrupt_main()\u000a\u000aRaise a KeyboardInterrupt in the main thread.\u000aA subthread can use this function to interrupt the main thread.
p299
sa(dp300
g6
I01
sg7
Vstack_size
p301
sg9
L2L
sg12
Vstack_size([size]) -> size\u000a\u000aReturn the thread stack size used when creating new threads.  The\u000aoptional size argument specifies the stack size (in bytes) to be used\u000afor subsequently created threads, and must be 0 (use platform or\u000aconfigured default) or a positive integer value of at least 32,768 (32k).\u000aIf changing the thread stack size is unsupported, a ThreadError\u000aexception is raised.  If the specified size is invalid, a ValueError\u000aexception is raised, and the stack size is unmodified.  32k bytes\u000a currently the minimum supported stack size value to guarantee\u000asufficient stack space for the interpreter itself.\u000a\u000aNote that some platforms may have particular restrictions on values for\u000athe stack size, such as requiring a minimum stack size larger than 32kB or\u000arequiring allocation in multiples of the system memory page size\u000a- platform documentation should be referred to for more information\u000a(4kB pages are common; using multiples of 4096 for the stack size is\u000athe suggested approach in the absence of more specific information).
p302
sa(dp303
g6
I01
sg7
Vstart_new
p304
sg9
L2L
sg12
Vstart_new_thread(function, args[, kwargs])\u000a(start_new() is an obsolete synonym)\u000a\u000aStart a new thread and return its identifier.  The thread will call the\u000afunction with positional arguments from the tuple args and keyword arguments\u000ataken from the optional dictionary kwargs.  The thread exits when the\u000afunction returns; the return value is ignored.  The thread will also exit\u000awhen the function raises an unhandled exception; a stack trace will be\u000aprinted unless the exception is SystemExit.\u000a
p305
sa(dp306
g6
I01
sg7
Vstart_new_thread
p307
sg9
L2L
sg12
Vstart_new_thread(function, args[, kwargs])\u000a(start_new() is an obsolete synonym)\u000a\u000aStart a new thread and return its identifier.  The thread will call the\u000afunction with positional arguments from the tuple args and keyword arguments\u000ataken from the optional dictionary kwargs.  The thread exits when the\u000afunction returns; the return value is ignored.  The thread will also exit\u000awhen the function raises an unhandled exception; a stack trace will be\u000aprinted unless the exception is SystemExit.\u000a
p308
sasg6
I01
sg7
V_thread
p309
sg12
VThis module provides primitive operations to write multi-threaded programs.\u000aThe 'threading' module provides a more convenient interface.
p310
s.