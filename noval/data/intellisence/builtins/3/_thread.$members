(dp0
Vname
p1
V_thread
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module provides primitive operations to write multi-threaded programs.\u000aThe 'threading' module provides a more convenient interface.
p5
sVchilds
p6
(lp7
(dp8
g1
VLockType
p9
sg3
I01
sVtype
p10
L3L
sg6
(lp11
(dp12
g1
V__delattr__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__dir__
p15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p16
sa(dp17
g1
V__doc__
p18
sg3
I01
sg10
L5L
sa(dp19
g1
V__enter__
p20
sg3
I01
sg10
L2L
sg4
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p21
sa(dp22
g1
V__eq__
p23
sg3
I01
sg10
L5L
sa(dp24
g1
V__exit__
p25
sg3
I01
sg10
L2L
sg4
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p26
sa(dp27
g1
V__format__
p28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p29
sa(dp30
g1
V__ge__
p31
sg3
I01
sg10
L5L
sa(dp32
g1
V__getattribute__
p33
sg3
I01
sg10
L5L
sa(dp34
g1
V__gt__
p35
sg3
I01
sg10
L5L
sa(dp36
g1
V__hash__
p37
sg3
I01
sg10
L5L
sa(dp38
g1
V__init__
p39
sg3
I01
sg10
L5L
sa(dp40
g1
V__init_subclass__
p41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p42
sa(dp43
g1
V__le__
p44
sg3
I01
sg10
L5L
sa(dp45
g1
V__lt__
p46
sg3
I01
sg10
L5L
sa(dp47
g1
V__ne__
p48
sg3
I01
sg10
L5L
sa(dp49
g1
V__new__
p50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p51
sa(dp52
g1
V__reduce__
p53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p54
sa(dp55
g1
V__reduce_ex__
p56
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p57
sa(dp58
g1
V__repr__
p59
sg3
I01
sg10
L5L
sa(dp60
g1
V__setattr__
p61
sg3
I01
sg10
L5L
sa(dp62
g1
V__sizeof__
p63
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p64
sa(dp65
g1
V__str__
p66
sg3
I01
sg10
L5L
sa(dp67
g1
V__subclasshook__
p68
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p69
sa(dp70
g1
Vacquire
p71
sg3
I01
sg10
L2L
sg4
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p72
sa(dp73
g1
Vacquire_lock
p74
sg3
I01
sg10
L2L
sg4
Vacquire(blocking=True, timeout=-1) -> bool\u000a(acquire_lock() is an obsolete synonym)\u000a\u000aLock the lock.  Without argument, this blocks if the lock is already\u000alocked (even by the same thread), waiting for another thread to release\u000athe lock, and return True once the lock is acquired.\u000aWith an argument, this will only block if the argument is true,\u000aand the return value reflects whether the lock is acquired.\u000aThe blocking operation is interruptible.
p75
sa(dp76
g1
Vlocked
p77
sg3
I01
sg10
L2L
sg4
Vlocked() -> bool\u000a(locked_lock() is an obsolete synonym)\u000a\u000aReturn whether the lock is in the locked state.
p78
sa(dp79
g1
Vlocked_lock
p80
sg3
I01
sg10
L2L
sg4
Vlocked() -> bool\u000a(locked_lock() is an obsolete synonym)\u000a\u000aReturn whether the lock is in the locked state.
p81
sa(dp82
g1
Vrelease
p83
sg3
I01
sg10
L2L
sg4
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p84
sa(dp85
g1
Vrelease_lock
p86
sg3
I01
sg10
L2L
sg4
Vrelease()\u000a(release_lock() is an obsolete synonym)\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000abut it needn't be locked by the same thread that unlocks it.
p87
sasg4
VA lock object is a synchronization primitive.  To create a lock,\u000acall threading.Lock().  Methods are:\u000a\u000aacquire() -- lock the lock, possibly blocking until it can be obtained\u000arelease() -- unlock of the lock\u000alocked() -- test whether the lock is currently locked\u000a\u000aA lock is not owned by the thread that locked it; another thread may\u000aunlock it.  A thread attempting to lock a lock that it has already locked\u000awill block until another thread unlocks it.  Deadlocks may ensue.
p88
sa(dp89
g1
VRLock
p90
sg3
I01
sg10
L3L
sg6
(lp91
(dp92
g1
g13
sg3
I01
sg10
L5L
sa(dp93
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p94
sa(dp95
g1
g18
sg3
I01
sg10
L5L
sa(dp96
g1
g20
sg3
I01
sg10
L2L
sg4
Vacquire(blocking=True) -> bool\u000a\u000aLock the lock.  `blocking` indicates whether we should wait\u000afor the lock to be available or not.  If `blocking` is False\u000aand another thread holds the lock, the method will return False\u000aimmediately.  If `blocking` is True and another thread holds\u000athe lock, the method will wait for the lock to be released,\u000atake it and then return True.\u000a(note: the blocking operation is interruptible.)\u000a\u000aIn all other cases, the method will return True immediately.\u000aPrecisely, if the current thread already holds the lock, its\u000ainternal counter is simply incremented. If nobody holds the lock,\u000athe lock is taken and its internal counter initialized to 1.
p97
sa(dp98
g1
g23
sg3
I01
sg10
L5L
sa(dp99
g1
g25
sg3
I01
sg10
L2L
sg4
Vrelease()\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000aand must be locked by the same thread that unlocks it; otherwise a\u000a`RuntimeError` is raised.\u000a\u000aDo note that if the lock was acquire()d several times in a row by the\u000acurrent thread, release() needs to be called as many times for the lock\u000ato be available for other threads.
p100
sa(dp101
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p102
sa(dp103
g1
g31
sg3
I01
sg10
L5L
sa(dp104
g1
g33
sg3
I01
sg10
L5L
sa(dp105
g1
g35
sg3
I01
sg10
L5L
sa(dp106
g1
g37
sg3
I01
sg10
L5L
sa(dp107
g1
g39
sg3
I01
sg10
L5L
sa(dp108
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p109
sa(dp110
g1
g44
sg3
I01
sg10
L5L
sa(dp111
g1
g46
sg3
I01
sg10
L5L
sa(dp112
g1
g48
sg3
I01
sg10
L5L
sa(dp113
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p114
sa(dp115
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p116
sa(dp117
g1
g56
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p118
sa(dp119
g1
g59
sg3
I01
sg10
L5L
sa(dp120
g1
g61
sg3
I01
sg10
L5L
sa(dp121
g1
g63
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p122
sa(dp123
g1
g66
sg3
I01
sg10
L5L
sa(dp124
g1
g68
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p125
sa(dp126
g1
V_acquire_restore
p127
sg3
I01
sg10
L2L
sg4
V_acquire_restore(state) -> None\u000a\u000aFor internal use by `threading.Condition`.
p128
sa(dp129
g1
V_is_owned
p130
sg3
I01
sg10
L2L
sg4
V_is_owned() -> bool\u000a\u000aFor internal use by `threading.Condition`.
p131
sa(dp132
g1
V_release_save
p133
sg3
I01
sg10
L2L
sg4
V_release_save() -> tuple\u000a\u000aFor internal use by `threading.Condition`.
p134
sa(dp135
g1
g71
sg3
I01
sg10
L2L
sg4
Vacquire(blocking=True) -> bool\u000a\u000aLock the lock.  `blocking` indicates whether we should wait\u000afor the lock to be available or not.  If `blocking` is False\u000aand another thread holds the lock, the method will return False\u000aimmediately.  If `blocking` is True and another thread holds\u000athe lock, the method will wait for the lock to be released,\u000atake it and then return True.\u000a(note: the blocking operation is interruptible.)\u000a\u000aIn all other cases, the method will return True immediately.\u000aPrecisely, if the current thread already holds the lock, its\u000ainternal counter is simply incremented. If nobody holds the lock,\u000athe lock is taken and its internal counter initialized to 1.
p136
sa(dp137
g1
g83
sg3
I01
sg10
L2L
sg4
Vrelease()\u000a\u000aRelease the lock, allowing another thread that is blocked waiting for\u000athe lock to acquire the lock.  The lock must be in the locked state,\u000aand must be locked by the same thread that unlocks it; otherwise a\u000a`RuntimeError` is raised.\u000a\u000aDo note that if the lock was acquire()d several times in a row by the\u000acurrent thread, release() needs to be called as many times for the lock\u000ato be available for other threads.
p138
sasg4
Nsa(dp139
g1
VTIMEOUT_MAX
p140
sg3
I01
sg10
L5L
sa(dp141
g1
g18
sg3
I01
sg10
L5L
sa(dp142
g1
V__loader__
p143
sg3
I01
sg10
L3L
sg6
(lp144
(dp145
g1
g13
sg3
I01
sg10
L5L
sa(dp146
g1
V__dict__
p147
sg3
I01
sg10
L5L
sa(dp148
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p149
sa(dp150
g1
g18
sg3
I01
sg10
L5L
sa(dp151
g1
g23
sg3
I01
sg10
L5L
sa(dp152
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p153
sa(dp154
g1
g31
sg3
I01
sg10
L5L
sa(dp155
g1
g33
sg3
I01
sg10
L5L
sa(dp156
g1
g35
sg3
I01
sg10
L5L
sa(dp157
g1
g37
sg3
I01
sg10
L5L
sa(dp158
g1
g39
sg3
I01
sg10
L5L
sa(dp159
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p160
sa(dp161
g1
g44
sg3
I01
sg10
L5L
sa(dp162
g1
g46
sg3
I01
sg10
L5L
sa(dp163
g1
V__module__
p164
sg3
I01
sg10
L5L
sa(dp165
g1
g48
sg3
I01
sg10
L5L
sa(dp166
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p167
sa(dp168
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p169
sa(dp170
g1
g56
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p171
sa(dp172
g1
g59
sg3
I01
sg10
L5L
sa(dp173
g1
g61
sg3
I01
sg10
L5L
sa(dp174
g1
g63
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p175
sa(dp176
g1
g66
sg3
I01
sg10
L5L
sa(dp177
g1
g68
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p178
sa(dp179
g1
V__weakref__
p180
sg3
I01
sg10
L5L
sa(dp181
g1
Vcreate_module
p182
sg3
I01
sg10
L5L
sa(dp183
g1
Vexec_module
p184
sg3
I01
sg10
L5L
sa(dp185
g1
Vfind_module
p186
sg3
I01
sg10
L5L
sa(dp187
g1
Vfind_spec
p188
sg3
I01
sg10
L5L
sa(dp189
g1
Vget_code
p190
sg3
I01
sg10
L5L
sa(dp191
g1
Vget_source
p192
sg3
I01
sg10
L5L
sa(dp193
g1
Vis_package
p194
sg3
I01
sg10
L5L
sa(dp195
g1
Vload_module
p196
sg3
I01
sg10
L5L
sa(dp197
g1
Vmodule_repr
p198
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p199
sa(dp200
g1
V__name__
p201
sg3
I01
sg10
L5L
sa(dp202
g1
V__package__
p203
sg3
I01
sg10
L5L
sa(dp204
g1
V__spec__
p205
sg3
I01
sg10
L5L
sa(dp206
g1
V_count
p207
sg3
I01
sg10
L2L
sg4
V_count() -> integer\u000a\u000aReturn the number of currently running Python threads, excluding \u000athe main thread. The returned number comprises all threads created\u000athrough `start_new_thread()` as well as `threading.Thread`, and not\u000ayet finished.\u000a\u000aThis function is meant for internal and specialized purposes only.\u000aIn most applications `threading.enumerate()` should be used instead.
p208
sa(dp209
g1
V_local
p210
sg3
I01
sg10
L3L
sg6
(lp211
(dp212
g1
g13
sg3
I01
sg10
L5L
sa(dp213
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p214
sa(dp215
g1
g18
sg3
I01
sg10
L5L
sa(dp216
g1
g23
sg3
I01
sg10
L5L
sa(dp217
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p218
sa(dp219
g1
g31
sg3
I01
sg10
L5L
sa(dp220
g1
g33
sg3
I01
sg10
L5L
sa(dp221
g1
g35
sg3
I01
sg10
L5L
sa(dp222
g1
g37
sg3
I01
sg10
L5L
sa(dp223
g1
g39
sg3
I01
sg10
L5L
sa(dp224
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p225
sa(dp226
g1
g44
sg3
I01
sg10
L5L
sa(dp227
g1
g46
sg3
I01
sg10
L5L
sa(dp228
g1
g48
sg3
I01
sg10
L5L
sa(dp229
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p230
sa(dp231
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p232
sa(dp233
g1
g56
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p234
sa(dp235
g1
g59
sg3
I01
sg10
L5L
sa(dp236
g1
g61
sg3
I01
sg10
L5L
sa(dp237
g1
g63
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p238
sa(dp239
g1
g66
sg3
I01
sg10
L5L
sa(dp240
g1
g68
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p241
sasg4
VThread-local data
p242
sa(dp243
g1
V_set_sentinel
p244
sg3
I01
sg10
L2L
sg4
V_set_sentinel() -> lock\u000a\u000aSet a sentinel lock that will be released when the current thread\u000astate is finalized (after it is untied from the interpreter).\u000a\u000aThis is a private API for the threading module.
p245
sa(dp246
g1
Vallocate
p247
sg3
I01
sg10
L2L
sg4
Vallocate_lock() -> lock object\u000a(allocate() is an obsolete synonym)\u000a\u000aCreate a new lock object. See help(type(threading.Lock())) for\u000ainformation about locks.
p248
sa(dp249
g1
Vallocate_lock
p250
sg3
I01
sg10
L2L
sg4
Vallocate_lock() -> lock object\u000a(allocate() is an obsolete synonym)\u000a\u000aCreate a new lock object. See help(type(threading.Lock())) for\u000ainformation about locks.
p251
sa(dp252
g1
Verror
p253
sg3
I01
sg10
L3L
sg6
(lp254
(dp255
g1
V__cause__
p256
sg3
I01
sg10
L5L
sa(dp257
g1
V__context__
p258
sg3
I01
sg10
L5L
sa(dp259
g1
g13
sg3
I01
sg10
L5L
sa(dp260
g1
g147
sg3
I01
sg10
L5L
sa(dp261
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p262
sa(dp263
g1
g18
sg3
I01
sg10
L5L
sa(dp264
g1
g23
sg3
I01
sg10
L5L
sa(dp265
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p266
sa(dp267
g1
g31
sg3
I01
sg10
L5L
sa(dp268
g1
g33
sg3
I01
sg10
L5L
sa(dp269
g1
g35
sg3
I01
sg10
L5L
sa(dp270
g1
g37
sg3
I01
sg10
L5L
sa(dp271
g1
g39
sg3
I01
sg10
L5L
sa(dp272
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p273
sa(dp274
g1
g44
sg3
I01
sg10
L5L
sa(dp275
g1
g46
sg3
I01
sg10
L5L
sa(dp276
g1
g48
sg3
I01
sg10
L5L
sa(dp277
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p278
sa(dp279
g1
g53
sg3
I01
sg10
L2L
sg4
Nsa(dp280
g1
g56
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p281
sa(dp282
g1
g59
sg3
I01
sg10
L5L
sa(dp283
g1
g61
sg3
I01
sg10
L5L
sa(dp284
g1
V__setstate__
p285
sg3
I01
sg10
L2L
sg4
Nsa(dp286
g1
g63
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p287
sa(dp288
g1
g66
sg3
I01
sg10
L5L
sa(dp289
g1
g68
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p290
sa(dp291
g1
V__suppress_context__
p292
sg3
I01
sg10
L5L
sa(dp293
g1
V__traceback__
p294
sg3
I01
sg10
L5L
sa(dp295
g1
Vargs
p296
sg3
I01
sg10
L5L
sa(dp297
g1
Vwith_traceback
p298
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p299
sasg4
VUnspecified run-time error.
p300
sa(dp301
g1
Vexit
p302
sg3
I01
sg10
L2L
sg4
Vexit()\u000a(exit_thread() is an obsolete synonym)\u000a\u000aThis is synonymous to ``raise SystemExit''.  It will cause the current\u000athread to exit silently unless the exception is caught.
p303
sa(dp304
g1
Vexit_thread
p305
sg3
I01
sg10
L2L
sg4
Vexit()\u000a(exit_thread() is an obsolete synonym)\u000a\u000aThis is synonymous to ``raise SystemExit''.  It will cause the current\u000athread to exit silently unless the exception is caught.
p306
sa(dp307
g1
Vget_ident
p308
sg3
I01
sg10
L2L
sg4
Vget_ident() -> integer\u000a\u000aReturn a non-zero integer that uniquely identifies the current thread\u000aamongst other threads that exist simultaneously.\u000aThis may be used to identify per-thread resources.\u000aEven though on some platforms threads identities may appear to be\u000aallocated consecutive numbers starting at 1, this behavior should not\u000abe relied upon, and the number should be seen purely as a magic cookie.\u000aA thread's identity may be reused for another thread after it exits.
p309
sa(dp310
g1
Vinterrupt_main
p311
sg3
I01
sg10
L2L
sg4
Vinterrupt_main()\u000a\u000aRaise a KeyboardInterrupt in the main thread.\u000aA subthread can use this function to interrupt the main thread.
p312
sa(dp313
g1
Vstack_size
p314
sg3
I01
sg10
L2L
sg4
Vstack_size([size]) -> size\u000a\u000aReturn the thread stack size used when creating new threads.  The\u000aoptional size argument specifies the stack size (in bytes) to be used\u000afor subsequently created threads, and must be 0 (use platform or\u000aconfigured default) or a positive integer value of at least 32,768 (32k).\u000aIf changing the thread stack size is unsupported, a ThreadError\u000aexception is raised.  If the specified size is invalid, a ValueError\u000aexception is raised, and the stack size is unmodified.  32k bytes\u000a currently the minimum supported stack size value to guarantee\u000asufficient stack space for the interpreter itself.\u000a\u000aNote that some platforms may have particular restrictions on values for\u000athe stack size, such as requiring a minimum stack size larger than 32kB or\u000arequiring allocation in multiples of the system memory page size\u000a- platform documentation should be referred to for more information\u000a(4kB pages are common; using multiples of 4096 for the stack size is\u000athe suggested approach in the absence of more specific information).
p315
sa(dp316
g1
Vstart_new
p317
sg3
I01
sg10
L2L
sg4
Vstart_new_thread(function, args[, kwargs])\u000a(start_new() is an obsolete synonym)\u000a\u000aStart a new thread and return its identifier.  The thread will call the\u000afunction with positional arguments from the tuple args and keyword arguments\u000ataken from the optional dictionary kwargs.  The thread exits when the\u000afunction returns; the return value is ignored.  The thread will also exit\u000awhen the function raises an unhandled exception; a stack trace will be\u000aprinted unless the exception is SystemExit.\u000a
p318
sa(dp319
g1
Vstart_new_thread
p320
sg3
I01
sg10
L2L
sg4
Vstart_new_thread(function, args[, kwargs])\u000a(start_new() is an obsolete synonym)\u000a\u000aStart a new thread and return its identifier.  The thread will call the\u000afunction with positional arguments from the tuple args and keyword arguments\u000ataken from the optional dictionary kwargs.  The thread exits when the\u000afunction returns; the return value is ignored.  The thread will also exit\u000awhen the function raises an unhandled exception; a stack trace will be\u000aprinted unless the exception is SystemExit.\u000a
p321
sasg10
L1L
s.