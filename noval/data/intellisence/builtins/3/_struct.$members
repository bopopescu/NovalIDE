(dp0
Vname
p1
V_struct
p2
sVis_builtin
p3
I01
sVdoc
p4
VFunctions to convert between Python values and C structs.\u000aPython bytes objects are used to hold the data representing the C struct\u000aand also as format strings (explained below) to describe the layout of data\u000ain the C struct.\u000a\u000aThe optional first format char indicates byte order, size and alignment:\u000a  @: native order, size & alignment (default)\u000a  =: native order, std. size & alignment\u000a  <: little-endian, std. size & alignment\u000a  >: big-endian, std. size & alignment\u000a  !: same as >\u000a\u000aThe remaining chars indicate types of args and must match exactly;\u000athese can be preceded by a decimal repeat count:\u000a  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;\u000a  ?: _Bool (requires C99; if not available, char is used instead)\u000a  h:short; H:unsigned short; i:int; I:unsigned int;\u000a  l:long; L:unsigned long; f:float; d:double; e:half-float.\u000aSpecial cases (preceding decimal count indicates length):\u000a  s:string (array of char); p: pascal string (with count byte).\u000aSpecial cases (only available in native format):\u000a  n:ssize_t; N:size_t;\u000a  P:an integer type that is wide enough to hold a pointer.\u000aSpecial case (not in native mode unless 'long long' in platform C):\u000a  q:long long; Q:unsigned long long\u000aWhitespace between formats is ignored.\u000a\u000aThe variable struct.error is an exception raised on errors.\u000a
p5
sVchilds
p6
(lp7
(dp8
g1
VStruct
p9
sg3
I01
sVtype
p10
L3L
sg6
(lp11
(dp12
g1
V__delattr__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__dir__
p15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p16
sa(dp17
g1
V__doc__
p18
sg3
I01
sg10
L5L
sa(dp19
g1
V__eq__
p20
sg3
I01
sg10
L5L
sa(dp21
g1
V__format__
p22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p23
sa(dp24
g1
V__ge__
p25
sg3
I01
sg10
L5L
sa(dp26
g1
V__getattribute__
p27
sg3
I01
sg10
L5L
sa(dp28
g1
V__gt__
p29
sg3
I01
sg10
L5L
sa(dp30
g1
V__hash__
p31
sg3
I01
sg10
L5L
sa(dp32
g1
V__init__
p33
sg3
I01
sg10
L5L
sa(dp34
g1
V__init_subclass__
p35
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p36
sa(dp37
g1
V__le__
p38
sg3
I01
sg10
L5L
sa(dp39
g1
V__lt__
p40
sg3
I01
sg10
L5L
sa(dp41
g1
V__ne__
p42
sg3
I01
sg10
L5L
sa(dp43
g1
V__new__
p44
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p45
sa(dp46
g1
V__reduce__
p47
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p48
sa(dp49
g1
V__reduce_ex__
p50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p51
sa(dp52
g1
V__repr__
p53
sg3
I01
sg10
L5L
sa(dp54
g1
V__setattr__
p55
sg3
I01
sg10
L5L
sa(dp56
g1
V__sizeof__
p57
sg3
I01
sg10
L2L
sg4
VS.__sizeof__() -> size of S in memory, in bytes
p58
sa(dp59
g1
V__str__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__subclasshook__
p62
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p63
sa(dp64
g1
Vformat
p65
sg3
I01
sg10
L5L
sa(dp66
g1
Viter_unpack
p67
sg3
I01
sg10
L2L
sg4
VS.iter_unpack(buffer) -> iterator(v1, v2, ...)\u000a\u000aReturn an iterator yielding tuples unpacked from the given bytes\u000asource, like a repeated invocation of unpack_from().  Requires\u000athat the bytes length be a multiple of the struct size.
p68
sa(dp69
g1
Vpack
p70
sg3
I01
sg10
L2L
sg4
VS.pack(v1, v2, ...) -> bytes\u000a\u000aReturn a bytes object containing values v1, v2, ... packed according\u000ato the format string S.format.  See help(struct) for more on format\u000astrings.
p71
sa(dp72
g1
Vpack_into
p73
sg3
I01
sg10
L2L
sg4
VS.pack_into(buffer, offset, v1, v2, ...)\u000a\u000aPack the values v1, v2, ... according to the format string S.format\u000aand write the packed bytes into the writable buffer buf starting at\u000aoffset.  Note that the offset is a required argument.  See\u000ahelp(struct) for more on format strings.
p74
sa(dp75
g1
Vsize
p76
sg3
I01
sg10
L5L
sa(dp77
g1
Vunpack
p78
sg3
I01
sg10
L2L
sg4
VS.unpack(buffer) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format\u000astring S.format.  The buffer's size in bytes must be S.size.  See\u000ahelp(struct) for more on format strings.
p79
sa(dp80
g1
Vunpack_from
p81
sg3
I01
sg10
L2L
sg4
VS.unpack_from(buffer, offset=0) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format\u000astring S.format.  The buffer's size in bytes, minus offset, must be at\u000aleast S.size.  See help(struct) for more on format strings.
p82
sasg4
VStruct(fmt) --> compiled struct object\u000a\u000aReturn a new Struct object which writes and reads binary data according to\u000athe format string fmt.  See help(struct) for more on format strings.
p83
sa(dp84
g1
g18
sg3
I01
sg10
L5L
sa(dp85
g1
V__loader__
p86
sg3
I01
sg10
L3L
sg6
(lp87
(dp88
g1
g13
sg3
I01
sg10
L5L
sa(dp89
g1
V__dict__
p90
sg3
I01
sg10
L5L
sa(dp91
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p92
sa(dp93
g1
g18
sg3
I01
sg10
L5L
sa(dp94
g1
g20
sg3
I01
sg10
L5L
sa(dp95
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p96
sa(dp97
g1
g25
sg3
I01
sg10
L5L
sa(dp98
g1
g27
sg3
I01
sg10
L5L
sa(dp99
g1
g29
sg3
I01
sg10
L5L
sa(dp100
g1
g31
sg3
I01
sg10
L5L
sa(dp101
g1
g33
sg3
I01
sg10
L5L
sa(dp102
g1
g35
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p103
sa(dp104
g1
g38
sg3
I01
sg10
L5L
sa(dp105
g1
g40
sg3
I01
sg10
L5L
sa(dp106
g1
V__module__
p107
sg3
I01
sg10
L5L
sa(dp108
g1
g42
sg3
I01
sg10
L5L
sa(dp109
g1
g44
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p110
sa(dp111
g1
g47
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p112
sa(dp113
g1
g50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p114
sa(dp115
g1
g53
sg3
I01
sg10
L5L
sa(dp116
g1
g55
sg3
I01
sg10
L5L
sa(dp117
g1
g57
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p118
sa(dp119
g1
g60
sg3
I01
sg10
L5L
sa(dp120
g1
g62
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p121
sa(dp122
g1
V__weakref__
p123
sg3
I01
sg10
L5L
sa(dp124
g1
Vcreate_module
p125
sg3
I01
sg10
L5L
sa(dp126
g1
Vexec_module
p127
sg3
I01
sg10
L5L
sa(dp128
g1
Vfind_module
p129
sg3
I01
sg10
L5L
sa(dp130
g1
Vfind_spec
p131
sg3
I01
sg10
L5L
sa(dp132
g1
Vget_code
p133
sg3
I01
sg10
L5L
sa(dp134
g1
Vget_source
p135
sg3
I01
sg10
L5L
sa(dp136
g1
Vis_package
p137
sg3
I01
sg10
L5L
sa(dp138
g1
Vload_module
p139
sg3
I01
sg10
L5L
sa(dp140
g1
Vmodule_repr
p141
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p142
sa(dp143
g1
V__name__
p144
sg3
I01
sg10
L5L
sa(dp145
g1
V__package__
p146
sg3
I01
sg10
L5L
sa(dp147
g1
V__spec__
p148
sg3
I01
sg10
L5L
sa(dp149
g1
V_clearcache
p150
sg3
I01
sg10
L2L
sg4
VClear the internal cache.
p151
sa(dp152
g1
Vcalcsize
p153
sg3
I01
sg10
L2L
sg4
Vcalcsize(fmt) -> integer\u000a\u000aReturn size in bytes of the struct described by the format string fmt.
p154
sa(dp155
g1
Verror
p156
sg3
I01
sg10
L3L
sg6
(lp157
(dp158
g1
V__cause__
p159
sg3
I01
sg10
L5L
sa(dp160
g1
V__context__
p161
sg3
I01
sg10
L5L
sa(dp162
g1
g13
sg3
I01
sg10
L5L
sa(dp163
g1
g90
sg3
I01
sg10
L5L
sa(dp164
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p165
sa(dp166
g1
g18
sg3
I01
sg10
L5L
sa(dp167
g1
g20
sg3
I01
sg10
L5L
sa(dp168
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p169
sa(dp170
g1
g25
sg3
I01
sg10
L5L
sa(dp171
g1
g27
sg3
I01
sg10
L5L
sa(dp172
g1
g29
sg3
I01
sg10
L5L
sa(dp173
g1
g31
sg3
I01
sg10
L5L
sa(dp174
g1
g33
sg3
I01
sg10
L5L
sa(dp175
g1
g35
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p176
sa(dp177
g1
g38
sg3
I01
sg10
L5L
sa(dp178
g1
g40
sg3
I01
sg10
L5L
sa(dp179
g1
g107
sg3
I01
sg10
L5L
sa(dp180
g1
g42
sg3
I01
sg10
L5L
sa(dp181
g1
g44
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p182
sa(dp183
g1
g47
sg3
I01
sg10
L2L
sg4
Nsa(dp184
g1
g50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p185
sa(dp186
g1
g53
sg3
I01
sg10
L5L
sa(dp187
g1
g55
sg3
I01
sg10
L5L
sa(dp188
g1
V__setstate__
p189
sg3
I01
sg10
L2L
sg4
Nsa(dp190
g1
g57
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p191
sa(dp192
g1
g60
sg3
I01
sg10
L5L
sa(dp193
g1
g62
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p194
sa(dp195
g1
V__suppress_context__
p196
sg3
I01
sg10
L5L
sa(dp197
g1
V__traceback__
p198
sg3
I01
sg10
L5L
sa(dp199
g1
g123
sg3
I01
sg10
L5L
sa(dp200
g1
Vargs
p201
sg3
I01
sg10
L5L
sa(dp202
g1
Vwith_traceback
p203
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p204
sasg4
Nsa(dp205
g1
g67
sg3
I01
sg10
L2L
sg4
Viter_unpack(fmt, buffer) -> iterator(v1, v2, ...)\u000a\u000aReturn an iterator yielding tuples unpacked from the given bytes\u000asource according to the format string, like a repeated invocation of\u000aunpack_from().  Requires that the bytes length be a multiple of the\u000aformat struct size.
p206
sa(dp207
g1
g70
sg3
I01
sg10
L2L
sg4
Vpack(fmt, v1, v2, ...) -> bytes\u000a\u000aReturn a bytes object containing the values v1, v2, ... packed according\u000ato the format string fmt.  See help(struct) for more on format strings.
p208
sa(dp209
g1
g73
sg3
I01
sg10
L2L
sg4
Vpack_into(fmt, buffer, offset, v1, v2, ...)\u000a\u000aPack the values v1, v2, ... according to the format string fmt and write\u000athe packed bytes into the writable buffer buf starting at offset.  Note\u000athat the offset is a required argument.  See help(struct) for more\u000aon format strings.
p210
sa(dp211
g1
g78
sg3
I01
sg10
L2L
sg4
Vunpack(fmt, buffer) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format string\u000afmt.  The buffer's size in bytes must be calcsize(fmt). See help(struct)\u000afor more on format strings.
p212
sa(dp213
g1
g81
sg3
I01
sg10
L2L
sg4
Vunpack_from(fmt, buffer, offset=0) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format string\u000afmt.  The buffer's size, minus offset, must be at least calcsize(fmt).\u000aSee help(struct) for more on format strings.
p214
sasg10
L1L
s.