(dp0
Vname
p1
Vnt
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module provides access to operating system functionality that is\u000astandardized by the C Standard and the POSIX standard (a thinly\u000adisguised Unix interface).  Refer to the library manual and\u000acorresponding Unix manual entries for more information on calls.
p5
sVchilds
p6
(lp7
(dp8
g1
VDirEntry
p9
sg3
I01
sVtype
p10
L3L
sg6
(lp11
(dp12
g1
V__delattr__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__dir__
p15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p16
sa(dp17
g1
V__doc__
p18
sg3
I01
sg10
L5L
sa(dp19
g1
V__eq__
p20
sg3
I01
sg10
L5L
sa(dp21
g1
V__format__
p22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p23
sa(dp24
g1
V__fspath__
p25
sg3
I01
sg10
L2L
sg4
Vreturns the path for the entry
p26
sa(dp27
g1
V__ge__
p28
sg3
I01
sg10
L5L
sa(dp29
g1
V__getattribute__
p30
sg3
I01
sg10
L5L
sa(dp31
g1
V__gt__
p32
sg3
I01
sg10
L5L
sa(dp33
g1
V__hash__
p34
sg3
I01
sg10
L5L
sa(dp35
g1
V__init__
p36
sg3
I01
sg10
L5L
sa(dp37
g1
V__init_subclass__
p38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p39
sa(dp40
g1
V__le__
p41
sg3
I01
sg10
L5L
sa(dp42
g1
V__lt__
p43
sg3
I01
sg10
L5L
sa(dp44
g1
V__ne__
p45
sg3
I01
sg10
L5L
sa(dp46
g1
V__new__
p47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p48
sa(dp49
g1
V__reduce__
p50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p51
sa(dp52
g1
V__reduce_ex__
p53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p54
sa(dp55
g1
V__repr__
p56
sg3
I01
sg10
L5L
sa(dp57
g1
V__setattr__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__sizeof__
p60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p61
sa(dp62
g1
V__str__
p63
sg3
I01
sg10
L5L
sa(dp64
g1
V__subclasshook__
p65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p66
sa(dp67
g1
Vinode
p68
sg3
I01
sg10
L2L
sg4
Vreturn inode of the entry; cached per entry
p69
sa(dp70
g1
Vis_dir
p71
sg3
I01
sg10
L2L
sg4
Vreturn True if the entry is a directory; cached per entry
p72
sa(dp73
g1
Vis_file
p74
sg3
I01
sg10
L2L
sg4
Vreturn True if the entry is a file; cached per entry
p75
sa(dp76
g1
Vis_symlink
p77
sg3
I01
sg10
L2L
sg4
Vreturn True if the entry is a symbolic link; cached per entry
p78
sa(dp79
g1
g1
sg3
I01
sg10
L5L
sa(dp80
g1
Vpath
p81
sg3
I01
sg10
L5L
sa(dp82
g1
Vstat
p83
sg3
I01
sg10
L2L
sg4
Vreturn stat_result object for the entry; cached per entry
p84
sasg4
Nsa(dp85
g1
VF_OK
p86
sg3
I01
sg10
L5L
sa(dp87
g1
VO_APPEND
p88
sg3
I01
sg10
L5L
sa(dp89
g1
VO_BINARY
p90
sg3
I01
sg10
L5L
sa(dp91
g1
VO_CREAT
p92
sg3
I01
sg10
L5L
sa(dp93
g1
VO_EXCL
p94
sg3
I01
sg10
L5L
sa(dp95
g1
VO_NOINHERIT
p96
sg3
I01
sg10
L5L
sa(dp97
g1
VO_RANDOM
p98
sg3
I01
sg10
L5L
sa(dp99
g1
VO_RDONLY
p100
sg3
I01
sg10
L5L
sa(dp101
g1
VO_RDWR
p102
sg3
I01
sg10
L5L
sa(dp103
g1
VO_SEQUENTIAL
p104
sg3
I01
sg10
L5L
sa(dp105
g1
VO_SHORT_LIVED
p106
sg3
I01
sg10
L5L
sa(dp107
g1
VO_TEMPORARY
p108
sg3
I01
sg10
L5L
sa(dp109
g1
VO_TEXT
p110
sg3
I01
sg10
L5L
sa(dp111
g1
VO_TRUNC
p112
sg3
I01
sg10
L5L
sa(dp113
g1
VO_WRONLY
p114
sg3
I01
sg10
L5L
sa(dp115
g1
VP_DETACH
p116
sg3
I01
sg10
L5L
sa(dp117
g1
VP_NOWAIT
p118
sg3
I01
sg10
L5L
sa(dp119
g1
VP_NOWAITO
p120
sg3
I01
sg10
L5L
sa(dp121
g1
VP_OVERLAY
p122
sg3
I01
sg10
L5L
sa(dp123
g1
VP_WAIT
p124
sg3
I01
sg10
L5L
sa(dp125
g1
VR_OK
p126
sg3
I01
sg10
L5L
sa(dp127
g1
VTMP_MAX
p128
sg3
I01
sg10
L5L
sa(dp129
g1
VW_OK
p130
sg3
I01
sg10
L5L
sa(dp131
g1
VX_OK
p132
sg3
I01
sg10
L5L
sa(dp133
g1
g18
sg3
I01
sg10
L5L
sa(dp134
g1
V__loader__
p135
sg3
I01
sg10
L3L
sg6
(lp136
(dp137
g1
g13
sg3
I01
sg10
L5L
sa(dp138
g1
V__dict__
p139
sg3
I01
sg10
L5L
sa(dp140
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p141
sa(dp142
g1
g18
sg3
I01
sg10
L5L
sa(dp143
g1
g20
sg3
I01
sg10
L5L
sa(dp144
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p145
sa(dp146
g1
g28
sg3
I01
sg10
L5L
sa(dp147
g1
g30
sg3
I01
sg10
L5L
sa(dp148
g1
g32
sg3
I01
sg10
L5L
sa(dp149
g1
g34
sg3
I01
sg10
L5L
sa(dp150
g1
g36
sg3
I01
sg10
L5L
sa(dp151
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p152
sa(dp153
g1
g41
sg3
I01
sg10
L5L
sa(dp154
g1
g43
sg3
I01
sg10
L5L
sa(dp155
g1
V__module__
p156
sg3
I01
sg10
L5L
sa(dp157
g1
g45
sg3
I01
sg10
L5L
sa(dp158
g1
g47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p159
sa(dp160
g1
g50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p161
sa(dp162
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p163
sa(dp164
g1
g56
sg3
I01
sg10
L5L
sa(dp165
g1
g58
sg3
I01
sg10
L5L
sa(dp166
g1
g60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p167
sa(dp168
g1
g63
sg3
I01
sg10
L5L
sa(dp169
g1
g65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p170
sa(dp171
g1
V__weakref__
p172
sg3
I01
sg10
L5L
sa(dp173
g1
Vcreate_module
p174
sg3
I01
sg10
L5L
sa(dp175
g1
Vexec_module
p176
sg3
I01
sg10
L5L
sa(dp177
g1
Vfind_module
p178
sg3
I01
sg10
L5L
sa(dp179
g1
Vfind_spec
p180
sg3
I01
sg10
L5L
sa(dp181
g1
Vget_code
p182
sg3
I01
sg10
L5L
sa(dp183
g1
Vget_source
p184
sg3
I01
sg10
L5L
sa(dp185
g1
Vis_package
p186
sg3
I01
sg10
L5L
sa(dp187
g1
Vload_module
p188
sg3
I01
sg10
L5L
sa(dp189
g1
Vmodule_repr
p190
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p191
sa(dp192
g1
V__name__
p193
sg3
I01
sg10
L5L
sa(dp194
g1
V__package__
p195
sg3
I01
sg10
L5L
sa(dp196
g1
V__spec__
p197
sg3
I01
sg10
L5L
sa(dp198
g1
V_exit
p199
sg3
I01
sg10
L2L
sg4
VExit to the system with specified status, without normal exit processing.
p200
sa(dp201
g1
V_getdiskusage
p202
sg3
I01
sg10
L2L
sg4
VReturn disk usage statistics about the given path as a (total, free) tuple.
p203
sa(dp204
g1
V_getfinalpathname
p205
sg3
I01
sg10
L2L
sg4
VA helper function for samepath on windows.
p206
sa(dp207
g1
V_getfullpathname
p208
sg3
I01
sg10
L2L
sg4
Nsa(dp209
g1
V_getvolumepathname
p210
sg3
I01
sg10
L2L
sg4
VA helper function for ismount on Win32.
p211
sa(dp212
g1
V_have_functions
p213
sg3
I01
sg10
L5L
sa(dp214
g1
V_isdir
p215
sg3
I01
sg10
L2L
sg4
VReturn true if the pathname refers to an existing directory.
p216
sa(dp217
g1
Vabort
p218
sg3
I01
sg10
L2L
sg4
VAbort the interpreter immediately.\u000a\u000aThis function 'dumps core' or otherwise fails in the hardest way possible\u000aon the hosting operating system.  This function never returns.
p219
sa(dp220
g1
Vaccess
p221
sg3
I01
sg10
L2L
sg4
VUse the real uid/gid to test for access to a path.\u000a\u000a  path\u000a    Path to be tested; can be string or bytes\u000a  mode\u000a    Operating-system mode bitfield.  Can be F_OK to test existence,\u000a    or the inclusive-OR of R_OK, W_OK, and X_OK.\u000a  dir_fd\u000a    If not None, it should be a file descriptor open to a directory,\u000a    and path should be relative; path will then be relative to that\u000a    directory.\u000a  effective_ids\u000a    If True, access will use the effective uid/gid instead of\u000a    the real uid/gid.\u000a  follow_symlinks\u000a    If False, and the last element of the path is a symbolic link,\u000a    access will examine the symbolic link itself instead of the file\u000a    the link points to.\u000a\u000adir_fd, effective_ids, and follow_symlinks may not be implemented\u000a  on your platform.  If they are unavailable, using them will raise a\u000a  NotImplementedError.\u000a\u000aNote that most operations will use the effective uid/gid, therefore this\u000a  routine can be used in a suid/sgid environment to test if the invoking user\u000a  has the specified access to the path.
p222
sa(dp223
g1
Vchdir
p224
sg3
I01
sg10
L2L
sg4
VChange the current working directory to the specified path.\u000a\u000apath may always be specified as a string.\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.
p225
sa(dp226
g1
Vchmod
p227
sg3
I01
sg10
L2L
sg4
VChange the access permissions of a file.\u000a\u000a  path\u000a    Path to be modified.  May always be specified as a str or bytes.\u000a    On some platforms, path may also be specified as an open file descriptor.\u000a    If this functionality is unavailable, using it raises an exception.\u000a  mode\u000a    Operating-system mode bitfield.\u000a  dir_fd\u000a    If not None, it should be a file descriptor open to a directory,\u000a    and path should be relative; path will then be relative to that\u000a    directory.\u000a  follow_symlinks\u000a    If False, and the last element of the path is a symbolic link,\u000a    chmod will modify the symbolic link itself instead of the file\u000a    the link points to.\u000a\u000aIt is an error to use dir_fd or follow_symlinks when specifying path as\u000a  an open file descriptor.\u000adir_fd and follow_symlinks may not be implemented on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError.
p228
sa(dp229
g1
Vclose
p230
sg3
I01
sg10
L2L
sg4
VClose a file descriptor.
p231
sa(dp232
g1
Vcloserange
p233
sg3
I01
sg10
L2L
sg4
VCloses all file descriptors in [fd_low, fd_high), ignoring errors.
p234
sa(dp235
g1
Vcpu_count
p236
sg3
I01
sg10
L2L
sg4
VReturn the number of CPUs in the system; return None if indeterminable.\u000a\u000aThis number is not equivalent to the number of CPUs the current process can\u000ause.  The number of usable CPUs can be obtained with\u000a``len(os.sched_getaffinity(0))``
p237
sa(dp238
g1
Vdevice_encoding
p239
sg3
I01
sg10
L2L
sg4
VReturn a string describing the encoding of a terminal's file descriptor.\u000a\u000aThe file descriptor must be attached to a terminal.\u000aIf the device is not a terminal, return None.
p240
sa(dp241
g1
Vdup
p242
sg3
I01
sg10
L2L
sg4
VReturn a duplicate of a file descriptor.
p243
sa(dp244
g1
Vdup2
p245
sg3
I01
sg10
L2L
sg4
VDuplicate file descriptor.
p246
sa(dp247
g1
Venviron
p248
sg3
I01
sg10
L5L
sa(dp249
g1
Verror
p250
sg3
I01
sg10
L3L
sg6
(lp251
(dp252
g1
V__cause__
p253
sg3
I01
sg10
L5L
sa(dp254
g1
V__context__
p255
sg3
I01
sg10
L5L
sa(dp256
g1
g13
sg3
I01
sg10
L5L
sa(dp257
g1
g139
sg3
I01
sg10
L5L
sa(dp258
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p259
sa(dp260
g1
g18
sg3
I01
sg10
L5L
sa(dp261
g1
g20
sg3
I01
sg10
L5L
sa(dp262
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p263
sa(dp264
g1
g28
sg3
I01
sg10
L5L
sa(dp265
g1
g30
sg3
I01
sg10
L5L
sa(dp266
g1
g32
sg3
I01
sg10
L5L
sa(dp267
g1
g34
sg3
I01
sg10
L5L
sa(dp268
g1
g36
sg3
I01
sg10
L5L
sa(dp269
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p270
sa(dp271
g1
g41
sg3
I01
sg10
L5L
sa(dp272
g1
g43
sg3
I01
sg10
L5L
sa(dp273
g1
g45
sg3
I01
sg10
L5L
sa(dp274
g1
g47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p275
sa(dp276
g1
g50
sg3
I01
sg10
L2L
sg4
Nsa(dp277
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p278
sa(dp279
g1
g56
sg3
I01
sg10
L5L
sa(dp280
g1
g58
sg3
I01
sg10
L5L
sa(dp281
g1
V__setstate__
p282
sg3
I01
sg10
L2L
sg4
Nsa(dp283
g1
g60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p284
sa(dp285
g1
g63
sg3
I01
sg10
L5L
sa(dp286
g1
g65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p287
sa(dp288
g1
V__suppress_context__
p289
sg3
I01
sg10
L5L
sa(dp290
g1
V__traceback__
p291
sg3
I01
sg10
L5L
sa(dp292
g1
Vargs
p293
sg3
I01
sg10
L5L
sa(dp294
g1
Vcharacters_written
p295
sg3
I01
sg10
L5L
sa(dp296
g1
Verrno
p297
sg3
I01
sg10
L5L
sa(dp298
g1
Vfilename
p299
sg3
I01
sg10
L5L
sa(dp300
g1
Vfilename2
p301
sg3
I01
sg10
L5L
sa(dp302
g1
Vstrerror
p303
sg3
I01
sg10
L5L
sa(dp304
g1
Vwinerror
p305
sg3
I01
sg10
L5L
sa(dp306
g1
Vwith_traceback
p307
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p308
sasg4
VBase class for I/O related errors.
p309
sa(dp310
g1
Vexecv
p311
sg3
I01
sg10
L2L
sg4
VExecute an executable path with arguments, replacing current process.\u000a\u000a  path\u000a    Path of executable file.\u000a  argv\u000a    Tuple or list of strings.
p312
sa(dp313
g1
Vexecve
p314
sg3
I01
sg10
L2L
sg4
VExecute an executable path with arguments, replacing current process.\u000a\u000a  path\u000a    Path of executable file.\u000a  argv\u000a    Tuple or list of strings.\u000a  env\u000a    Dictionary of strings mapping to strings.
p315
sa(dp316
g1
Vfspath
p317
sg3
I01
sg10
L2L
sg4
VReturn the file system path representation of the object.\u000a\u000aIf the object is str or bytes, then allow it to pass through as-is. If the\u000aobject defines __fspath__(), then return the result of that method. All other\u000atypes raise a TypeError.
p318
sa(dp319
g1
Vfstat
p320
sg3
I01
sg10
L2L
sg4
VPerform a stat system call on the given file descriptor.\u000a\u000aLike stat(), but for an open file descriptor.\u000aEquivalent to os.stat(fd).
p321
sa(dp322
g1
Vfsync
p323
sg3
I01
sg10
L2L
sg4
VForce write of fd to disk.
p324
sa(dp325
g1
Vftruncate
p326
sg3
I01
sg10
L2L
sg4
VTruncate a file, specified by file descriptor, to a specific length.
p327
sa(dp328
g1
Vget_handle_inheritable
p329
sg3
I01
sg10
L2L
sg4
VGet the close-on-exe flag of the specified file descriptor.
p330
sa(dp331
g1
Vget_inheritable
p332
sg3
I01
sg10
L2L
sg4
VGet the close-on-exe flag of the specified file descriptor.
p333
sa(dp334
g1
Vget_terminal_size
p335
sg3
I01
sg10
L2L
sg4
VReturn the size of the terminal window as (columns, lines).\u000a\u000aThe optional argument fd (default standard output) specifies\u000awhich file descriptor should be queried.\u000a\u000aIf the file descriptor is not connected to a terminal, an OSError\u000ais thrown.\u000a\u000aThis function will only be defined if an implementation is\u000aavailable for this system.\u000a\u000ashutil.get_terminal_size is the high-level function which should \u000anormally be used, os.get_terminal_size is the low-level implementation.
p336
sa(dp337
g1
Vgetcwd
p338
sg3
I01
sg10
L2L
sg4
VReturn a unicode string representing the current working directory.
p339
sa(dp340
g1
Vgetcwdb
p341
sg3
I01
sg10
L2L
sg4
VReturn a bytes string representing the current working directory.
p342
sa(dp343
g1
Vgetlogin
p344
sg3
I01
sg10
L2L
sg4
VReturn the actual login name.
p345
sa(dp346
g1
Vgetpid
p347
sg3
I01
sg10
L2L
sg4
VReturn the current process id.
p348
sa(dp349
g1
Vgetppid
p350
sg3
I01
sg10
L2L
sg4
VReturn the parent's process id.\u000a\u000aIf the parent process has already exited, Windows machines will still\u000areturn its id; others systems will return the id of the 'init' process (1).
p351
sa(dp352
g1
Visatty
p353
sg3
I01
sg10
L2L
sg4
VReturn True if the fd is connected to a terminal.\u000a\u000aReturn True if the file descriptor is an open file descriptor\u000aconnected to the slave end of a terminal.
p354
sa(dp355
g1
Vkill
p356
sg3
I01
sg10
L2L
sg4
VKill a process with a signal.
p357
sa(dp358
g1
Vlink
p359
sg3
I01
sg10
L2L
sg4
VCreate a hard link to a file.\u000a\u000aIf either src_dir_fd or dst_dir_fd is not None, it should be a file\u000a  descriptor open to a directory, and the respective path string (src or dst)\u000a  should be relative; the path will then be relative to that directory.\u000aIf follow_symlinks is False, and the last element of src is a symbolic\u000a  link, link will create a link to the symbolic link itself instead of the\u000a  file the link points to.\u000asrc_dir_fd, dst_dir_fd, and follow_symlinks may not be implemented on your\u000a  platform.  If they are unavailable, using them will raise a\u000a  NotImplementedError.
p360
sa(dp361
g1
Vlistdir
p362
sg3
I01
sg10
L2L
sg4
VReturn a list containing the names of the files in the directory.\u000a\u000apath can be specified as either str or bytes.  If path is bytes,\u000a  the filenames returned will also be bytes; in all other circumstances\u000a  the filenames returned will be str.\u000aIf path is None, uses the path='.'.\u000aOn some platforms, path may also be specified as an open file descriptor;\u005c\u000a  the file descriptor must refer to a directory.\u000a  If this functionality is unavailable, using it raises NotImplementedError.\u000a\u000aThe list is in arbitrary order.  It does not include the special\u000aentries '.' and '..' even if they are present in the directory.
p363
sa(dp364
g1
Vlseek
p365
sg3
I01
sg10
L2L
sg4
VSet the position of a file descriptor.  Return the new position.\u000a\u000aReturn the new cursor position in number of bytes\u000arelative to the beginning of the file.
p366
sa(dp367
g1
Vlstat
p368
sg3
I01
sg10
L2L
sg4
VPerform a stat system call on the given path, without following symbolic links.\u000a\u000aLike stat(), but do not follow symbolic links.\u000aEquivalent to stat(path, follow_symlinks=False).
p369
sa(dp370
g1
Vmkdir
p371
sg3
I01
sg10
L2L
sg4
VCreate a directory.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.\u000a\u000aThe mode argument is ignored on Windows.
p372
sa(dp373
g1
Vopen
p374
sg3
I01
sg10
L2L
sg4
VOpen a file for low level IO.  Returns a file descriptor (integer).\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p375
sa(dp376
g1
Vpipe
p377
sg3
I01
sg10
L2L
sg4
VCreate a pipe.\u000a\u000aReturns a tuple of two file descriptors:\u000a  (read_fd, write_fd)
p378
sa(dp379
g1
Vputenv
p380
sg3
I01
sg10
L2L
sg4
VChange or add an environment variable.
p381
sa(dp382
g1
Vread
p383
sg3
I01
sg10
L2L
sg4
VRead from a file descriptor.  Returns a bytes object.
p384
sa(dp385
g1
Vreadlink
p386
sg3
I01
sg10
L2L
sg4
Vreadlink(path, *, dir_fd=None) -> path\u000a\u000aReturn a string representing the path to which the symbolic link points.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p387
sa(dp388
g1
Vremove
p389
sg3
I01
sg10
L2L
sg4
VRemove a file (same as unlink()).\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p390
sa(dp391
g1
Vrename
p392
sg3
I01
sg10
L2L
sg4
VRename a file or directory.\u000a\u000aIf either src_dir_fd or dst_dir_fd is not None, it should be a file\u000a  descriptor open to a directory, and the respective path string (src or dst)\u000a  should be relative; the path will then be relative to that directory.\u000asrc_dir_fd and dst_dir_fd, may not be implemented on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError.
p393
sa(dp394
g1
Vreplace
p395
sg3
I01
sg10
L2L
sg4
VRename a file or directory, overwriting the destination.\u000a\u000aIf either src_dir_fd or dst_dir_fd is not None, it should be a file\u000a  descriptor open to a directory, and the respective path string (src or dst)\u000a  should be relative; the path will then be relative to that directory.\u000asrc_dir_fd and dst_dir_fd, may not be implemented on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError."
p396
sa(dp397
g1
Vrmdir
p398
sg3
I01
sg10
L2L
sg4
VRemove a directory.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p399
sa(dp400
g1
Vscandir
p401
sg3
I01
sg10
L2L
sg4
Vscandir(path='.') -> iterator of DirEntry objects for given path
p402
sa(dp403
g1
Vset_handle_inheritable
p404
sg3
I01
sg10
L2L
sg4
VSet the inheritable flag of the specified handle.
p405
sa(dp406
g1
Vset_inheritable
p407
sg3
I01
sg10
L2L
sg4
VSet the inheritable flag of the specified file descriptor.
p408
sa(dp409
g1
Vspawnv
p410
sg3
I01
sg10
L2L
sg4
VExecute the program specified by path in a new process.\u000a\u000a  mode\u000a    Mode of process creation.\u000a  path\u000a    Path of executable file.\u000a  argv\u000a    Tuple or list of strings.
p411
sa(dp412
g1
Vspawnve
p413
sg3
I01
sg10
L2L
sg4
VExecute the program specified by path in a new process.\u000a\u000a  mode\u000a    Mode of process creation.\u000a  path\u000a    Path of executable file.\u000a  argv\u000a    Tuple or list of strings.\u000a  env\u000a    Dictionary of strings mapping to strings.
p414
sa(dp415
g1
Vstartfile
p416
sg3
I01
sg10
L2L
sg4
Vstartfile(filepath [, operation])\u000a\u000aStart a file with its associated application.\u000a\u000aWhen "operation" is not specified or "open", this acts like\u000adouble-clicking the file in Explorer, or giving the file name as an\u000aargument to the DOS "start" command: the file is opened with whatever\u000aapplication (if any) its extension is associated.\u000aWhen another "operation" is given, it specifies what should be done with\u000athe file.  A typical operation is "print".\u000a\u000astartfile returns as soon as the associated application is launched.\u000aThere is no option to wait for the application to close, and no way\u000ato retrieve the application's exit status.\u000a\u000aThe filepath is relative to the current directory.  If you want to use\u000aan absolute path, make sure the first character is not a slash ("/");\u000athe underlying Win32 ShellExecute function doesn't work if it is.
p417
sa(dp418
g1
g83
sg3
I01
sg10
L2L
sg4
VPerform a stat system call on the given path.\u000a\u000a  path\u000a    Path to be examined; can be string, bytes, path-like object or\u000a    open-file-descriptor int.\u000a  dir_fd\u000a    If not None, it should be a file descriptor open to a directory,\u000a    and path should be a relative string; path will then be relative to\u000a    that directory.\u000a  follow_symlinks\u000a    If False, and the last element of the path is a symbolic link,\u000a    stat will examine the symbolic link itself instead of the file\u000a    the link points to.\u000a\u000adir_fd and follow_symlinks may not be implemented\u000a  on your platform.  If they are unavailable, using them will raise a\u000a  NotImplementedError.\u000a\u000aIt's an error to use dir_fd or follow_symlinks when specifying path as\u000a  an open file descriptor.
p419
sa(dp420
g1
Vstat_float_times
p421
sg3
I01
sg10
L2L
sg4
Vstat_float_times([newval]) -> oldval\u000a\u000aDetermine whether os.[lf]stat represents time stamps as float objects.\u000a\u000aIf value is True, future calls to stat() return floats; if it is False,\u000afuture calls return ints.\u000aIf value is omitted, return the current setting.\u000a
p422
sa(dp423
g1
Vstat_result
p424
sg3
I01
sg10
L3L
sg6
(lp425
(dp426
g1
V__add__
p427
sg3
I01
sg10
L5L
sa(dp428
g1
V__contains__
p429
sg3
I01
sg10
L5L
sa(dp430
g1
g13
sg3
I01
sg10
L5L
sa(dp431
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p432
sa(dp433
g1
g18
sg3
I01
sg10
L5L
sa(dp434
g1
g20
sg3
I01
sg10
L5L
sa(dp435
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p436
sa(dp437
g1
g28
sg3
I01
sg10
L5L
sa(dp438
g1
g30
sg3
I01
sg10
L5L
sa(dp439
g1
V__getitem__
p440
sg3
I01
sg10
L5L
sa(dp441
g1
V__getnewargs__
p442
sg3
I01
sg10
L2L
sg4
Nsa(dp443
g1
g32
sg3
I01
sg10
L5L
sa(dp444
g1
g34
sg3
I01
sg10
L5L
sa(dp445
g1
g36
sg3
I01
sg10
L5L
sa(dp446
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p447
sa(dp448
g1
V__iter__
p449
sg3
I01
sg10
L5L
sa(dp450
g1
g41
sg3
I01
sg10
L5L
sa(dp451
g1
V__len__
p452
sg3
I01
sg10
L5L
sa(dp453
g1
g43
sg3
I01
sg10
L5L
sa(dp454
g1
V__mul__
p455
sg3
I01
sg10
L5L
sa(dp456
g1
g45
sg3
I01
sg10
L5L
sa(dp457
g1
g47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p458
sa(dp459
g1
g50
sg3
I01
sg10
L2L
sg4
Nsa(dp460
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p461
sa(dp462
g1
g56
sg3
I01
sg10
L5L
sa(dp463
g1
V__rmul__
p464
sg3
I01
sg10
L5L
sa(dp465
g1
g58
sg3
I01
sg10
L5L
sa(dp466
g1
g60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p467
sa(dp468
g1
g63
sg3
I01
sg10
L5L
sa(dp469
g1
g65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p470
sa(dp471
g1
Vcount
p472
sg3
I01
sg10
L2L
sg4
VT.count(value) -> integer -- return number of occurrences of value
p473
sa(dp474
g1
Vindex
p475
sg3
I01
sg10
L2L
sg4
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p476
sa(dp477
g1
Vn_fields
p478
sg3
I01
sg10
L5L
sa(dp479
g1
Vn_sequence_fields
p480
sg3
I01
sg10
L5L
sa(dp481
g1
Vn_unnamed_fields
p482
sg3
I01
sg10
L5L
sa(dp483
g1
Vst_atime
p484
sg3
I01
sg10
L5L
sa(dp485
g1
Vst_atime_ns
p486
sg3
I01
sg10
L5L
sa(dp487
g1
Vst_ctime
p488
sg3
I01
sg10
L5L
sa(dp489
g1
Vst_ctime_ns
p490
sg3
I01
sg10
L5L
sa(dp491
g1
Vst_dev
p492
sg3
I01
sg10
L5L
sa(dp493
g1
Vst_file_attributes
p494
sg3
I01
sg10
L5L
sa(dp495
g1
Vst_gid
p496
sg3
I01
sg10
L5L
sa(dp497
g1
Vst_ino
p498
sg3
I01
sg10
L5L
sa(dp499
g1
Vst_mode
p500
sg3
I01
sg10
L5L
sa(dp501
g1
Vst_mtime
p502
sg3
I01
sg10
L5L
sa(dp503
g1
Vst_mtime_ns
p504
sg3
I01
sg10
L5L
sa(dp505
g1
Vst_nlink
p506
sg3
I01
sg10
L5L
sa(dp507
g1
Vst_size
p508
sg3
I01
sg10
L5L
sa(dp509
g1
Vst_uid
p510
sg3
I01
sg10
L5L
sasg4
Vstat_result: Result from stat, fstat, or lstat.\u000a\u000aThis object may be accessed either as a tuple of\u000a  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)\u000aor via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.\u000a\u000aPosix/windows: If your platform supports st_blksize, st_blocks, st_rdev,\u000aor st_flags, they are available as attributes only.\u000a\u000aSee os.stat for more information.
p511
sa(dp512
g1
Vstatvfs_result
p513
sg3
I01
sg10
L3L
sg6
(lp514
(dp515
g1
g427
sg3
I01
sg10
L5L
sa(dp516
g1
g429
sg3
I01
sg10
L5L
sa(dp517
g1
g13
sg3
I01
sg10
L5L
sa(dp518
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p519
sa(dp520
g1
g18
sg3
I01
sg10
L5L
sa(dp521
g1
g20
sg3
I01
sg10
L5L
sa(dp522
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p523
sa(dp524
g1
g28
sg3
I01
sg10
L5L
sa(dp525
g1
g30
sg3
I01
sg10
L5L
sa(dp526
g1
g440
sg3
I01
sg10
L5L
sa(dp527
g1
g442
sg3
I01
sg10
L2L
sg4
Nsa(dp528
g1
g32
sg3
I01
sg10
L5L
sa(dp529
g1
g34
sg3
I01
sg10
L5L
sa(dp530
g1
g36
sg3
I01
sg10
L5L
sa(dp531
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p532
sa(dp533
g1
g449
sg3
I01
sg10
L5L
sa(dp534
g1
g41
sg3
I01
sg10
L5L
sa(dp535
g1
g452
sg3
I01
sg10
L5L
sa(dp536
g1
g43
sg3
I01
sg10
L5L
sa(dp537
g1
g455
sg3
I01
sg10
L5L
sa(dp538
g1
g45
sg3
I01
sg10
L5L
sa(dp539
g1
g47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p540
sa(dp541
g1
g50
sg3
I01
sg10
L2L
sg4
Nsa(dp542
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p543
sa(dp544
g1
g56
sg3
I01
sg10
L5L
sa(dp545
g1
g464
sg3
I01
sg10
L5L
sa(dp546
g1
g58
sg3
I01
sg10
L5L
sa(dp547
g1
g60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p548
sa(dp549
g1
g63
sg3
I01
sg10
L5L
sa(dp550
g1
g65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p551
sa(dp552
g1
g472
sg3
I01
sg10
L2L
sg4
VT.count(value) -> integer -- return number of occurrences of value
p553
sa(dp554
g1
Vf_bavail
p555
sg3
I01
sg10
L5L
sa(dp556
g1
Vf_bfree
p557
sg3
I01
sg10
L5L
sa(dp558
g1
Vf_blocks
p559
sg3
I01
sg10
L5L
sa(dp560
g1
Vf_bsize
p561
sg3
I01
sg10
L5L
sa(dp562
g1
Vf_favail
p563
sg3
I01
sg10
L5L
sa(dp564
g1
Vf_ffree
p565
sg3
I01
sg10
L5L
sa(dp566
g1
Vf_files
p567
sg3
I01
sg10
L5L
sa(dp568
g1
Vf_flag
p569
sg3
I01
sg10
L5L
sa(dp570
g1
Vf_frsize
p571
sg3
I01
sg10
L5L
sa(dp572
g1
Vf_namemax
p573
sg3
I01
sg10
L5L
sa(dp574
g1
g475
sg3
I01
sg10
L2L
sg4
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p575
sa(dp576
g1
g478
sg3
I01
sg10
L5L
sa(dp577
g1
g480
sg3
I01
sg10
L5L
sa(dp578
g1
g482
sg3
I01
sg10
L5L
sasg4
Vstatvfs_result: Result from statvfs or fstatvfs.\u000a\u000aThis object may be accessed either as a tuple of\u000a  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),\u000aor via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.\u000a\u000aSee os.statvfs for more information.
p579
sa(dp580
g1
g303
sg3
I01
sg10
L2L
sg4
VTranslate an error code to a message string.
p581
sa(dp582
g1
Vsymlink
p583
sg3
I01
sg10
L2L
sg4
VCreate a symbolic link pointing to src named dst.\u000a\u000atarget_is_directory is required on Windows if the target is to be\u000a  interpreted as a directory.  (On Windows, symlink requires\u000a  Windows 6.0 or greater, and raises a NotImplementedError otherwise.)\u000a  target_is_directory is ignored on non-Windows platforms.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p584
sa(dp585
g1
Vsystem
p586
sg3
I01
sg10
L2L
sg4
VExecute the command in a subshell.
p587
sa(dp588
g1
Vterminal_size
p589
sg3
I01
sg10
L3L
sg6
(lp590
(dp591
g1
g427
sg3
I01
sg10
L5L
sa(dp592
g1
g429
sg3
I01
sg10
L5L
sa(dp593
g1
g13
sg3
I01
sg10
L5L
sa(dp594
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p595
sa(dp596
g1
g18
sg3
I01
sg10
L5L
sa(dp597
g1
g20
sg3
I01
sg10
L5L
sa(dp598
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p599
sa(dp600
g1
g28
sg3
I01
sg10
L5L
sa(dp601
g1
g30
sg3
I01
sg10
L5L
sa(dp602
g1
g440
sg3
I01
sg10
L5L
sa(dp603
g1
g442
sg3
I01
sg10
L2L
sg4
Nsa(dp604
g1
g32
sg3
I01
sg10
L5L
sa(dp605
g1
g34
sg3
I01
sg10
L5L
sa(dp606
g1
g36
sg3
I01
sg10
L5L
sa(dp607
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p608
sa(dp609
g1
g449
sg3
I01
sg10
L5L
sa(dp610
g1
g41
sg3
I01
sg10
L5L
sa(dp611
g1
g452
sg3
I01
sg10
L5L
sa(dp612
g1
g43
sg3
I01
sg10
L5L
sa(dp613
g1
g455
sg3
I01
sg10
L5L
sa(dp614
g1
g45
sg3
I01
sg10
L5L
sa(dp615
g1
g47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p616
sa(dp617
g1
g50
sg3
I01
sg10
L2L
sg4
Nsa(dp618
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p619
sa(dp620
g1
g56
sg3
I01
sg10
L5L
sa(dp621
g1
g464
sg3
I01
sg10
L5L
sa(dp622
g1
g58
sg3
I01
sg10
L5L
sa(dp623
g1
g60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p624
sa(dp625
g1
g63
sg3
I01
sg10
L5L
sa(dp626
g1
g65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p627
sa(dp628
g1
Vcolumns
p629
sg3
I01
sg10
L5L
sa(dp630
g1
g472
sg3
I01
sg10
L2L
sg4
VT.count(value) -> integer -- return number of occurrences of value
p631
sa(dp632
g1
g475
sg3
I01
sg10
L2L
sg4
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p633
sa(dp634
g1
Vlines
p635
sg3
I01
sg10
L5L
sa(dp636
g1
g478
sg3
I01
sg10
L5L
sa(dp637
g1
g480
sg3
I01
sg10
L5L
sa(dp638
g1
g482
sg3
I01
sg10
L5L
sasg4
VA tuple of (columns, lines) for holding terminal window size
p639
sa(dp640
g1
Vtimes
p641
sg3
I01
sg10
L2L
sg4
VReturn a collection containing process timing information.\u000a\u000aThe object returned behaves like a named tuple with these fields:\u000a  (utime, stime, cutime, cstime, elapsed_time)\u000aAll fields are floating point numbers.
p642
sa(dp643
g1
Vtimes_result
p644
sg3
I01
sg10
L3L
sg6
(lp645
(dp646
g1
g427
sg3
I01
sg10
L5L
sa(dp647
g1
g429
sg3
I01
sg10
L5L
sa(dp648
g1
g13
sg3
I01
sg10
L5L
sa(dp649
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p650
sa(dp651
g1
g18
sg3
I01
sg10
L5L
sa(dp652
g1
g20
sg3
I01
sg10
L5L
sa(dp653
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p654
sa(dp655
g1
g28
sg3
I01
sg10
L5L
sa(dp656
g1
g30
sg3
I01
sg10
L5L
sa(dp657
g1
g440
sg3
I01
sg10
L5L
sa(dp658
g1
g442
sg3
I01
sg10
L2L
sg4
Nsa(dp659
g1
g32
sg3
I01
sg10
L5L
sa(dp660
g1
g34
sg3
I01
sg10
L5L
sa(dp661
g1
g36
sg3
I01
sg10
L5L
sa(dp662
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p663
sa(dp664
g1
g449
sg3
I01
sg10
L5L
sa(dp665
g1
g41
sg3
I01
sg10
L5L
sa(dp666
g1
g452
sg3
I01
sg10
L5L
sa(dp667
g1
g43
sg3
I01
sg10
L5L
sa(dp668
g1
g455
sg3
I01
sg10
L5L
sa(dp669
g1
g45
sg3
I01
sg10
L5L
sa(dp670
g1
g47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p671
sa(dp672
g1
g50
sg3
I01
sg10
L2L
sg4
Nsa(dp673
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p674
sa(dp675
g1
g56
sg3
I01
sg10
L5L
sa(dp676
g1
g464
sg3
I01
sg10
L5L
sa(dp677
g1
g58
sg3
I01
sg10
L5L
sa(dp678
g1
g60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p679
sa(dp680
g1
g63
sg3
I01
sg10
L5L
sa(dp681
g1
g65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p682
sa(dp683
g1
Vchildren_system
p684
sg3
I01
sg10
L5L
sa(dp685
g1
Vchildren_user
p686
sg3
I01
sg10
L5L
sa(dp687
g1
g472
sg3
I01
sg10
L2L
sg4
VT.count(value) -> integer -- return number of occurrences of value
p688
sa(dp689
g1
Velapsed
p690
sg3
I01
sg10
L5L
sa(dp691
g1
g475
sg3
I01
sg10
L2L
sg4
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p692
sa(dp693
g1
g478
sg3
I01
sg10
L5L
sa(dp694
g1
g480
sg3
I01
sg10
L5L
sa(dp695
g1
g482
sg3
I01
sg10
L5L
sa(dp696
g1
g586
sg3
I01
sg10
L5L
sa(dp697
g1
Vuser
p698
sg3
I01
sg10
L5L
sasg4
Vtimes_result: Result from os.times().\u000a\u000aThis object may be accessed either as a tuple of\u000a  (user, system, children_user, children_system, elapsed),\u000aor via the attributes user, system, children_user, children_system,\u000aand elapsed.\u000a\u000aSee os.times for more information.
p699
sa(dp700
g1
Vtruncate
p701
sg3
I01
sg10
L2L
sg4
VTruncate a file, specified by path, to a specific length.\u000a\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.
p702
sa(dp703
g1
Vumask
p704
sg3
I01
sg10
L2L
sg4
VSet the current numeric umask and return the previous umask.
p705
sa(dp706
g1
Vuname_result
p707
sg3
I01
sg10
L3L
sg6
(lp708
(dp709
g1
g427
sg3
I01
sg10
L5L
sa(dp710
g1
g429
sg3
I01
sg10
L5L
sa(dp711
g1
g13
sg3
I01
sg10
L5L
sa(dp712
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p713
sa(dp714
g1
g18
sg3
I01
sg10
L5L
sa(dp715
g1
g20
sg3
I01
sg10
L5L
sa(dp716
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p717
sa(dp718
g1
g28
sg3
I01
sg10
L5L
sa(dp719
g1
g30
sg3
I01
sg10
L5L
sa(dp720
g1
g440
sg3
I01
sg10
L5L
sa(dp721
g1
g442
sg3
I01
sg10
L2L
sg4
Nsa(dp722
g1
g32
sg3
I01
sg10
L5L
sa(dp723
g1
g34
sg3
I01
sg10
L5L
sa(dp724
g1
g36
sg3
I01
sg10
L5L
sa(dp725
g1
g38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p726
sa(dp727
g1
g449
sg3
I01
sg10
L5L
sa(dp728
g1
g41
sg3
I01
sg10
L5L
sa(dp729
g1
g452
sg3
I01
sg10
L5L
sa(dp730
g1
g43
sg3
I01
sg10
L5L
sa(dp731
g1
g455
sg3
I01
sg10
L5L
sa(dp732
g1
g45
sg3
I01
sg10
L5L
sa(dp733
g1
g47
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p734
sa(dp735
g1
g50
sg3
I01
sg10
L2L
sg4
Nsa(dp736
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p737
sa(dp738
g1
g56
sg3
I01
sg10
L5L
sa(dp739
g1
g464
sg3
I01
sg10
L5L
sa(dp740
g1
g58
sg3
I01
sg10
L5L
sa(dp741
g1
g60
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p742
sa(dp743
g1
g63
sg3
I01
sg10
L5L
sa(dp744
g1
g65
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p745
sa(dp746
g1
g472
sg3
I01
sg10
L2L
sg4
VT.count(value) -> integer -- return number of occurrences of value
p747
sa(dp748
g1
g475
sg3
I01
sg10
L2L
sg4
VT.index(value, [start, [stop]]) -> integer -- return first index of value.\u000aRaises ValueError if the value is not present.
p749
sa(dp750
g1
Vmachine
p751
sg3
I01
sg10
L5L
sa(dp752
g1
g478
sg3
I01
sg10
L5L
sa(dp753
g1
g480
sg3
I01
sg10
L5L
sa(dp754
g1
g482
sg3
I01
sg10
L5L
sa(dp755
g1
Vnodename
p756
sg3
I01
sg10
L5L
sa(dp757
g1
Vrelease
p758
sg3
I01
sg10
L5L
sa(dp759
g1
Vsysname
p760
sg3
I01
sg10
L5L
sa(dp761
g1
Vversion
p762
sg3
I01
sg10
L5L
sasg4
Vuname_result: Result from os.uname().\u000a\u000aThis object may be accessed either as a tuple of\u000a  (sysname, nodename, release, version, machine),\u000aor via the attributes sysname, nodename, release, version, and machine.\u000a\u000aSee os.uname for more information.
p763
sa(dp764
g1
Vunlink
p765
sg3
I01
sg10
L2L
sg4
VRemove a file (same as remove()).\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000adir_fd may not be implemented on your platform.\u000a  If it is unavailable, using it will raise a NotImplementedError.
p766
sa(dp767
g1
Vurandom
p768
sg3
I01
sg10
L2L
sg4
VReturn a bytes object containing random bytes suitable for cryptographic use.
p769
sa(dp770
g1
Vutime
p771
sg3
I01
sg10
L2L
sg4
VSet the access and modified time of path.\u000a\u000apath may always be specified as a string.\u000aOn some platforms, path may also be specified as an open file descriptor.\u000a  If this functionality is unavailable, using it raises an exception.\u000a\u000aIf times is not None, it must be a tuple (atime, mtime);\u000a    atime and mtime should be expressed as float seconds since the epoch.\u000aIf ns is specified, it must be a tuple (atime_ns, mtime_ns);\u000a    atime_ns and mtime_ns should be expressed as integer nanoseconds\u000a    since the epoch.\u000aIf times is None and ns is unspecified, utime uses the current time.\u000aSpecifying tuples for both times and ns is an error.\u000a\u000aIf dir_fd is not None, it should be a file descriptor open to a directory,\u000a  and path should be relative; path will then be relative to that directory.\u000aIf follow_symlinks is False, and the last element of the path is a symbolic\u000a  link, utime will modify the symbolic link itself instead of the file the\u000a  link points to.\u000aIt is an error to use dir_fd or follow_symlinks when specifying path\u000a  as an open file descriptor.\u000adir_fd and follow_symlinks may not be available on your platform.\u000a  If they are unavailable, using them will raise a NotImplementedError.
p772
sa(dp773
g1
Vwaitpid
p774
sg3
I01
sg10
L2L
sg4
VWait for completion of a given process.\u000a\u000aReturns a tuple of information regarding the process:\u000a    (pid, status << 8)\u000a\u000aThe options argument is ignored on Windows.
p775
sa(dp776
g1
Vwrite
p777
sg3
I01
sg10
L2L
sg4
VWrite a bytes object to a file descriptor.
p778
sasg10
L1L
s.