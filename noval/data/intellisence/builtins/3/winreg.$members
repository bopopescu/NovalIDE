(dp0
Vname
p1
Vwinreg
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module provides access to the Windows registry API.\u000a\u000aFunctions:\u000a\u000aCloseKey() - Closes a registry key.\u000aConnectRegistry() - Establishes a connection to a predefined registry handle\u000a                    on another computer.\u000aCreateKey() - Creates the specified key, or opens it if it already exists.\u000aDeleteKey() - Deletes the specified key.\u000aDeleteValue() - Removes a named value from the specified registry key.\u000aEnumKey() - Enumerates subkeys of the specified open registry key.\u000aEnumValue() - Enumerates values of the specified open registry key.\u000aExpandEnvironmentStrings() - Expand the env strings in a REG_EXPAND_SZ\u000a                             string.\u000aFlushKey() - Writes all the attributes of the specified key to the registry.\u000aLoadKey() - Creates a subkey under HKEY_USER or HKEY_LOCAL_MACHINE and\u000a            stores registration information from a specified file into that\u000a            subkey.\u000aOpenKey() - Opens the specified key.\u000aOpenKeyEx() - Alias of OpenKey().\u000aQueryValue() - Retrieves the value associated with the unnamed value for a\u000a               specified key in the registry.\u000aQueryValueEx() - Retrieves the type and data for a specified value name\u000a                 associated with an open registry key.\u000aQueryInfoKey() - Returns information about the specified key.\u000aSaveKey() - Saves the specified key, and all its subkeys a file.\u000aSetValue() - Associates a value with a specified key.\u000aSetValueEx() - Stores data in the value field of an open registry key.\u000a\u000aSpecial objects:\u000a\u000aHKEYType -- type object for HKEY objects\u000aerror -- exception raised for Win32 errors\u000a\u000aInteger constants:\u000aMany constants are defined - see the documentation for each function\u000ato see what constants are used, and where.
p5
sVchilds
p6
(lp7
(dp8
g1
VCloseKey
p9
sg3
I01
sVtype
p10
L2L
sg4
VCloses a previously opened registry key.\u000a\u000a  hkey\u000a    A previously opened key.\u000a\u000aNote that if the key is not closed using this method, it will be\u000aclosed when the hkey object is destroyed by Python.
p11
sa(dp12
g1
VConnectRegistry
p13
sg3
I01
sg10
L2L
sg4
VEstablishes a connection to the registry on another computer.\u000a\u000a  computer_name\u000a    The name of the remote computer, of the form r"\u005c\u005ccomputername".  If\u000a    None, the local computer is used.\u000a  key\u000a    The predefined key to connect to.\u000a\u000aThe return value is the handle of the opened key.\u000aIf the function fails, an OSError exception is raised.
p14
sa(dp15
g1
VCreateKey
p16
sg3
I01
sg10
L2L
sg4
VCreates or opens the specified key.\u000a\u000a  key\u000a    An already open key, or one of the predefined HKEY_* constants.\u000a  sub_key\u000a    The name of the key this method opens or creates.\u000a\u000aIf key is one of the predefined keys, sub_key may be None. In that case,\u000athe handle returned is the same key handle passed in to the function.\u000a\u000aIf the key already exists, this function opens the existing key.\u000a\u000aThe return value is the handle of the opened key.\u000aIf the function fails, an OSError exception is raised.
p17
sa(dp18
g1
VCreateKeyEx
p19
sg3
I01
sg10
L2L
sg4
VCreates or opens the specified key.\u000a\u000a  key\u000a    An already open key, or one of the predefined HKEY_* constants.\u000a  sub_key\u000a    The name of the key this method opens or creates.\u000a  reserved\u000a    A reserved integer, and must be zero.  Default is zero.\u000a  access\u000a    An integer that specifies an access mask that describes the\u000a    desired security access for the key. Default is KEY_WRITE.\u000a\u000aIf key is one of the predefined keys, sub_key may be None. In that case,\u000athe handle returned is the same key handle passed in to the function.\u000a\u000aIf the key already exists, this function opens the existing key\u000a\u000aThe return value is the handle of the opened key.\u000aIf the function fails, an OSError exception is raised.
p20
sa(dp21
g1
VDeleteKey
p22
sg3
I01
sg10
L2L
sg4
VDeletes the specified key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  sub_key\u000a    A string that must be the name of a subkey of the key identified by\u000a    the key parameter. This value must not be None, and the key may not\u000a    have subkeys.\u000a\u000aThis method can not delete keys with subkeys.\u000a\u000aIf the function succeeds, the entire key, including all of its values,\u000ais removed.  If the function fails, an OSError exception is raised.
p23
sa(dp24
g1
VDeleteKeyEx
p25
sg3
I01
sg10
L2L
sg4
VDeletes the specified key (64-bit OS only).\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  sub_key\u000a    A string that must be the name of a subkey of the key identified by\u000a    the key parameter. This value must not be None, and the key may not\u000a    have subkeys.\u000a  access\u000a    An integer that specifies an access mask that describes the\u000a    desired security access for the key. Default is KEY_WOW64_64KEY.\u000a  reserved\u000a    A reserved integer, and must be zero.  Default is zero.\u000a\u000aThis method can not delete keys with subkeys.\u000a\u000aIf the function succeeds, the entire key, including all of its values,\u000ais removed.  If the function fails, an OSError exception is raised.\u000aOn unsupported Windows versions, NotImplementedError is raised.
p26
sa(dp27
g1
VDeleteValue
p28
sg3
I01
sg10
L2L
sg4
VRemoves a named value from a registry key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  value\u000a    A string that identifies the value to remove.
p29
sa(dp30
g1
VDisableReflectionKey
p31
sg3
I01
sg10
L2L
sg4
VDisables registry reflection for 32bit processes running on a 64bit OS.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a\u000aWill generally raise NotImplemented if executed on a 32bit OS.\u000a\u000aIf the key is not on the reflection list, the function succeeds but has\u000ano effect.  Disabling reflection for a key does not affect reflection\u000aof any subkeys.
p32
sa(dp33
g1
VEnableReflectionKey
p34
sg3
I01
sg10
L2L
sg4
VRestores registry reflection for the specified disabled key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a\u000aWill generally raise NotImplemented if executed on a 32bit OS.\u000aRestoring reflection for a key does not affect reflection of any\u000asubkeys.
p35
sa(dp36
g1
VEnumKey
p37
sg3
I01
sg10
L2L
sg4
VEnumerates subkeys of an open registry key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  index\u000a    An integer that identifies the index of the key to retrieve.\u000a\u000aThe function retrieves the name of one subkey each time it is called.\u000aIt is typically called repeatedly until an OSError exception is\u000araised, indicating no more values are available.
p38
sa(dp39
g1
VEnumValue
p40
sg3
I01
sg10
L2L
sg4
VEnumerates values of an open registry key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  index\u000a    An integer that identifies the index of the value to retrieve.\u000a\u000aThe function retrieves the name of one subkey each time it is called.\u000aIt is typically called repeatedly, until an OSError exception\u000ais raised, indicating no more values.\u000a\u000aThe result is a tuple of 3 items:\u000a  value_name\u000a    A string that identifies the value.\u000a  value_data\u000a    An object that holds the value data, and whose type depends\u000a    on the underlying registry type.\u000a  data_type\u000a    An integer that identifies the type of the value data.
p41
sa(dp42
g1
VExpandEnvironmentStrings
p43
sg3
I01
sg10
L2L
sg4
VExpand environment vars.
p44
sa(dp45
g1
VFlushKey
p46
sg3
I01
sg10
L2L
sg4
VWrites all the attributes of a key to the registry.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a\u000aIt is not necessary to call FlushKey to change a key.  Registry changes\u000aare flushed to disk by the registry using its lazy flusher.  Registry\u000achanges are also flushed to disk at system shutdown.  Unlike\u000aCloseKey(), the FlushKey() method returns only when all the data has\u000abeen written to the registry.\u000a\u000aAn application should only call FlushKey() if it requires absolute\u000acertainty that registry changes are on disk.  If you don't know whether\u000aa FlushKey() call is required, it probably isn't.
p47
sa(dp48
g1
VHKEYType
p49
sg3
I01
sg10
L3L
sg6
(lp50
(dp51
g1
VClose
p52
sg3
I01
sg10
L2L
sg4
VCloses the underlying Windows handle.\u000a\u000aIf the handle is already closed, no error is raised.
p53
sa(dp54
g1
VDetach
p55
sg3
I01
sg10
L2L
sg4
VDetaches the Windows handle from the handle object.\u000a\u000aThe result is the value of the handle before it is detached.  If the\u000ahandle is already detached, this will return zero.\u000a\u000aAfter calling this function, the handle is effectively invalidated,\u000abut the handle is not closed.  You would call this function when you\u000aneed the underlying win32 handle to exist beyond the lifetime of the\u000ahandle object.
p56
sa(dp57
g1
V__abs__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__add__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__and__
p62
sg3
I01
sg10
L5L
sa(dp63
g1
V__bool__
p64
sg3
I01
sg10
L5L
sa(dp65
g1
V__delattr__
p66
sg3
I01
sg10
L5L
sa(dp67
g1
V__dir__
p68
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p69
sa(dp70
g1
V__divmod__
p71
sg3
I01
sg10
L5L
sa(dp72
g1
V__doc__
p73
sg3
I01
sg10
L5L
sa(dp74
g1
V__enter__
p75
sg3
I01
sg10
L2L
sg4
Nsa(dp76
g1
V__eq__
p77
sg3
I01
sg10
L5L
sa(dp78
g1
V__exit__
p79
sg3
I01
sg10
L2L
sg4
Nsa(dp80
g1
V__float__
p81
sg3
I01
sg10
L5L
sa(dp82
g1
V__format__
p83
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p84
sa(dp85
g1
V__ge__
p86
sg3
I01
sg10
L5L
sa(dp87
g1
V__getattribute__
p88
sg3
I01
sg10
L5L
sa(dp89
g1
V__gt__
p90
sg3
I01
sg10
L5L
sa(dp91
g1
V__hash__
p92
sg3
I01
sg10
L5L
sa(dp93
g1
V__init__
p94
sg3
I01
sg10
L5L
sa(dp95
g1
V__init_subclass__
p96
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p97
sa(dp98
g1
V__int__
p99
sg3
I01
sg10
L5L
sa(dp100
g1
V__invert__
p101
sg3
I01
sg10
L5L
sa(dp102
g1
V__le__
p103
sg3
I01
sg10
L5L
sa(dp104
g1
V__lshift__
p105
sg3
I01
sg10
L5L
sa(dp106
g1
V__lt__
p107
sg3
I01
sg10
L5L
sa(dp108
g1
V__mod__
p109
sg3
I01
sg10
L5L
sa(dp110
g1
V__mul__
p111
sg3
I01
sg10
L5L
sa(dp112
g1
V__ne__
p113
sg3
I01
sg10
L5L
sa(dp114
g1
V__neg__
p115
sg3
I01
sg10
L5L
sa(dp116
g1
V__new__
p117
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p118
sa(dp119
g1
V__or__
p120
sg3
I01
sg10
L5L
sa(dp121
g1
V__pos__
p122
sg3
I01
sg10
L5L
sa(dp123
g1
V__pow__
p124
sg3
I01
sg10
L5L
sa(dp125
g1
V__radd__
p126
sg3
I01
sg10
L5L
sa(dp127
g1
V__rand__
p128
sg3
I01
sg10
L5L
sa(dp129
g1
V__rdivmod__
p130
sg3
I01
sg10
L5L
sa(dp131
g1
V__reduce__
p132
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p133
sa(dp134
g1
V__reduce_ex__
p135
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p136
sa(dp137
g1
V__repr__
p138
sg3
I01
sg10
L5L
sa(dp139
g1
V__rlshift__
p140
sg3
I01
sg10
L5L
sa(dp141
g1
V__rmod__
p142
sg3
I01
sg10
L5L
sa(dp143
g1
V__rmul__
p144
sg3
I01
sg10
L5L
sa(dp145
g1
V__ror__
p146
sg3
I01
sg10
L5L
sa(dp147
g1
V__rpow__
p148
sg3
I01
sg10
L5L
sa(dp149
g1
V__rrshift__
p150
sg3
I01
sg10
L5L
sa(dp151
g1
V__rshift__
p152
sg3
I01
sg10
L5L
sa(dp153
g1
V__rsub__
p154
sg3
I01
sg10
L5L
sa(dp155
g1
V__rxor__
p156
sg3
I01
sg10
L5L
sa(dp157
g1
V__setattr__
p158
sg3
I01
sg10
L5L
sa(dp159
g1
V__sizeof__
p160
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p161
sa(dp162
g1
V__str__
p163
sg3
I01
sg10
L5L
sa(dp164
g1
V__sub__
p165
sg3
I01
sg10
L5L
sa(dp166
g1
V__subclasshook__
p167
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p168
sa(dp169
g1
V__xor__
p170
sg3
I01
sg10
L5L
sa(dp171
g1
Vhandle
p172
sg3
I01
sg10
L5L
sasg4
VPyHKEY Object - A Python object, representing a win32 registry key.\u000a\u000aThis object wraps a Windows HKEY object, automatically closing it when\u000athe object is destroyed.  To guarantee cleanup, you can call either\u000athe Close() method on the PyHKEY, or the CloseKey() method.\u000a\u000aAll functions which accept a handle object also accept an integer - \u000ahowever, use of the handle object is encouraged.\u000a\u000aFunctions:\u000aClose() - Closes the underlying handle.\u000aDetach() - Returns the integer Win32 handle, detaching it from the object\u000a\u000aProperties:\u000ahandle - The integer Win32 handle.\u000a\u000aOperations:\u000a__bool__ - Handles with an open object return true, otherwise false.\u000a__int__ - Converting a handle to an integer returns the Win32 handle.\u000arich comparison - Handle objects are compared using the handle value.
p173
sa(dp174
g1
VHKEY_CLASSES_ROOT
p175
sg3
I01
sg10
L5L
sa(dp176
g1
VHKEY_CURRENT_CONFIG
p177
sg3
I01
sg10
L5L
sa(dp178
g1
VHKEY_CURRENT_USER
p179
sg3
I01
sg10
L5L
sa(dp180
g1
VHKEY_DYN_DATA
p181
sg3
I01
sg10
L5L
sa(dp182
g1
VHKEY_LOCAL_MACHINE
p183
sg3
I01
sg10
L5L
sa(dp184
g1
VHKEY_PERFORMANCE_DATA
p185
sg3
I01
sg10
L5L
sa(dp186
g1
VHKEY_USERS
p187
sg3
I01
sg10
L5L
sa(dp188
g1
VKEY_ALL_ACCESS
p189
sg3
I01
sg10
L5L
sa(dp190
g1
VKEY_CREATE_LINK
p191
sg3
I01
sg10
L5L
sa(dp192
g1
VKEY_CREATE_SUB_KEY
p193
sg3
I01
sg10
L5L
sa(dp194
g1
VKEY_ENUMERATE_SUB_KEYS
p195
sg3
I01
sg10
L5L
sa(dp196
g1
VKEY_EXECUTE
p197
sg3
I01
sg10
L5L
sa(dp198
g1
VKEY_NOTIFY
p199
sg3
I01
sg10
L5L
sa(dp200
g1
VKEY_QUERY_VALUE
p201
sg3
I01
sg10
L5L
sa(dp202
g1
VKEY_READ
p203
sg3
I01
sg10
L5L
sa(dp204
g1
VKEY_SET_VALUE
p205
sg3
I01
sg10
L5L
sa(dp206
g1
VKEY_WOW64_32KEY
p207
sg3
I01
sg10
L5L
sa(dp208
g1
VKEY_WOW64_64KEY
p209
sg3
I01
sg10
L5L
sa(dp210
g1
VKEY_WRITE
p211
sg3
I01
sg10
L5L
sa(dp212
g1
VLoadKey
p213
sg3
I01
sg10
L2L
sg4
VInsert data into the registry from a file.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  sub_key\u000a    A string that identifies the sub-key to load.\u000a  file_name\u000a    The name of the file to load registry data from.  This file must\u000a    have been created with the SaveKey() function.  Under the file\u000a    allocation table (FAT) file system, the filename may not have an\u000a    extension.\u000a\u000aCreates a subkey under the specified key and stores registration\u000ainformation from a specified file into that subkey.\u000a\u000aA call to LoadKey() fails if the calling process does not have the\u000aSE_RESTORE_PRIVILEGE privilege.\u000a\u000aIf key is a handle returned by ConnectRegistry(), then the path\u000aspecified in fileName is relative to the remote computer.\u000a\u000aThe MSDN docs imply key must be in the HKEY_USER or HKEY_LOCAL_MACHINE\u000atree.
p214
sa(dp215
g1
VOpenKey
p216
sg3
I01
sg10
L2L
sg4
VOpens the specified key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  sub_key\u000a    A string that identifies the sub_key to open.\u000a  reserved\u000a    A reserved integer that must be zero.  Default is zero.\u000a  access\u000a    An integer that specifies an access mask that describes the desired\u000a    security access for the key.  Default is KEY_READ.\u000a\u000aThe result is a new handle to the specified key.\u000aIf the function fails, an OSError exception is raised.
p217
sa(dp218
g1
VOpenKeyEx
p219
sg3
I01
sg10
L2L
sg4
VOpens the specified key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  sub_key\u000a    A string that identifies the sub_key to open.\u000a  reserved\u000a    A reserved integer that must be zero.  Default is zero.\u000a  access\u000a    An integer that specifies an access mask that describes the desired\u000a    security access for the key.  Default is KEY_READ.\u000a\u000aThe result is a new handle to the specified key.\u000aIf the function fails, an OSError exception is raised.
p220
sa(dp221
g1
VQueryInfoKey
p222
sg3
I01
sg10
L2L
sg4
VReturns information about a key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a\u000aThe result is a tuple of 3 items:\u000aAn integer that identifies the number of sub keys this key has.\u000aAn integer that identifies the number of values this key has.\u000aAn integer that identifies when the key was last modified (if available)\u000aas 100's of nanoseconds since Jan 1, 1600.
p223
sa(dp224
g1
VQueryReflectionKey
p225
sg3
I01
sg10
L2L
sg4
VReturns the reflection state for the specified key as a bool.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a\u000aWill generally raise NotImplemented if executed on a 32bit OS.
p226
sa(dp227
g1
VQueryValue
p228
sg3
I01
sg10
L2L
sg4
VRetrieves the unnamed value for a key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  sub_key\u000a    A string that holds the name of the subkey with which the value\u000a    is associated.  If this parameter is None or empty, the function\u000a    retrieves the value set by the SetValue() method for the key\u000a    identified by key.\u000a\u000aValues in the registry have name, type, and data components. This method\u000aretrieves the data for a key's first value that has a NULL name.\u000aBut since the underlying API call doesn't return the type, you'll\u000aprobably be happier using QueryValueEx; this function is just here for\u000acompleteness.
p229
sa(dp230
g1
VQueryValueEx
p231
sg3
I01
sg10
L2L
sg4
VRetrieves the type and value of a specified sub-key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  name\u000a    A string indicating the value to query.\u000a\u000aBehaves mostly like QueryValue(), but also returns the type of the\u000aspecified value name associated with the given open registry key.\u000a\u000aThe return value is a tuple of the value and the type_id.
p232
sa(dp233
g1
VREG_BINARY
p234
sg3
I01
sg10
L5L
sa(dp235
g1
VREG_CREATED_NEW_KEY
p236
sg3
I01
sg10
L5L
sa(dp237
g1
VREG_DWORD
p238
sg3
I01
sg10
L5L
sa(dp239
g1
VREG_DWORD_BIG_ENDIAN
p240
sg3
I01
sg10
L5L
sa(dp241
g1
VREG_DWORD_LITTLE_ENDIAN
p242
sg3
I01
sg10
L5L
sa(dp243
g1
VREG_EXPAND_SZ
p244
sg3
I01
sg10
L5L
sa(dp245
g1
VREG_FULL_RESOURCE_DESCRIPTOR
p246
sg3
I01
sg10
L5L
sa(dp247
g1
VREG_LEGAL_CHANGE_FILTER
p248
sg3
I01
sg10
L5L
sa(dp249
g1
VREG_LEGAL_OPTION
p250
sg3
I01
sg10
L5L
sa(dp251
g1
VREG_LINK
p252
sg3
I01
sg10
L5L
sa(dp253
g1
VREG_MULTI_SZ
p254
sg3
I01
sg10
L5L
sa(dp255
g1
VREG_NONE
p256
sg3
I01
sg10
L5L
sa(dp257
g1
VREG_NOTIFY_CHANGE_ATTRIBUTES
p258
sg3
I01
sg10
L5L
sa(dp259
g1
VREG_NOTIFY_CHANGE_LAST_SET
p260
sg3
I01
sg10
L5L
sa(dp261
g1
VREG_NOTIFY_CHANGE_NAME
p262
sg3
I01
sg10
L5L
sa(dp263
g1
VREG_NOTIFY_CHANGE_SECURITY
p264
sg3
I01
sg10
L5L
sa(dp265
g1
VREG_NO_LAZY_FLUSH
p266
sg3
I01
sg10
L5L
sa(dp267
g1
VREG_OPENED_EXISTING_KEY
p268
sg3
I01
sg10
L5L
sa(dp269
g1
VREG_OPTION_BACKUP_RESTORE
p270
sg3
I01
sg10
L5L
sa(dp271
g1
VREG_OPTION_CREATE_LINK
p272
sg3
I01
sg10
L5L
sa(dp273
g1
VREG_OPTION_NON_VOLATILE
p274
sg3
I01
sg10
L5L
sa(dp275
g1
VREG_OPTION_OPEN_LINK
p276
sg3
I01
sg10
L5L
sa(dp277
g1
VREG_OPTION_RESERVED
p278
sg3
I01
sg10
L5L
sa(dp279
g1
VREG_OPTION_VOLATILE
p280
sg3
I01
sg10
L5L
sa(dp281
g1
VREG_QWORD
p282
sg3
I01
sg10
L5L
sa(dp283
g1
VREG_QWORD_LITTLE_ENDIAN
p284
sg3
I01
sg10
L5L
sa(dp285
g1
VREG_REFRESH_HIVE
p286
sg3
I01
sg10
L5L
sa(dp287
g1
VREG_RESOURCE_LIST
p288
sg3
I01
sg10
L5L
sa(dp289
g1
VREG_RESOURCE_REQUIREMENTS_LIST
p290
sg3
I01
sg10
L5L
sa(dp291
g1
VREG_SZ
p292
sg3
I01
sg10
L5L
sa(dp293
g1
VREG_WHOLE_HIVE_VOLATILE
p294
sg3
I01
sg10
L5L
sa(dp295
g1
VSaveKey
p296
sg3
I01
sg10
L2L
sg4
VSaves the specified key, and all its subkeys to the specified file.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  file_name\u000a    The name of the file to save registry data to.  This file cannot\u000a    already exist. If this filename includes an extension, it cannot be\u000a    used on file allocation table (FAT) file systems by the LoadKey(),\u000a    ReplaceKey() or RestoreKey() methods.\u000a\u000aIf key represents a key on a remote computer, the path described by\u000afile_name is relative to the remote computer.\u000a\u000aThe caller of this method must possess the SeBackupPrivilege\u000asecurity privilege.  This function passes NULL for security_attributes\u000ato the API.
p297
sa(dp298
g1
VSetValue
p299
sg3
I01
sg10
L2L
sg4
VAssociates a value with a specified key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  sub_key\u000a    A string that names the subkey with which the value is associated.\u000a  type\u000a    An integer that specifies the type of the data.  Currently this must\u000a    be REG_SZ, meaning only strings are supported.\u000a  value\u000a    A string that specifies the new value.\u000a\u000aIf the key specified by the sub_key parameter does not exist, the\u000aSetValue function creates it.\u000a\u000aValue lengths are limited by available memory. Long values (more than\u000a2048 bytes) should be stored as files with the filenames stored in\u000athe configuration registry to help the registry perform efficiently.\u000a\u000aThe key identified by the key parameter must have been opened with\u000aKEY_SET_VALUE access.
p300
sa(dp301
g1
VSetValueEx
p302
sg3
I01
sg10
L2L
sg4
VStores data in the value field of an open registry key.\u000a\u000a  key\u000a    An already open key, or any one of the predefined HKEY_* constants.\u000a  value_name\u000a    A string containing the name of the value to set, or None.\u000a  reserved\u000a    Can be anything - zero is always passed to the API.\u000a  type\u000a    An integer that specifies the type of the data, one of:\u000a    REG_BINARY -- Binary data in any form.\u000a    REG_DWORD -- A 32-bit number.\u000a    REG_DWORD_LITTLE_ENDIAN -- A 32-bit number in little-endian format. Equivalent to REG_DWORD\u000a    REG_DWORD_BIG_ENDIAN -- A 32-bit number in big-endian format.\u000a    REG_EXPAND_SZ -- A null-terminated string that contains unexpanded\u000a                     references to environment variables (for example,\u000a                     %PATH%).\u000a    REG_LINK -- A Unicode symbolic link.\u000a    REG_MULTI_SZ -- A sequence of null-terminated strings, terminated\u000a                    by two null characters.  Note that Python handles\u000a                    this termination automatically.\u000a    REG_NONE -- No defined value type.\u000a    REG_QWORD -- A 64-bit number.\u000a    REG_QWORD_LITTLE_ENDIAN -- A 64-bit number in little-endian format. Equivalent to REG_QWORD.\u000a    REG_RESOURCE_LIST -- A device-driver resource list.\u000a    REG_SZ -- A null-terminated string.\u000a  value\u000a    A string that specifies the new value.\u000a\u000aThis method can also set additional value and type information for the\u000aspecified key.  The key identified by the key parameter must have been\u000aopened with KEY_SET_VALUE access.\u000a\u000aTo open the key, use the CreateKeyEx() or OpenKeyEx() methods.\u000a\u000aValue lengths are limited by available memory. Long values (more than\u000a2048 bytes) should be stored as files with the filenames stored in\u000athe configuration registry to help the registry perform efficiently.
p303
sa(dp304
g1
g73
sg3
I01
sg10
L5L
sa(dp305
g1
V__loader__
p306
sg3
I01
sg10
L3L
sg6
(lp307
(dp308
g1
g66
sg3
I01
sg10
L5L
sa(dp309
g1
V__dict__
p310
sg3
I01
sg10
L5L
sa(dp311
g1
g68
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p312
sa(dp313
g1
g73
sg3
I01
sg10
L5L
sa(dp314
g1
g77
sg3
I01
sg10
L5L
sa(dp315
g1
g83
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p316
sa(dp317
g1
g86
sg3
I01
sg10
L5L
sa(dp318
g1
g88
sg3
I01
sg10
L5L
sa(dp319
g1
g90
sg3
I01
sg10
L5L
sa(dp320
g1
g92
sg3
I01
sg10
L5L
sa(dp321
g1
g94
sg3
I01
sg10
L5L
sa(dp322
g1
g96
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p323
sa(dp324
g1
g103
sg3
I01
sg10
L5L
sa(dp325
g1
g107
sg3
I01
sg10
L5L
sa(dp326
g1
V__module__
p327
sg3
I01
sg10
L5L
sa(dp328
g1
g113
sg3
I01
sg10
L5L
sa(dp329
g1
g117
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p330
sa(dp331
g1
g132
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p332
sa(dp333
g1
g135
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p334
sa(dp335
g1
g138
sg3
I01
sg10
L5L
sa(dp336
g1
g158
sg3
I01
sg10
L5L
sa(dp337
g1
g160
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p338
sa(dp339
g1
g163
sg3
I01
sg10
L5L
sa(dp340
g1
g167
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p341
sa(dp342
g1
V__weakref__
p343
sg3
I01
sg10
L5L
sa(dp344
g1
Vcreate_module
p345
sg3
I01
sg10
L5L
sa(dp346
g1
Vexec_module
p347
sg3
I01
sg10
L5L
sa(dp348
g1
Vfind_module
p349
sg3
I01
sg10
L5L
sa(dp350
g1
Vfind_spec
p351
sg3
I01
sg10
L5L
sa(dp352
g1
Vget_code
p353
sg3
I01
sg10
L5L
sa(dp354
g1
Vget_source
p355
sg3
I01
sg10
L5L
sa(dp356
g1
Vis_package
p357
sg3
I01
sg10
L5L
sa(dp358
g1
Vload_module
p359
sg3
I01
sg10
L5L
sa(dp360
g1
Vmodule_repr
p361
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p362
sa(dp363
g1
V__name__
p364
sg3
I01
sg10
L5L
sa(dp365
g1
V__package__
p366
sg3
I01
sg10
L5L
sa(dp367
g1
V__spec__
p368
sg3
I01
sg10
L5L
sa(dp369
g1
Verror
p370
sg3
I01
sg10
L3L
sg6
(lp371
(dp372
g1
V__cause__
p373
sg3
I01
sg10
L5L
sa(dp374
g1
V__context__
p375
sg3
I01
sg10
L5L
sa(dp376
g1
g66
sg3
I01
sg10
L5L
sa(dp377
g1
g310
sg3
I01
sg10
L5L
sa(dp378
g1
g68
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p379
sa(dp380
g1
g73
sg3
I01
sg10
L5L
sa(dp381
g1
g77
sg3
I01
sg10
L5L
sa(dp382
g1
g83
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p383
sa(dp384
g1
g86
sg3
I01
sg10
L5L
sa(dp385
g1
g88
sg3
I01
sg10
L5L
sa(dp386
g1
g90
sg3
I01
sg10
L5L
sa(dp387
g1
g92
sg3
I01
sg10
L5L
sa(dp388
g1
g94
sg3
I01
sg10
L5L
sa(dp389
g1
g96
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p390
sa(dp391
g1
g103
sg3
I01
sg10
L5L
sa(dp392
g1
g107
sg3
I01
sg10
L5L
sa(dp393
g1
g113
sg3
I01
sg10
L5L
sa(dp394
g1
g117
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p395
sa(dp396
g1
g132
sg3
I01
sg10
L2L
sg4
Nsa(dp397
g1
g135
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p398
sa(dp399
g1
g138
sg3
I01
sg10
L5L
sa(dp400
g1
g158
sg3
I01
sg10
L5L
sa(dp401
g1
V__setstate__
p402
sg3
I01
sg10
L2L
sg4
Nsa(dp403
g1
g160
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p404
sa(dp405
g1
g163
sg3
I01
sg10
L5L
sa(dp406
g1
g167
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p407
sa(dp408
g1
V__suppress_context__
p409
sg3
I01
sg10
L5L
sa(dp410
g1
V__traceback__
p411
sg3
I01
sg10
L5L
sa(dp412
g1
Vargs
p413
sg3
I01
sg10
L5L
sa(dp414
g1
Vcharacters_written
p415
sg3
I01
sg10
L5L
sa(dp416
g1
Verrno
p417
sg3
I01
sg10
L5L
sa(dp418
g1
Vfilename
p419
sg3
I01
sg10
L5L
sa(dp420
g1
Vfilename2
p421
sg3
I01
sg10
L5L
sa(dp422
g1
Vstrerror
p423
sg3
I01
sg10
L5L
sa(dp424
g1
Vwinerror
p425
sg3
I01
sg10
L5L
sa(dp426
g1
Vwith_traceback
p427
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p428
sasg4
VBase class for I/O related errors.
p429
sasg10
L1L
s.