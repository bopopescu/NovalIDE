(dp0
Vchilds
p1
(lp2
(dp3
Vis_builtin
p4
I01
sVname
p5
V__doc__
p6
sVtype
p7
L5L
sa(dp8
g1
(lp9
(dp10
g4
I01
sg5
V__delattr__
p11
sg7
L5L
sa(dp12
g4
I01
sg5
V__dict__
p13
sg7
L5L
sa(dp14
g4
I01
sg5
V__dir__
p15
sg7
L2L
sVdoc
p16
V__dir__() -> list\u000adefault dir() implementation
p17
sa(dp18
g4
I01
sg5
g6
sg7
L5L
sa(dp19
g4
I01
sg5
V__eq__
p20
sg7
L5L
sa(dp21
g4
I01
sg5
V__format__
p22
sg7
L2L
sg16
Vdefault object formatter
p23
sa(dp24
g4
I01
sg5
V__ge__
p25
sg7
L5L
sa(dp26
g4
I01
sg5
V__getattribute__
p27
sg7
L5L
sa(dp28
g4
I01
sg5
V__gt__
p29
sg7
L5L
sa(dp30
g4
I01
sg5
V__hash__
p31
sg7
L5L
sa(dp32
g4
I01
sg5
V__init__
p33
sg7
L5L
sa(dp34
g4
I01
sg5
V__le__
p35
sg7
L5L
sa(dp36
g4
I01
sg5
V__lt__
p37
sg7
L5L
sa(dp38
g4
I01
sg5
V__module__
p39
sg7
L5L
sa(dp40
g4
I01
sg5
V__ne__
p41
sg7
L5L
sa(dp42
g4
I01
sg5
V__new__
p43
sg7
L2L
sg16
VCreate and return a new object.  See help(type) for accurate signature.
p44
sa(dp45
g4
I01
sg5
V__reduce__
p46
sg7
L2L
sg16
Vhelper for pickle
p47
sa(dp48
g4
I01
sg5
V__reduce_ex__
p49
sg7
L2L
sg16
Vhelper for pickle
p50
sa(dp51
g4
I01
sg5
V__repr__
p52
sg7
L5L
sa(dp53
g4
I01
sg5
V__setattr__
p54
sg7
L5L
sa(dp55
g4
I01
sg5
V__sizeof__
p56
sg7
L2L
sg16
V__sizeof__() -> int\u000asize of object in memory, in bytes
p57
sa(dp58
g4
I01
sg5
V__str__
p59
sg7
L5L
sa(dp60
g4
I01
sg5
V__subclasshook__
p61
sg7
L2L
sg16
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p62
sa(dp63
g4
I01
sg5
V__weakref__
p64
sg7
L5L
sa(dp65
g4
I01
sg5
Vcreate_module
p66
sg7
L5L
sa(dp67
g4
I01
sg5
Vexec_module
p68
sg7
L5L
sa(dp69
g4
I01
sg5
Vfind_module
p70
sg7
L5L
sa(dp71
g4
I01
sg5
Vfind_spec
p72
sg7
L5L
sa(dp73
g4
I01
sg5
Vget_code
p74
sg7
L5L
sa(dp75
g4
I01
sg5
Vget_source
p76
sg7
L5L
sa(dp77
g4
I01
sg5
Vis_package
p78
sg7
L5L
sa(dp79
g4
I01
sg5
Vload_module
p80
sg7
L5L
sa(dp81
g4
I01
sg5
Vmodule_repr
p82
sg7
L5L
sasg4
I01
sg5
V__loader__
p83
sg7
L3L
sg16
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p84
sa(dp85
g4
I01
sg5
V__name__
p86
sg7
L5L
sa(dp87
g4
I01
sg5
V__package__
p88
sg7
L5L
sa(dp89
g4
I01
sg5
V__spec__
p90
sg7
L5L
sa(dp91
g4
I01
sg5
Vacos
p92
sg7
L2L
sg16
Vacos(x)\u000a\u000aReturn the arc cosine (measured in radians) of x.
p93
sa(dp94
g4
I01
sg5
Vacosh
p95
sg7
L2L
sg16
Vacosh(x)\u000a\u000aReturn the inverse hyperbolic cosine of x.
p96
sa(dp97
g4
I01
sg5
Vasin
p98
sg7
L2L
sg16
Vasin(x)\u000a\u000aReturn the arc sine (measured in radians) of x.
p99
sa(dp100
g4
I01
sg5
Vasinh
p101
sg7
L2L
sg16
Vasinh(x)\u000a\u000aReturn the inverse hyperbolic sine of x.
p102
sa(dp103
g4
I01
sg5
Vatan
p104
sg7
L2L
sg16
Vatan(x)\u000a\u000aReturn the arc tangent (measured in radians) of x.
p105
sa(dp106
g4
I01
sg5
Vatan2
p107
sg7
L2L
sg16
Vatan2(y, x)\u000a\u000aReturn the arc tangent (measured in radians) of y/x.\u000aUnlike atan(y/x), the signs of both x and y are considered.
p108
sa(dp109
g4
I01
sg5
Vatanh
p110
sg7
L2L
sg16
Vatanh(x)\u000a\u000aReturn the inverse hyperbolic tangent of x.
p111
sa(dp112
g4
I01
sg5
Vceil
p113
sg7
L2L
sg16
Vceil(x)\u000a\u000aReturn the ceiling of x as an Integral.\u000aThis is the smallest integer >= x.
p114
sa(dp115
g4
I01
sg5
Vcopysign
p116
sg7
L2L
sg16
Vcopysign(x, y)\u000a\u000aReturn a float with the magnitude (absolute value) of x but the sign \u000aof y. On platforms that support signed zeros, copysign(1.0, -0.0) \u000areturns -1.0.\u000a
p117
sa(dp118
g4
I01
sg5
Vcos
p119
sg7
L2L
sg16
Vcos(x)\u000a\u000aReturn the cosine of x (measured in radians).
p120
sa(dp121
g4
I01
sg5
Vcosh
p122
sg7
L2L
sg16
Vcosh(x)\u000a\u000aReturn the hyperbolic cosine of x.
p123
sa(dp124
g4
I01
sg5
Vdegrees
p125
sg7
L2L
sg16
Vdegrees(x)\u000a\u000aConvert angle x from radians to degrees.
p126
sa(dp127
g4
I01
sg5
Ve
p128
sg7
L5L
sa(dp129
g4
I01
sg5
Verf
p130
sg7
L2L
sg16
Verf(x)\u000a\u000aError function at x.
p131
sa(dp132
g4
I01
sg5
Verfc
p133
sg7
L2L
sg16
Verfc(x)\u000a\u000aComplementary error function at x.
p134
sa(dp135
g4
I01
sg5
Vexp
p136
sg7
L2L
sg16
Vexp(x)\u000a\u000aReturn e raised to the power of x.
p137
sa(dp138
g4
I01
sg5
Vexpm1
p139
sg7
L2L
sg16
Vexpm1(x)\u000a\u000aReturn exp(x)-1.\u000aThis function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
p140
sa(dp141
g4
I01
sg5
Vfabs
p142
sg7
L2L
sg16
Vfabs(x)\u000a\u000aReturn the absolute value of the float x.
p143
sa(dp144
g4
I01
sg5
Vfactorial
p145
sg7
L2L
sg16
Vfactorial(x) -> Integral\u000a\u000aFind x!. Raise a ValueError if x is negative or non-integral.
p146
sa(dp147
g4
I01
sg5
Vfloor
p148
sg7
L2L
sg16
Vfloor(x)\u000a\u000aReturn the floor of x as an Integral.\u000aThis is the largest integer <= x.
p149
sa(dp150
g4
I01
sg5
Vfmod
p151
sg7
L2L
sg16
Vfmod(x, y)\u000a\u000aReturn fmod(x, y), according to platform C.  x % y may differ.
p152
sa(dp153
g4
I01
sg5
Vfrexp
p154
sg7
L2L
sg16
Vfrexp(x)\u000a\u000aReturn the mantissa and exponent of x, as pair (m, e).\u000am is a float and e is an int, such that x = m * 2.**e.\u000aIf x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
p155
sa(dp156
g4
I01
sg5
Vfsum
p157
sg7
L2L
sg16
Vfsum(iterable)\u000a\u000aReturn an accurate floating point sum of values in the iterable.\u000aAssumes IEEE-754 floating point arithmetic.
p158
sa(dp159
g4
I01
sg5
Vgamma
p160
sg7
L2L
sg16
Vgamma(x)\u000a\u000aGamma function at x.
p161
sa(dp162
g4
I01
sg5
Vgcd
p163
sg7
L2L
sg16
Vgcd(x, y) -> int\u000agreatest common divisor of x and y
p164
sa(dp165
g4
I01
sg5
Vhypot
p166
sg7
L2L
sg16
Vhypot(x, y)\u000a\u000aReturn the Euclidean distance, sqrt(x*x + y*y).
p167
sa(dp168
g4
I01
sg5
Vinf
p169
sg7
L5L
sa(dp170
g4
I01
sg5
Visclose
p171
sg7
L2L
sg16
Visclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) -> bool\u000a\u000aDetermine whether two floating point numbers are close in value.\u000a\u000a   rel_tol\u000a       maximum difference for being considered "close", relative to the\u000a       magnitude of the input values\u000a    abs_tol\u000a       maximum difference for being considered "close", regardless of the\u000a       magnitude of the input values\u000a\u000aReturn True if a is close in value to b, and False otherwise.\u000a\u000aFor the values to be considered close, the difference between them\u000amust be smaller than at least one of the tolerances.\u000a\u000a-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That\u000ais, NaN is not close to anything, even itself.  inf and -inf are\u000aonly close to themselves.
p172
sa(dp173
g4
I01
sg5
Visfinite
p174
sg7
L2L
sg16
Visfinite(x) -> bool\u000a\u000aReturn True if x is neither an infinity nor a NaN, and False otherwise.
p175
sa(dp176
g4
I01
sg5
Visinf
p177
sg7
L2L
sg16
Visinf(x) -> bool\u000a\u000aReturn True if x is a positive or negative infinity, and False otherwise.
p178
sa(dp179
g4
I01
sg5
Visnan
p180
sg7
L2L
sg16
Visnan(x) -> bool\u000a\u000aReturn True if x is a NaN (not a number), and False otherwise.
p181
sa(dp182
g4
I01
sg5
Vldexp
p183
sg7
L2L
sg16
Vldexp(x, i)\u000a\u000aReturn x * (2**i).
p184
sa(dp185
g4
I01
sg5
Vlgamma
p186
sg7
L2L
sg16
Vlgamma(x)\u000a\u000aNatural logarithm of absolute value of Gamma function at x.
p187
sa(dp188
g4
I01
sg5
Vlog
p189
sg7
L2L
sg16
Vlog(x[, base])\u000a\u000aReturn the logarithm of x to the given base.\u000aIf the base not specified, returns the natural logarithm (base e) of x.
p190
sa(dp191
g4
I01
sg5
Vlog10
p192
sg7
L2L
sg16
Vlog10(x)\u000a\u000aReturn the base 10 logarithm of x.
p193
sa(dp194
g4
I01
sg5
Vlog1p
p195
sg7
L2L
sg16
Vlog1p(x)\u000a\u000aReturn the natural logarithm of 1+x (base e).\u000aThe result is computed in a way which is accurate for x near zero.
p196
sa(dp197
g4
I01
sg5
Vlog2
p198
sg7
L2L
sg16
Vlog2(x)\u000a\u000aReturn the base 2 logarithm of x.
p199
sa(dp200
g4
I01
sg5
Vmodf
p201
sg7
L2L
sg16
Vmodf(x)\u000a\u000aReturn the fractional and integer parts of x.  Both results carry the sign\u000aof x and are floats.
p202
sa(dp203
g4
I01
sg5
Vnan
p204
sg7
L5L
sa(dp205
g4
I01
sg5
Vpi
p206
sg7
L5L
sa(dp207
g4
I01
sg5
Vpow
p208
sg7
L2L
sg16
Vpow(x, y)\u000a\u000aReturn x**y (x to the power of y).
p209
sa(dp210
g4
I01
sg5
Vradians
p211
sg7
L2L
sg16
Vradians(x)\u000a\u000aConvert angle x from degrees to radians.
p212
sa(dp213
g4
I01
sg5
Vsin
p214
sg7
L2L
sg16
Vsin(x)\u000a\u000aReturn the sine of x (measured in radians).
p215
sa(dp216
g4
I01
sg5
Vsinh
p217
sg7
L2L
sg16
Vsinh(x)\u000a\u000aReturn the hyperbolic sine of x.
p218
sa(dp219
g4
I01
sg5
Vsqrt
p220
sg7
L2L
sg16
Vsqrt(x)\u000a\u000aReturn the square root of x.
p221
sa(dp222
g4
I01
sg5
Vtan
p223
sg7
L2L
sg16
Vtan(x)\u000a\u000aReturn the tangent of x (measured in radians).
p224
sa(dp225
g4
I01
sg5
Vtanh
p226
sg7
L2L
sg16
Vtanh(x)\u000a\u000aReturn the hyperbolic tangent of x.
p227
sa(dp228
g4
I01
sg5
Vtrunc
p229
sg7
L2L
sg16
Vtrunc(x:Real) -> Integral\u000a\u000aTruncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.
p230
sasg4
I01
sg5
Vmath
p231
sg16
VThis module is always available.  It provides access to the\u000amathematical functions defined by the C standard.
p232
s.