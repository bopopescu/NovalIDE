(dp0
Vname
p1
Vmath
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module is always available.  It provides access to the\u000amathematical functions defined by the C standard.
p5
sVchilds
p6
(lp7
(dp8
g1
V__doc__
p9
sg3
I01
sVtype
p10
L5L
sa(dp11
g1
V__loader__
p12
sg3
I01
sg10
L3L
sg6
(lp13
(dp14
g1
V__delattr__
p15
sg3
I01
sg10
L5L
sa(dp16
g1
V__dict__
p17
sg3
I01
sg10
L5L
sa(dp18
g1
V__dir__
p19
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p20
sa(dp21
g1
g9
sg3
I01
sg10
L5L
sa(dp22
g1
V__eq__
p23
sg3
I01
sg10
L5L
sa(dp24
g1
V__format__
p25
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p26
sa(dp27
g1
V__ge__
p28
sg3
I01
sg10
L5L
sa(dp29
g1
V__getattribute__
p30
sg3
I01
sg10
L5L
sa(dp31
g1
V__gt__
p32
sg3
I01
sg10
L5L
sa(dp33
g1
V__hash__
p34
sg3
I01
sg10
L5L
sa(dp35
g1
V__init__
p36
sg3
I01
sg10
L5L
sa(dp37
g1
V__init_subclass__
p38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p39
sa(dp40
g1
V__le__
p41
sg3
I01
sg10
L5L
sa(dp42
g1
V__lt__
p43
sg3
I01
sg10
L5L
sa(dp44
g1
V__module__
p45
sg3
I01
sg10
L5L
sa(dp46
g1
V__ne__
p47
sg3
I01
sg10
L5L
sa(dp48
g1
V__new__
p49
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p50
sa(dp51
g1
V__reduce__
p52
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p53
sa(dp54
g1
V__reduce_ex__
p55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p56
sa(dp57
g1
V__repr__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__setattr__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__sizeof__
p62
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p63
sa(dp64
g1
V__str__
p65
sg3
I01
sg10
L5L
sa(dp66
g1
V__subclasshook__
p67
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p68
sa(dp69
g1
V__weakref__
p70
sg3
I01
sg10
L5L
sa(dp71
g1
Vcreate_module
p72
sg3
I01
sg10
L5L
sa(dp73
g1
Vexec_module
p74
sg3
I01
sg10
L5L
sa(dp75
g1
Vfind_module
p76
sg3
I01
sg10
L5L
sa(dp77
g1
Vfind_spec
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Vget_code
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vget_source
p82
sg3
I01
sg10
L5L
sa(dp83
g1
Vis_package
p84
sg3
I01
sg10
L5L
sa(dp85
g1
Vload_module
p86
sg3
I01
sg10
L5L
sa(dp87
g1
Vmodule_repr
p88
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p89
sa(dp90
g1
V__name__
p91
sg3
I01
sg10
L5L
sa(dp92
g1
V__package__
p93
sg3
I01
sg10
L5L
sa(dp94
g1
V__spec__
p95
sg3
I01
sg10
L5L
sa(dp96
g1
Vacos
p97
sg3
I01
sg10
L2L
sg4
Vacos(x)\u000a\u000aReturn the arc cosine (measured in radians) of x.
p98
sa(dp99
g1
Vacosh
p100
sg3
I01
sg10
L2L
sg4
Vacosh(x)\u000a\u000aReturn the inverse hyperbolic cosine of x.
p101
sa(dp102
g1
Vasin
p103
sg3
I01
sg10
L2L
sg4
Vasin(x)\u000a\u000aReturn the arc sine (measured in radians) of x.
p104
sa(dp105
g1
Vasinh
p106
sg3
I01
sg10
L2L
sg4
Vasinh(x)\u000a\u000aReturn the inverse hyperbolic sine of x.
p107
sa(dp108
g1
Vatan
p109
sg3
I01
sg10
L2L
sg4
Vatan(x)\u000a\u000aReturn the arc tangent (measured in radians) of x.
p110
sa(dp111
g1
Vatan2
p112
sg3
I01
sg10
L2L
sg4
Vatan2(y, x)\u000a\u000aReturn the arc tangent (measured in radians) of y/x.\u000aUnlike atan(y/x), the signs of both x and y are considered.
p113
sa(dp114
g1
Vatanh
p115
sg3
I01
sg10
L2L
sg4
Vatanh(x)\u000a\u000aReturn the inverse hyperbolic tangent of x.
p116
sa(dp117
g1
Vceil
p118
sg3
I01
sg10
L2L
sg4
Vceil(x)\u000a\u000aReturn the ceiling of x as an Integral.\u000aThis is the smallest integer >= x.
p119
sa(dp120
g1
Vcopysign
p121
sg3
I01
sg10
L2L
sg4
Vcopysign(x, y)\u000a\u000aReturn a float with the magnitude (absolute value) of x but the sign \u000aof y. On platforms that support signed zeros, copysign(1.0, -0.0) \u000areturns -1.0.\u000a
p122
sa(dp123
g1
Vcos
p124
sg3
I01
sg10
L2L
sg4
Vcos(x)\u000a\u000aReturn the cosine of x (measured in radians).
p125
sa(dp126
g1
Vcosh
p127
sg3
I01
sg10
L2L
sg4
Vcosh(x)\u000a\u000aReturn the hyperbolic cosine of x.
p128
sa(dp129
g1
Vdegrees
p130
sg3
I01
sg10
L2L
sg4
Vdegrees(x)\u000a\u000aConvert angle x from radians to degrees.
p131
sa(dp132
g1
Ve
p133
sg3
I01
sg10
L5L
sa(dp134
g1
Verf
p135
sg3
I01
sg10
L2L
sg4
Verf(x)\u000a\u000aError function at x.
p136
sa(dp137
g1
Verfc
p138
sg3
I01
sg10
L2L
sg4
Verfc(x)\u000a\u000aComplementary error function at x.
p139
sa(dp140
g1
Vexp
p141
sg3
I01
sg10
L2L
sg4
Vexp(x)\u000a\u000aReturn e raised to the power of x.
p142
sa(dp143
g1
Vexpm1
p144
sg3
I01
sg10
L2L
sg4
Vexpm1(x)\u000a\u000aReturn exp(x)-1.\u000aThis function avoids the loss of precision involved in the direct evaluation of exp(x)-1 for small x.
p145
sa(dp146
g1
Vfabs
p147
sg3
I01
sg10
L2L
sg4
Vfabs(x)\u000a\u000aReturn the absolute value of the float x.
p148
sa(dp149
g1
Vfactorial
p150
sg3
I01
sg10
L2L
sg4
Vfactorial(x) -> Integral\u000a\u000aFind x!. Raise a ValueError if x is negative or non-integral.
p151
sa(dp152
g1
Vfloor
p153
sg3
I01
sg10
L2L
sg4
Vfloor(x)\u000a\u000aReturn the floor of x as an Integral.\u000aThis is the largest integer <= x.
p154
sa(dp155
g1
Vfmod
p156
sg3
I01
sg10
L2L
sg4
Vfmod(x, y)\u000a\u000aReturn fmod(x, y), according to platform C.  x % y may differ.
p157
sa(dp158
g1
Vfrexp
p159
sg3
I01
sg10
L2L
sg4
Vfrexp(x)\u000a\u000aReturn the mantissa and exponent of x, as pair (m, e).\u000am is a float and e is an int, such that x = m * 2.**e.\u000aIf x is 0, m and e are both 0.  Else 0.5 <= abs(m) < 1.0.
p160
sa(dp161
g1
Vfsum
p162
sg3
I01
sg10
L2L
sg4
Vfsum(iterable)\u000a\u000aReturn an accurate floating point sum of values in the iterable.\u000aAssumes IEEE-754 floating point arithmetic.
p163
sa(dp164
g1
Vgamma
p165
sg3
I01
sg10
L2L
sg4
Vgamma(x)\u000a\u000aGamma function at x.
p166
sa(dp167
g1
Vgcd
p168
sg3
I01
sg10
L2L
sg4
Vgcd(x, y) -> int\u000agreatest common divisor of x and y
p169
sa(dp170
g1
Vhypot
p171
sg3
I01
sg10
L2L
sg4
Vhypot(x, y)\u000a\u000aReturn the Euclidean distance, sqrt(x*x + y*y).
p172
sa(dp173
g1
Vinf
p174
sg3
I01
sg10
L5L
sa(dp175
g1
Visclose
p176
sg3
I01
sg10
L2L
sg4
Visclose(a, b, *, rel_tol=1e-09, abs_tol=0.0) -> bool\u000a\u000aDetermine whether two floating point numbers are close in value.\u000a\u000a   rel_tol\u000a       maximum difference for being considered "close", relative to the\u000a       magnitude of the input values\u000a    abs_tol\u000a       maximum difference for being considered "close", regardless of the\u000a       magnitude of the input values\u000a\u000aReturn True if a is close in value to b, and False otherwise.\u000a\u000aFor the values to be considered close, the difference between them\u000amust be smaller than at least one of the tolerances.\u000a\u000a-inf, inf and NaN behave similarly to the IEEE 754 Standard.  That\u000ais, NaN is not close to anything, even itself.  inf and -inf are\u000aonly close to themselves.
p177
sa(dp178
g1
Visfinite
p179
sg3
I01
sg10
L2L
sg4
Visfinite(x) -> bool\u000a\u000aReturn True if x is neither an infinity nor a NaN, and False otherwise.
p180
sa(dp181
g1
Visinf
p182
sg3
I01
sg10
L2L
sg4
Visinf(x) -> bool\u000a\u000aReturn True if x is a positive or negative infinity, and False otherwise.
p183
sa(dp184
g1
Visnan
p185
sg3
I01
sg10
L2L
sg4
Visnan(x) -> bool\u000a\u000aReturn True if x is a NaN (not a number), and False otherwise.
p186
sa(dp187
g1
Vldexp
p188
sg3
I01
sg10
L2L
sg4
Vldexp(x, i)\u000a\u000aReturn x * (2**i).
p189
sa(dp190
g1
Vlgamma
p191
sg3
I01
sg10
L2L
sg4
Vlgamma(x)\u000a\u000aNatural logarithm of absolute value of Gamma function at x.
p192
sa(dp193
g1
Vlog
p194
sg3
I01
sg10
L2L
sg4
Vlog(x[, base])\u000a\u000aReturn the logarithm of x to the given base.\u000aIf the base not specified, returns the natural logarithm (base e) of x.
p195
sa(dp196
g1
Vlog10
p197
sg3
I01
sg10
L2L
sg4
Vlog10(x)\u000a\u000aReturn the base 10 logarithm of x.
p198
sa(dp199
g1
Vlog1p
p200
sg3
I01
sg10
L2L
sg4
Vlog1p(x)\u000a\u000aReturn the natural logarithm of 1+x (base e).\u000aThe result is computed in a way which is accurate for x near zero.
p201
sa(dp202
g1
Vlog2
p203
sg3
I01
sg10
L2L
sg4
Vlog2(x)\u000a\u000aReturn the base 2 logarithm of x.
p204
sa(dp205
g1
Vmodf
p206
sg3
I01
sg10
L2L
sg4
Vmodf(x)\u000a\u000aReturn the fractional and integer parts of x.  Both results carry the sign\u000aof x and are floats.
p207
sa(dp208
g1
Vnan
p209
sg3
I01
sg10
L5L
sa(dp210
g1
Vpi
p211
sg3
I01
sg10
L5L
sa(dp212
g1
Vpow
p213
sg3
I01
sg10
L2L
sg4
Vpow(x, y)\u000a\u000aReturn x**y (x to the power of y).
p214
sa(dp215
g1
Vradians
p216
sg3
I01
sg10
L2L
sg4
Vradians(x)\u000a\u000aConvert angle x from degrees to radians.
p217
sa(dp218
g1
Vsin
p219
sg3
I01
sg10
L2L
sg4
Vsin(x)\u000a\u000aReturn the sine of x (measured in radians).
p220
sa(dp221
g1
Vsinh
p222
sg3
I01
sg10
L2L
sg4
Vsinh(x)\u000a\u000aReturn the hyperbolic sine of x.
p223
sa(dp224
g1
Vsqrt
p225
sg3
I01
sg10
L2L
sg4
Vsqrt(x)\u000a\u000aReturn the square root of x.
p226
sa(dp227
g1
Vtan
p228
sg3
I01
sg10
L2L
sg4
Vtan(x)\u000a\u000aReturn the tangent of x (measured in radians).
p229
sa(dp230
g1
Vtanh
p231
sg3
I01
sg10
L2L
sg4
Vtanh(x)\u000a\u000aReturn the hyperbolic tangent of x.
p232
sa(dp233
g1
Vtau
p234
sg3
I01
sg10
L5L
sa(dp235
g1
Vtrunc
p236
sg3
I01
sg10
L2L
sg4
Vtrunc(x:Real) -> Integral\u000a\u000aTruncates x to the nearest Integral toward 0. Uses the __trunc__ magic method.
p237
sasg10
L1L
s.