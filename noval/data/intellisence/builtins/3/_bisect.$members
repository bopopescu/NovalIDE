(dp0
Vname
p1
V_bisect
p2
sVis_builtin
p3
I01
sVdoc
p4
VBisection algorithms.\u000a\u000aThis module provides support for maintaining a list in sorted order without\u000ahaving to sort the list after each insertion. For long lists of items with\u000aexpensive comparison operations, this can be an improvement over the more\u000acommon approach.\u000a
p5
sVchilds
p6
(lp7
(dp8
g1
V__doc__
p9
sg3
I01
sVtype
p10
L5L
sa(dp11
g1
V__loader__
p12
sg3
I01
sg10
L3L
sg6
(lp13
(dp14
g1
V__delattr__
p15
sg3
I01
sg10
L5L
sa(dp16
g1
V__dict__
p17
sg3
I01
sg10
L5L
sa(dp18
g1
V__dir__
p19
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p20
sa(dp21
g1
g9
sg3
I01
sg10
L5L
sa(dp22
g1
V__eq__
p23
sg3
I01
sg10
L5L
sa(dp24
g1
V__format__
p25
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p26
sa(dp27
g1
V__ge__
p28
sg3
I01
sg10
L5L
sa(dp29
g1
V__getattribute__
p30
sg3
I01
sg10
L5L
sa(dp31
g1
V__gt__
p32
sg3
I01
sg10
L5L
sa(dp33
g1
V__hash__
p34
sg3
I01
sg10
L5L
sa(dp35
g1
V__init__
p36
sg3
I01
sg10
L5L
sa(dp37
g1
V__init_subclass__
p38
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p39
sa(dp40
g1
V__le__
p41
sg3
I01
sg10
L5L
sa(dp42
g1
V__lt__
p43
sg3
I01
sg10
L5L
sa(dp44
g1
V__module__
p45
sg3
I01
sg10
L5L
sa(dp46
g1
V__ne__
p47
sg3
I01
sg10
L5L
sa(dp48
g1
V__new__
p49
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p50
sa(dp51
g1
V__reduce__
p52
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p53
sa(dp54
g1
V__reduce_ex__
p55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p56
sa(dp57
g1
V__repr__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__setattr__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__sizeof__
p62
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p63
sa(dp64
g1
V__str__
p65
sg3
I01
sg10
L5L
sa(dp66
g1
V__subclasshook__
p67
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p68
sa(dp69
g1
V__weakref__
p70
sg3
I01
sg10
L5L
sa(dp71
g1
Vcreate_module
p72
sg3
I01
sg10
L5L
sa(dp73
g1
Vexec_module
p74
sg3
I01
sg10
L5L
sa(dp75
g1
Vfind_module
p76
sg3
I01
sg10
L5L
sa(dp77
g1
Vfind_spec
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Vget_code
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vget_source
p82
sg3
I01
sg10
L5L
sa(dp83
g1
Vis_package
p84
sg3
I01
sg10
L5L
sa(dp85
g1
Vload_module
p86
sg3
I01
sg10
L5L
sa(dp87
g1
Vmodule_repr
p88
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p89
sa(dp90
g1
V__name__
p91
sg3
I01
sg10
L5L
sa(dp92
g1
V__package__
p93
sg3
I01
sg10
L5L
sa(dp94
g1
V__spec__
p95
sg3
I01
sg10
L5L
sa(dp96
g1
Vbisect
p97
sg3
I01
sg10
L2L
sg4
VAlias for bisect_right().\u000a
p98
sa(dp99
g1
Vbisect_left
p100
sg3
I01
sg10
L2L
sg4
Vbisect_left(a, x[, lo[, hi]]) -> index\u000a\u000aReturn the index where to insert item x in list a, assuming a is sorted.\u000a\u000aThe return value i is such that all e in a[:i] have e < x, and all e in\u000aa[i:] have e >= x.  So if x already appears in the list, i points just\u000abefore the leftmost x already there.\u000a\u000aOptional args lo (default 0) and hi (default len(a)) bound the\u000aslice of a to be searched.\u000a
p101
sa(dp102
g1
Vbisect_right
p103
sg3
I01
sg10
L2L
sg4
Vbisect_right(a, x[, lo[, hi]]) -> index\u000a\u000aReturn the index where to insert item x in list a, assuming a is sorted.\u000a\u000aThe return value i is such that all e in a[:i] have e <= x, and all e in\u000aa[i:] have e > x.  So if x already appears in the list, i points just\u000abeyond the rightmost x already there\u000a\u000aOptional args lo (default 0) and hi (default len(a)) bound the\u000aslice of a to be searched.\u000a
p104
sa(dp105
g1
Vinsort
p106
sg3
I01
sg10
L2L
sg4
VAlias for insort_right().\u000a
p107
sa(dp108
g1
Vinsort_left
p109
sg3
I01
sg10
L2L
sg4
Vinsort_left(a, x[, lo[, hi]])\u000a\u000aInsert item x in list a, and keep it sorted assuming a is sorted.\u000a\u000aIf x is already in a, insert it to the left of the leftmost x.\u000a\u000aOptional args lo (default 0) and hi (default len(a)) bound the\u000aslice of a to be searched.\u000a
p110
sa(dp111
g1
Vinsort_right
p112
sg3
I01
sg10
L2L
sg4
Vinsort_right(a, x[, lo[, hi]])\u000a\u000aInsert item x in list a, and keep it sorted assuming a is sorted.\u000a\u000aIf x is already in a, insert it to the right of the rightmost x.\u000a\u000aOptional args lo (default 0) and hi (default len(a)) bound the\u000aslice of a to be searched.\u000a
p113
sasg10
L1L
s.