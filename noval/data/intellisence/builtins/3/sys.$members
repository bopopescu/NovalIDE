(dp0
Vname
p1
Vsys
p2
sVis_builtin
p3
I01
sVdoc
p4
VThis module provides access to some objects used or maintained by the\u000ainterpreter and to functions that interact strongly with the interpreter.\u000a\u000aDynamic objects:\u000a\u000aargv -- command line arguments; argv[0] is the script pathname if known\u000apath -- module search path; path[0] is the script directory, else ''\u000amodules -- dictionary of loaded modules\u000a\u000adisplayhook -- called to show results in an interactive session\u000aexcepthook -- called to handle any uncaught exception other than SystemExit\u000a  To customize printing in an interactive session or to install a custom\u000a  top-level exception handler, assign other functions to replace these.\u000a\u000astdin -- standard input file object; used by input()\u000astdout -- standard output file object; used by print()\u000astderr -- standard error object; used for error messages\u000a  By assigning other file objects (or objects that behave like files)\u000a  to these, it is possible to redirect all of the interpreter's I/O.\u000a\u000alast_type -- type of last uncaught exception\u000alast_value -- value of last uncaught exception\u000alast_traceback -- traceback of last uncaught exception\u000a  These three are only available in an interactive session after a\u000a  traceback has been printed.\u000a\u000aStatic objects:\u000a\u000abuiltin_module_names -- tuple of module names built into this interpreter\u000acopyright -- copyright notice pertaining to this interpreter\u000aexec_prefix -- prefix used to find the machine-specific Python library\u000aexecutable -- absolute path of the executable binary of the Python interpreter\u000afloat_info -- a struct sequence with information about the float implementation.\u000afloat_repr_style -- string indicating the style of repr() output for floats\u000ahash_info -- a struct sequence with information about the hash algorithm.\u000ahexversion -- version information encoded as a single integer\u000aimplementation -- Python implementation information.\u000aint_info -- a struct sequence with information about the int implementation.\u000amaxsize -- the largest supported length of containers.\u000amaxunicode -- the value of the largest Unicode code point\u000aplatform -- platform identifier\u000aprefix -- prefix used to find the Python library\u000athread_info -- a struct sequence with information about the thread implementation.\u000aversion -- the version of this interpreter as a string\u000aversion_info -- version information as a named tuple\u000adllhandle -- [Windows only] integer handle of the Python DLL\u000awinver -- [Windows only] version number of the Python DLL\u000a_enablelegacywindowsfsencoding -- [Windows only] \u000a__stdin__ -- the original stdin; don't touch!\u000a__stdout__ -- the original stdout; don't touch!\u000a__stderr__ -- the original stderr; don't touch!\u000a__displayhook__ -- the original displayhook; don't touch!\u000a__excepthook__ -- the original excepthook; don't touch!\u000a\u000aFunctions:\u000a\u000adisplayhook() -- print an object to the screen, and save it in builtins._\u000aexcepthook() -- print an exception and its traceback to sys.stderr\u000aexc_info() -- return thread-safe information about the current exception\u000aexit() -- exit the interpreter by raising SystemExit\u000agetdlopenflags() -- returns flags to be used for dlopen() calls\u000agetprofile() -- get the global profiling function\u000agetrefcount() -- return the reference count for an object (plus one :-)\u000agetrecursionlimit() -- return the max recursion depth for the interpreter\u000agetsizeof() -- return the size of an object in bytes\u000agettrace() -- get the global debug tracing function\u000asetcheckinterval() -- control how often the interpreter checks for events\u000asetdlopenflags() -- set the flags to be used for dlopen() calls\u000asetprofile() -- set the global profiling function\u000asetrecursionlimit() -- set the max recursion depth for the interpreter\u000asettrace() -- set the global debug tracing function\u000a
p5
sVchilds
p6
(lp7
(dp8
g1
V__displayhook__
p9
sg3
I01
sVtype
p10
L2L
sg4
Vdisplayhook(object) -> None\u000a\u000aPrint an object to sys.stdout and also save it in builtins._\u000a
p11
sa(dp12
g1
V__doc__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__excepthook__
p15
sg3
I01
sg10
L2L
sg4
Vexcepthook(exctype, value, traceback) -> None\u000a\u000aHandle an exception by displaying it with a traceback on sys.stderr.\u000a
p16
sa(dp17
g1
V__interactivehook__
p18
sg3
I01
sg10
L5L
sa(dp19
g1
V__loader__
p20
sg3
I01
sg10
L3L
sg6
(lp21
(dp22
g1
V__delattr__
p23
sg3
I01
sg10
L5L
sa(dp24
g1
V__dict__
p25
sg3
I01
sg10
L5L
sa(dp26
g1
V__dir__
p27
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p28
sa(dp29
g1
g13
sg3
I01
sg10
L5L
sa(dp30
g1
V__eq__
p31
sg3
I01
sg10
L5L
sa(dp32
g1
V__format__
p33
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p34
sa(dp35
g1
V__ge__
p36
sg3
I01
sg10
L5L
sa(dp37
g1
V__getattribute__
p38
sg3
I01
sg10
L5L
sa(dp39
g1
V__gt__
p40
sg3
I01
sg10
L5L
sa(dp41
g1
V__hash__
p42
sg3
I01
sg10
L5L
sa(dp43
g1
V__init__
p44
sg3
I01
sg10
L5L
sa(dp45
g1
V__init_subclass__
p46
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p47
sa(dp48
g1
V__le__
p49
sg3
I01
sg10
L5L
sa(dp50
g1
V__lt__
p51
sg3
I01
sg10
L5L
sa(dp52
g1
V__module__
p53
sg3
I01
sg10
L5L
sa(dp54
g1
V__ne__
p55
sg3
I01
sg10
L5L
sa(dp56
g1
V__new__
p57
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p58
sa(dp59
g1
V__reduce__
p60
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p61
sa(dp62
g1
V__reduce_ex__
p63
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p64
sa(dp65
g1
V__repr__
p66
sg3
I01
sg10
L5L
sa(dp67
g1
V__setattr__
p68
sg3
I01
sg10
L5L
sa(dp69
g1
V__sizeof__
p70
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p71
sa(dp72
g1
V__str__
p73
sg3
I01
sg10
L5L
sa(dp74
g1
V__subclasshook__
p75
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p76
sa(dp77
g1
V__weakref__
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Vcreate_module
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vexec_module
p82
sg3
I01
sg10
L5L
sa(dp83
g1
Vfind_module
p84
sg3
I01
sg10
L5L
sa(dp85
g1
Vfind_spec
p86
sg3
I01
sg10
L5L
sa(dp87
g1
Vget_code
p88
sg3
I01
sg10
L5L
sa(dp89
g1
Vget_source
p90
sg3
I01
sg10
L5L
sa(dp91
g1
Vis_package
p92
sg3
I01
sg10
L5L
sa(dp93
g1
Vload_module
p94
sg3
I01
sg10
L5L
sa(dp95
g1
Vmodule_repr
p96
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p97
sa(dp98
g1
V__name__
p99
sg3
I01
sg10
L5L
sa(dp100
g1
V__package__
p101
sg3
I01
sg10
L5L
sa(dp102
g1
V__spec__
p103
sg3
I01
sg10
L5L
sa(dp104
g1
V__stderr__
p105
sg3
I01
sg10
L5L
sa(dp106
g1
V__stdin__
p107
sg3
I01
sg10
L5L
sa(dp108
g1
V__stdout__
p109
sg3
I01
sg10
L5L
sa(dp110
g1
V_clear_type_cache
p111
sg3
I01
sg10
L2L
sg4
V_clear_type_cache() -> None\u000aClear the internal type lookup cache.
p112
sa(dp113
g1
V_current_frames
p114
sg3
I01
sg10
L2L
sg4
V_current_frames() -> dictionary\u000a\u000aReturn a dictionary mapping each current thread T's thread id to T's\u000acurrent stack frame.\u000a\u000aThis function should be used for specialized purposes only.
p115
sa(dp116
g1
V_debugmallocstats
p117
sg3
I01
sg10
L2L
sg4
V_debugmallocstats()\u000a\u000aPrint summary info to stderr about the state of\u000apymalloc's structures.\u000a\u000aIn Py_DEBUG mode, also perform some expensive internal consistency\u000achecks.\u000a
p118
sa(dp119
g1
V_enablelegacywindowsfsencoding
p120
sg3
I01
sg10
L2L
sg4
V_enablelegacywindowsfsencoding()\u000a\u000aChanges the default filesystem encoding to mbcs:replace for consistency\u000awith earlier versions of Python. See PEP 529 for more information.\u000a\u000aThis is equivalent to defining the PYTHONLEGACYWINDOWSFSENCODING \u000aenvironment variable before launching Python.
p121
sa(dp122
g1
V_getframe
p123
sg3
I01
sg10
L2L
sg4
V_getframe([depth]) -> frameobject\u000a\u000aReturn a frame object from the call stack.  If optional integer depth is\u000agiven, return the frame object that many calls below the top of the stack.\u000aIf that is deeper than the call stack, ValueError is raised.  The default\u000afor depth is zero, returning the frame at the top of the call stack.\u000a\u000aThis function should be used for internal and specialized\u000apurposes only.
p124
sa(dp125
g1
V_git
p126
sg3
I01
sg10
L5L
sa(dp127
g1
V_home
p128
sg3
I01
sg10
L5L
sa(dp129
g1
V_xoptions
p130
sg3
I01
sg10
L5L
sa(dp131
g1
Vapi_version
p132
sg3
I01
sg10
L5L
sa(dp133
g1
Vargv
p134
sg3
I01
sg10
L5L
sa(dp135
g1
Vbase_exec_prefix
p136
sg3
I01
sg10
L5L
sa(dp137
g1
Vbase_prefix
p138
sg3
I01
sg10
L5L
sa(dp139
g1
Vbuiltin_module_names
p140
sg3
I01
sg10
L5L
sa(dp141
g1
Vbyteorder
p142
sg3
I01
sg10
L5L
sa(dp143
g1
Vcall_tracing
p144
sg3
I01
sg10
L2L
sg4
Vcall_tracing(func, args) -> object\u000a\u000aCall func(*args), while tracing is enabled.  The tracing state is\u000asaved, and restored afterwards.  This is intended to be called from\u000aa debugger from a checkpoint, to recursively debug some other code.
p145
sa(dp146
g1
Vcallstats
p147
sg3
I01
sg10
L2L
sg4
Vcallstats() -> tuple of integers\u000a\u000aReturn a tuple of function call statistics, if CALL_PROFILE was defined\u000awhen Python was built.  Otherwise, return None.\u000a\u000aWhen enabled, this function returns detailed, implementation-specific\u000adetails about the number of function calls executed. The return value is\u000aa 11-tuple where the entries in the tuple are counts of:\u000a0. all function calls\u000a1. calls to PyFunction_Type objects\u000a2. PyFunction calls that do not create an argument tuple\u000a3. PyFunction calls that do not create an argument tuple\u000a   and bypass PyEval_EvalCodeEx()\u000a4. PyMethod calls\u000a5. PyMethod calls on bound methods\u000a6. PyType calls\u000a7. PyCFunction calls\u000a8. generator calls\u000a9. All other calls\u000a10. Number of stack pops performed by call_function()
p148
sa(dp149
g1
Vcopyright
p150
sg3
I01
sg10
L5L
sa(dp151
g1
Vdisplayhook
p152
sg3
I01
sg10
L2L
sg4
Vdisplayhook(object) -> None\u000a\u000aPrint an object to sys.stdout and also save it in builtins._\u000a
p153
sa(dp154
g1
Vdllhandle
p155
sg3
I01
sg10
L5L
sa(dp156
g1
Vdont_write_bytecode
p157
sg3
I01
sg10
L5L
sa(dp158
g1
Vexc_info
p159
sg3
I01
sg10
L2L
sg4
Vexc_info() -> (type, value, traceback)\u000a\u000aReturn information about the most recent exception caught by an except\u000aclause in the current stack frame or in an older stack frame.
p160
sa(dp161
g1
Vexcepthook
p162
sg3
I01
sg10
L2L
sg4
Vexcepthook(exctype, value, traceback) -> None\u000a\u000aHandle an exception by displaying it with a traceback on sys.stderr.\u000a
p163
sa(dp164
g1
Vexec_prefix
p165
sg3
I01
sg10
L5L
sa(dp166
g1
Vexecutable
p167
sg3
I01
sg10
L5L
sa(dp168
g1
Vexit
p169
sg3
I01
sg10
L2L
sg4
Vexit([status])\u000a\u000aExit the interpreter by raising SystemExit(status).\u000aIf the status is omitted or None, it defaults to zero (i.e., success).\u000aIf the status is an integer, it will be used as the system exit status.\u000aIf it is another kind of object, it will be printed and the system\u000aexit status will be one (i.e., failure).
p170
sa(dp171
g1
Vflags
p172
sg3
I01
sg10
L5L
sa(dp173
g1
Vfloat_info
p174
sg3
I01
sg10
L5L
sa(dp175
g1
Vfloat_repr_style
p176
sg3
I01
sg10
L5L
sa(dp177
g1
Vget_asyncgen_hooks
p178
sg3
I01
sg10
L2L
sg4
Vget_asyncgen_hooks()\u000a\u000aReturn a namedtuple of installed asynchronous generators hooks (firstiter, finalizer).
p179
sa(dp180
g1
Vget_coroutine_wrapper
p181
sg3
I01
sg10
L2L
sg4
Vget_coroutine_wrapper()\u000a\u000aReturn the wrapper for coroutine objects set by sys.set_coroutine_wrapper.
p182
sa(dp183
g1
Vgetallocatedblocks
p184
sg3
I01
sg10
L2L
sg4
Vgetallocatedblocks() -> integer\u000a\u000aReturn the number of memory blocks currently allocated, regardless of their\u000asize.
p185
sa(dp186
g1
Vgetcheckinterval
p187
sg3
I01
sg10
L2L
sg4
Vgetcheckinterval() -> current check interval; see setcheckinterval().
p188
sa(dp189
g1
Vgetdefaultencoding
p190
sg3
I01
sg10
L2L
sg4
Vgetdefaultencoding() -> string\u000a\u000aReturn the current default string encoding used by the Unicode \u000aimplementation.
p191
sa(dp192
g1
Vgetfilesystemencodeerrors
p193
sg3
I01
sg10
L2L
sg4
Vgetfilesystemencodeerrors() -> string\u000a\u000aReturn the error mode used to convert Unicode filenames in\u000aoperating system filenames.
p194
sa(dp195
g1
Vgetfilesystemencoding
p196
sg3
I01
sg10
L2L
sg4
Vgetfilesystemencoding() -> string\u000a\u000aReturn the encoding used to convert Unicode filenames in\u000aoperating system filenames.
p197
sa(dp198
g1
Vgetprofile
p199
sg3
I01
sg10
L2L
sg4
Vgetprofile()\u000a\u000aReturn the profiling function set with sys.setprofile.\u000aSee the profiler chapter in the library manual.
p200
sa(dp201
g1
Vgetrecursionlimit
p202
sg3
I01
sg10
L2L
sg4
Vgetrecursionlimit()\u000a\u000aReturn the current value of the recursion limit, the maximum depth\u000aof the Python interpreter stack.  This limit prevents infinite\u000arecursion from causing an overflow of the C stack and crashing Python.
p203
sa(dp204
g1
Vgetrefcount
p205
sg3
I01
sg10
L2L
sg4
Vgetrefcount(object) -> integer\u000a\u000aReturn the reference count of object.  The count returned is generally\u000aone higher than you might expect, because it includes the (temporary)\u000areference as an argument to getrefcount().
p206
sa(dp207
g1
Vgetsizeof
p208
sg3
I01
sg10
L2L
sg4
Vgetsizeof(object, default) -> int\u000a\u000aReturn the size of object in bytes.
p209
sa(dp210
g1
Vgetswitchinterval
p211
sg3
I01
sg10
L2L
sg4
Vgetswitchinterval() -> current thread switch interval; see setswitchinterval().
p212
sa(dp213
g1
Vgettrace
p214
sg3
I01
sg10
L2L
sg4
Vgettrace()\u000a\u000aReturn the global debug tracing function set with sys.settrace.\u000aSee the debugger chapter in the library manual.
p215
sa(dp216
g1
Vgetwindowsversion
p217
sg3
I01
sg10
L2L
sg4
Vgetwindowsversion()\u000a\u000aReturn information about the running version of Windows as a named tuple.\u000aThe members are named: major, minor, build, platform, service_pack,\u000aservice_pack_major, service_pack_minor, suite_mask, and product_type. For\u000abackward compatibility, only the first 5 items are available by indexing.\u000aAll elements are numbers, except service_pack and platform_type which are\u000astrings, and platform_version which is a 3-tuple. Platform is always 2.\u000aProduct_type may be 1 for a workstation, 2 for a domain controller, 3 for a\u000aserver. Platform_version is a 3-tuple containing a version number that is\u000aintended for identifying the OS rather than feature detection.
p218
sa(dp219
g1
Vhash_info
p220
sg3
I01
sg10
L5L
sa(dp221
g1
Vhexversion
p222
sg3
I01
sg10
L5L
sa(dp223
g1
Vimplementation
p224
sg3
I01
sg10
L5L
sa(dp225
g1
Vint_info
p226
sg3
I01
sg10
L5L
sa(dp227
g1
Vintern
p228
sg3
I01
sg10
L2L
sg4
Vintern(string) -> string\u000a\u000a``Intern'' the given string.  This enters the string in the (global)\u000atable of interned strings whose purpose is to speed up dictionary lookups.\u000aReturn the string itself or the previously interned string object with the\u000asame value.
p229
sa(dp230
g1
Vis_finalizing
p231
sg3
I01
sg10
L2L
sg4
Vis_finalizing()\u000aReturn True if Python is exiting.
p232
sa(dp233
g1
Vmaxsize
p234
sg3
I01
sg10
L5L
sa(dp235
g1
Vmaxunicode
p236
sg3
I01
sg10
L5L
sa(dp237
g1
Vmeta_path
p238
sg3
I01
sg10
L5L
sa(dp239
g1
Vmodules
p240
sg3
I01
sg10
L5L
sa(dp241
g1
Vpath
p242
sg3
I01
sg10
L5L
sa(dp243
g1
Vpath_hooks
p244
sg3
I01
sg10
L5L
sa(dp245
g1
Vpath_importer_cache
p246
sg3
I01
sg10
L5L
sa(dp247
g1
Vplatform
p248
sg3
I01
sg10
L5L
sa(dp249
g1
Vprefix
p250
sg3
I01
sg10
L5L
sa(dp251
g1
Vset_asyncgen_hooks
p252
sg3
I01
sg10
L2L
sg4
Vset_asyncgen_hooks(*, firstiter=None, finalizer=None)\u000a\u000aSet a finalizer for async generators objects.
p253
sa(dp254
g1
Vset_coroutine_wrapper
p255
sg3
I01
sg10
L2L
sg4
Vset_coroutine_wrapper(wrapper)\u000a\u000aSet a wrapper for coroutine objects.
p256
sa(dp257
g1
Vsetcheckinterval
p258
sg3
I01
sg10
L2L
sg4
Vsetcheckinterval(n)\u000a\u000aTell the Python interpreter to check for asynchronous events every\u000an instructions.  This also affects how often thread switches occur.
p259
sa(dp260
g1
Vsetprofile
p261
sg3
I01
sg10
L2L
sg4
Vsetprofile(function)\u000a\u000aSet the profiling function.  It will be called on each function call\u000aand return.  See the profiler chapter in the library manual.
p262
sa(dp263
g1
Vsetrecursionlimit
p264
sg3
I01
sg10
L2L
sg4
Vsetrecursionlimit(n)\u000a\u000aSet the maximum depth of the Python interpreter stack to n.  This\u000alimit prevents infinite recursion from causing an overflow of the C\u000astack and crashing Python.  The highest possible limit is platform-\u000adependent.
p265
sa(dp266
g1
Vsetswitchinterval
p267
sg3
I01
sg10
L2L
sg4
Vsetswitchinterval(n)\u000a\u000aSet the ideal thread switching delay inside the Python interpreter\u000aThe actual frequency of switching threads can be lower if the\u000ainterpreter executes long sequences of uninterruptible code\u000a(this is implementation-specific and workload-dependent).\u000a\u000aThe parameter must represent the desired switching delay in seconds\u000aA typical value is 0.005 (5 milliseconds).
p268
sa(dp269
g1
Vsettrace
p270
sg3
I01
sg10
L2L
sg4
Vsettrace(function)\u000a\u000aSet the global debug tracing function.  It will be called on each\u000afunction call.  See the debugger chapter in the library manual.
p271
sa(dp272
g1
Vstderr
p273
sg3
I01
sg10
L5L
sa(dp274
g1
Vstdin
p275
sg3
I01
sg10
L5L
sa(dp276
g1
Vstdout
p277
sg3
I01
sg10
L5L
sa(dp278
g1
Vthread_info
p279
sg3
I01
sg10
L5L
sa(dp280
g1
Vversion
p281
sg3
I01
sg10
L5L
sa(dp282
g1
Vversion_info
p283
sg3
I01
sg10
L5L
sa(dp284
g1
Vwarnoptions
p285
sg3
I01
sg10
L5L
sa(dp286
g1
Vwinver
p287
sg3
I01
sg10
L5L
sasg10
L1L
s.