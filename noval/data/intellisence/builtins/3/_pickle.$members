(dp0
Vname
p1
V_pickle
p2
sVis_builtin
p3
I01
sVdoc
p4
VOptimized C implementation for the Python pickle module.
p5
sVchilds
p6
(lp7
(dp8
g1
VPickleError
p9
sg3
I01
sVtype
p10
L3L
sg6
(lp11
(dp12
g1
V__cause__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__context__
p15
sg3
I01
sg10
L5L
sa(dp16
g1
V__delattr__
p17
sg3
I01
sg10
L5L
sa(dp18
g1
V__dict__
p19
sg3
I01
sg10
L5L
sa(dp20
g1
V__dir__
p21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p22
sa(dp23
g1
V__doc__
p24
sg3
I01
sg10
L5L
sa(dp25
g1
V__eq__
p26
sg3
I01
sg10
L5L
sa(dp27
g1
V__format__
p28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p29
sa(dp30
g1
V__ge__
p31
sg3
I01
sg10
L5L
sa(dp32
g1
V__getattribute__
p33
sg3
I01
sg10
L5L
sa(dp34
g1
V__gt__
p35
sg3
I01
sg10
L5L
sa(dp36
g1
V__hash__
p37
sg3
I01
sg10
L5L
sa(dp38
g1
V__init__
p39
sg3
I01
sg10
L5L
sa(dp40
g1
V__init_subclass__
p41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p42
sa(dp43
g1
V__le__
p44
sg3
I01
sg10
L5L
sa(dp45
g1
V__lt__
p46
sg3
I01
sg10
L5L
sa(dp47
g1
V__module__
p48
sg3
I01
sg10
L5L
sa(dp49
g1
V__ne__
p50
sg3
I01
sg10
L5L
sa(dp51
g1
V__new__
p52
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p53
sa(dp54
g1
V__reduce__
p55
sg3
I01
sg10
L2L
sg4
Nsa(dp56
g1
V__reduce_ex__
p57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p58
sa(dp59
g1
V__repr__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__setattr__
p62
sg3
I01
sg10
L5L
sa(dp63
g1
V__setstate__
p64
sg3
I01
sg10
L2L
sg4
Nsa(dp65
g1
V__sizeof__
p66
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p67
sa(dp68
g1
V__str__
p69
sg3
I01
sg10
L5L
sa(dp70
g1
V__subclasshook__
p71
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p72
sa(dp73
g1
V__suppress_context__
p74
sg3
I01
sg10
L5L
sa(dp75
g1
V__traceback__
p76
sg3
I01
sg10
L5L
sa(dp77
g1
V__weakref__
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Vargs
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vwith_traceback
p82
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p83
sasg4
Nsa(dp84
g1
VPickler
p85
sg3
I01
sg10
L3L
sg6
(lp86
(dp87
g1
g17
sg3
I01
sg10
L5L
sa(dp88
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p89
sa(dp90
g1
g24
sg3
I01
sg10
L5L
sa(dp91
g1
g26
sg3
I01
sg10
L5L
sa(dp92
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p93
sa(dp94
g1
g31
sg3
I01
sg10
L5L
sa(dp95
g1
g33
sg3
I01
sg10
L5L
sa(dp96
g1
g35
sg3
I01
sg10
L5L
sa(dp97
g1
g37
sg3
I01
sg10
L5L
sa(dp98
g1
g39
sg3
I01
sg10
L5L
sa(dp99
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p100
sa(dp101
g1
g44
sg3
I01
sg10
L5L
sa(dp102
g1
g46
sg3
I01
sg10
L5L
sa(dp103
g1
g50
sg3
I01
sg10
L5L
sa(dp104
g1
g52
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p105
sa(dp106
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p107
sa(dp108
g1
g57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p109
sa(dp110
g1
g60
sg3
I01
sg10
L5L
sa(dp111
g1
g62
sg3
I01
sg10
L5L
sa(dp112
g1
g66
sg3
I01
sg10
L2L
sg4
VReturns size in memory, in bytes.
p113
sa(dp114
g1
g69
sg3
I01
sg10
L5L
sa(dp115
g1
g71
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p116
sa(dp117
g1
Vbin
p118
sg3
I01
sg10
L5L
sa(dp119
g1
Vclear_memo
p120
sg3
I01
sg10
L2L
sg4
VClears the pickler's "memo".\u000a\u000aThe memo is the data structure that remembers which objects the\u000apickler has already seen, so that shared or recursive objects are\u000apickled by reference and not by value.  This method is useful when\u000are-using picklers.
p121
sa(dp122
g1
Vdispatch_table
p123
sg3
I01
sg10
L5L
sa(dp124
g1
Vdump
p125
sg3
I01
sg10
L2L
sg4
VWrite a pickled representation of the given object to the open file.
p126
sa(dp127
g1
Vfast
p128
sg3
I01
sg10
L5L
sa(dp129
g1
Vmemo
p130
sg3
I01
sg10
L5L
sa(dp131
g1
Vpersistent_id
p132
sg3
I01
sg10
L5L
sasg4
VThis takes a binary file for writing a pickle data stream.\u000a\u000aThe optional *protocol* argument tells the pickler to use the given\u000aprotocol; supported protocols are 0, 1, 2, 3 and 4.  The default\u000aprotocol is 3; a backward-incompatible protocol designed for Python 3.\u000a\u000aSpecifying a negative protocol version selects the highest protocol\u000aversion supported.  The higher the protocol used, the more recent the\u000aversion of Python needed to read the pickle produced.\u000a\u000aThe *file* argument must have a write() method that accepts a single\u000abytes argument. It can thus be a file object opened for binary\u000awriting, an io.BytesIO instance, or any other custom object that meets\u000athis interface.\u000a\u000aIf *fix_imports* is True and protocol is less than 3, pickle will try\u000ato map the new Python 3 names to the old module names used in Python\u000a2, so that the pickle data stream is readable with Python 2.
p133
sa(dp134
g1
VPicklingError
p135
sg3
I01
sg10
L3L
sg6
(lp136
(dp137
g1
g13
sg3
I01
sg10
L5L
sa(dp138
g1
g15
sg3
I01
sg10
L5L
sa(dp139
g1
g17
sg3
I01
sg10
L5L
sa(dp140
g1
g19
sg3
I01
sg10
L5L
sa(dp141
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p142
sa(dp143
g1
g24
sg3
I01
sg10
L5L
sa(dp144
g1
g26
sg3
I01
sg10
L5L
sa(dp145
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p146
sa(dp147
g1
g31
sg3
I01
sg10
L5L
sa(dp148
g1
g33
sg3
I01
sg10
L5L
sa(dp149
g1
g35
sg3
I01
sg10
L5L
sa(dp150
g1
g37
sg3
I01
sg10
L5L
sa(dp151
g1
g39
sg3
I01
sg10
L5L
sa(dp152
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p153
sa(dp154
g1
g44
sg3
I01
sg10
L5L
sa(dp155
g1
g46
sg3
I01
sg10
L5L
sa(dp156
g1
g48
sg3
I01
sg10
L5L
sa(dp157
g1
g50
sg3
I01
sg10
L5L
sa(dp158
g1
g52
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p159
sa(dp160
g1
g55
sg3
I01
sg10
L2L
sg4
Nsa(dp161
g1
g57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p162
sa(dp163
g1
g60
sg3
I01
sg10
L5L
sa(dp164
g1
g62
sg3
I01
sg10
L5L
sa(dp165
g1
g64
sg3
I01
sg10
L2L
sg4
Nsa(dp166
g1
g66
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p167
sa(dp168
g1
g69
sg3
I01
sg10
L5L
sa(dp169
g1
g71
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p170
sa(dp171
g1
g74
sg3
I01
sg10
L5L
sa(dp172
g1
g76
sg3
I01
sg10
L5L
sa(dp173
g1
g78
sg3
I01
sg10
L5L
sa(dp174
g1
g80
sg3
I01
sg10
L5L
sa(dp175
g1
g82
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p176
sasg4
Nsa(dp177
g1
VUnpickler
p178
sg3
I01
sg10
L3L
sg6
(lp179
(dp180
g1
g17
sg3
I01
sg10
L5L
sa(dp181
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p182
sa(dp183
g1
g24
sg3
I01
sg10
L5L
sa(dp184
g1
g26
sg3
I01
sg10
L5L
sa(dp185
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p186
sa(dp187
g1
g31
sg3
I01
sg10
L5L
sa(dp188
g1
g33
sg3
I01
sg10
L5L
sa(dp189
g1
g35
sg3
I01
sg10
L5L
sa(dp190
g1
g37
sg3
I01
sg10
L5L
sa(dp191
g1
g39
sg3
I01
sg10
L5L
sa(dp192
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p193
sa(dp194
g1
g44
sg3
I01
sg10
L5L
sa(dp195
g1
g46
sg3
I01
sg10
L5L
sa(dp196
g1
g50
sg3
I01
sg10
L5L
sa(dp197
g1
g52
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p198
sa(dp199
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p200
sa(dp201
g1
g57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p202
sa(dp203
g1
g60
sg3
I01
sg10
L5L
sa(dp204
g1
g62
sg3
I01
sg10
L5L
sa(dp205
g1
g66
sg3
I01
sg10
L2L
sg4
VReturns size in memory, in bytes.
p206
sa(dp207
g1
g69
sg3
I01
sg10
L5L
sa(dp208
g1
g71
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p209
sa(dp210
g1
Vfind_class
p211
sg3
I01
sg10
L2L
sg4
VReturn an object from a specified module.\u000a\u000aIf necessary, the module will be imported. Subclasses may override\u000athis method (e.g. to restrict unpickling of arbitrary classes and\u000afunctions).\u000a\u000aThis method is called whenever a class or a function object is\u000aneeded.  Both arguments passed are str objects.
p212
sa(dp213
g1
Vload
p214
sg3
I01
sg10
L2L
sg4
VLoad a pickle.\u000a\u000aRead a pickled object representation from the open file object given\u000ain the constructor, and return the reconstituted object hierarchy\u000aspecified therein.
p215
sa(dp216
g1
g130
sg3
I01
sg10
L5L
sa(dp217
g1
Vpersistent_load
p218
sg3
I01
sg10
L5L
sasg4
VThis takes a binary file for reading a pickle data stream.\u000a\u000aThe protocol version of the pickle is detected automatically, so no\u000aprotocol argument is needed.  Bytes past the pickled object's\u000arepresentation are ignored.\u000a\u000aThe argument *file* must have two methods, a read() method that takes\u000aan integer argument, and a readline() method that requires no\u000aarguments.  Both methods should return bytes.  Thus *file* can be a\u000abinary file object opened for reading, an io.BytesIO object, or any\u000aother custom object that meets this interface.\u000a\u000aOptional keyword arguments are *fix_imports*, *encoding* and *errors*,\u000awhich are used to control compatibility support for pickle stream\u000agenerated by Python 2.  If *fix_imports* is True, pickle will try to\u000amap the old Python 2 names to the new names used in Python 3.  The\u000a*encoding* and *errors* tell pickle how to decode 8-bit string\u000ainstances pickled by Python 2; these default to 'ASCII' and 'strict',\u000arespectively.  The *encoding* can be 'bytes' to read these 8-bit\u000astring instances as bytes objects.
p219
sa(dp220
g1
VUnpicklingError
p221
sg3
I01
sg10
L3L
sg6
(lp222
(dp223
g1
g13
sg3
I01
sg10
L5L
sa(dp224
g1
g15
sg3
I01
sg10
L5L
sa(dp225
g1
g17
sg3
I01
sg10
L5L
sa(dp226
g1
g19
sg3
I01
sg10
L5L
sa(dp227
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p228
sa(dp229
g1
g24
sg3
I01
sg10
L5L
sa(dp230
g1
g26
sg3
I01
sg10
L5L
sa(dp231
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p232
sa(dp233
g1
g31
sg3
I01
sg10
L5L
sa(dp234
g1
g33
sg3
I01
sg10
L5L
sa(dp235
g1
g35
sg3
I01
sg10
L5L
sa(dp236
g1
g37
sg3
I01
sg10
L5L
sa(dp237
g1
g39
sg3
I01
sg10
L5L
sa(dp238
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p239
sa(dp240
g1
g44
sg3
I01
sg10
L5L
sa(dp241
g1
g46
sg3
I01
sg10
L5L
sa(dp242
g1
g48
sg3
I01
sg10
L5L
sa(dp243
g1
g50
sg3
I01
sg10
L5L
sa(dp244
g1
g52
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p245
sa(dp246
g1
g55
sg3
I01
sg10
L2L
sg4
Nsa(dp247
g1
g57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p248
sa(dp249
g1
g60
sg3
I01
sg10
L5L
sa(dp250
g1
g62
sg3
I01
sg10
L5L
sa(dp251
g1
g64
sg3
I01
sg10
L2L
sg4
Nsa(dp252
g1
g66
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p253
sa(dp254
g1
g69
sg3
I01
sg10
L5L
sa(dp255
g1
g71
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p256
sa(dp257
g1
g74
sg3
I01
sg10
L5L
sa(dp258
g1
g76
sg3
I01
sg10
L5L
sa(dp259
g1
g78
sg3
I01
sg10
L5L
sa(dp260
g1
g80
sg3
I01
sg10
L5L
sa(dp261
g1
g82
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p262
sasg4
Nsa(dp263
g1
g24
sg3
I01
sg10
L5L
sa(dp264
g1
V__loader__
p265
sg3
I01
sg10
L3L
sg6
(lp266
(dp267
g1
g17
sg3
I01
sg10
L5L
sa(dp268
g1
g19
sg3
I01
sg10
L5L
sa(dp269
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p270
sa(dp271
g1
g24
sg3
I01
sg10
L5L
sa(dp272
g1
g26
sg3
I01
sg10
L5L
sa(dp273
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p274
sa(dp275
g1
g31
sg3
I01
sg10
L5L
sa(dp276
g1
g33
sg3
I01
sg10
L5L
sa(dp277
g1
g35
sg3
I01
sg10
L5L
sa(dp278
g1
g37
sg3
I01
sg10
L5L
sa(dp279
g1
g39
sg3
I01
sg10
L5L
sa(dp280
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p281
sa(dp282
g1
g44
sg3
I01
sg10
L5L
sa(dp283
g1
g46
sg3
I01
sg10
L5L
sa(dp284
g1
g48
sg3
I01
sg10
L5L
sa(dp285
g1
g50
sg3
I01
sg10
L5L
sa(dp286
g1
g52
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p287
sa(dp288
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p289
sa(dp290
g1
g57
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p291
sa(dp292
g1
g60
sg3
I01
sg10
L5L
sa(dp293
g1
g62
sg3
I01
sg10
L5L
sa(dp294
g1
g66
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p295
sa(dp296
g1
g69
sg3
I01
sg10
L5L
sa(dp297
g1
g71
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p298
sa(dp299
g1
g78
sg3
I01
sg10
L5L
sa(dp300
g1
Vcreate_module
p301
sg3
I01
sg10
L5L
sa(dp302
g1
Vexec_module
p303
sg3
I01
sg10
L5L
sa(dp304
g1
Vfind_module
p305
sg3
I01
sg10
L5L
sa(dp306
g1
Vfind_spec
p307
sg3
I01
sg10
L5L
sa(dp308
g1
Vget_code
p309
sg3
I01
sg10
L5L
sa(dp310
g1
Vget_source
p311
sg3
I01
sg10
L5L
sa(dp312
g1
Vis_package
p313
sg3
I01
sg10
L5L
sa(dp314
g1
Vload_module
p315
sg3
I01
sg10
L5L
sa(dp316
g1
Vmodule_repr
p317
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p318
sa(dp319
g1
V__name__
p320
sg3
I01
sg10
L5L
sa(dp321
g1
V__package__
p322
sg3
I01
sg10
L5L
sa(dp323
g1
V__spec__
p324
sg3
I01
sg10
L5L
sa(dp325
g1
g125
sg3
I01
sg10
L2L
sg4
VWrite a pickled representation of obj to the open file object file.\u000a\u000aThis is equivalent to ``Pickler(file, protocol).dump(obj)``, but may\u000abe more efficient.\u000a\u000aThe optional *protocol* argument tells the pickler to use the given\u000aprotocol supported protocols are 0, 1, 2, 3 and 4.  The default\u000aprotocol is 3; a backward-incompatible protocol designed for Python 3.\u000a\u000aSpecifying a negative protocol version selects the highest protocol\u000aversion supported.  The higher the protocol used, the more recent the\u000aversion of Python needed to read the pickle produced.\u000a\u000aThe *file* argument must have a write() method that accepts a single\u000abytes argument.  It can thus be a file object opened for binary\u000awriting, an io.BytesIO instance, or any other custom object that meets\u000athis interface.\u000a\u000aIf *fix_imports* is True and protocol is less than 3, pickle will try\u000ato map the new Python 3 names to the old module names used in Python\u000a2, so that the pickle data stream is readable with Python 2.
p326
sa(dp327
g1
Vdumps
p328
sg3
I01
sg10
L2L
sg4
VReturn the pickled representation of the object as a bytes object.\u000a\u000aThe optional *protocol* argument tells the pickler to use the given\u000aprotocol; supported protocols are 0, 1, 2, 3 and 4.  The default\u000aprotocol is 3; a backward-incompatible protocol designed for Python 3.\u000a\u000aSpecifying a negative protocol version selects the highest protocol\u000aversion supported.  The higher the protocol used, the more recent the\u000aversion of Python needed to read the pickle produced.\u000a\u000aIf *fix_imports* is True and *protocol* is less than 3, pickle will\u000atry to map the new Python 3 names to the old module names used in\u000aPython 2, so that the pickle data stream is readable with Python 2.
p329
sa(dp330
g1
g214
sg3
I01
sg10
L2L
sg4
VRead and return an object from the pickle data stored in a file.\u000a\u000aThis is equivalent to ``Unpickler(file).load()``, but may be more\u000aefficient.\u000a\u000aThe protocol version of the pickle is detected automatically, so no\u000aprotocol argument is needed.  Bytes past the pickled object's\u000arepresentation are ignored.\u000a\u000aThe argument *file* must have two methods, a read() method that takes\u000aan integer argument, and a readline() method that requires no\u000aarguments.  Both methods should return bytes.  Thus *file* can be a\u000abinary file object opened for reading, an io.BytesIO object, or any\u000aother custom object that meets this interface.\u000a\u000aOptional keyword arguments are *fix_imports*, *encoding* and *errors*,\u000awhich are used to control compatibility support for pickle stream\u000agenerated by Python 2.  If *fix_imports* is True, pickle will try to\u000amap the old Python 2 names to the new names used in Python 3.  The\u000a*encoding* and *errors* tell pickle how to decode 8-bit string\u000ainstances pickled by Python 2; these default to 'ASCII' and 'strict',\u000arespectively.  The *encoding* can be 'bytes' to read these 8-bit\u000astring instances as bytes objects.
p331
sa(dp332
g1
Vloads
p333
sg3
I01
sg10
L2L
sg4
VRead and return an object from the given pickle data.\u000a\u000aThe protocol version of the pickle is detected automatically, so no\u000aprotocol argument is needed.  Bytes past the pickled object's\u000arepresentation are ignored.\u000a\u000aOptional keyword arguments are *fix_imports*, *encoding* and *errors*,\u000awhich are used to control compatibility support for pickle stream\u000agenerated by Python 2.  If *fix_imports* is True, pickle will try to\u000amap the old Python 2 names to the new names used in Python 3.  The\u000a*encoding* and *errors* tell pickle how to decode 8-bit string\u000ainstances pickled by Python 2; these default to 'ASCII' and 'strict',\u000arespectively.  The *encoding* can be 'bytes' to read these 8-bit\u000astring instances as bytes objects.
p334
sasg10
L1L
s.