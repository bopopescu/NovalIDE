(dp0
Vchilds
p1
(lp2
(dp3
g1
(lp4
(dp5
Vis_builtin
p6
I01
sVname
p7
V__cause__
p8
sVtype
p9
L5L
sa(dp10
g6
I01
sg7
V__context__
p11
sg9
L5L
sa(dp12
g6
I01
sg7
V__delattr__
p13
sg9
L5L
sa(dp14
g6
I01
sg7
V__dict__
p15
sg9
L5L
sa(dp16
g6
I01
sg7
V__dir__
p17
sg9
L2L
sVdoc
p18
V__dir__() -> list\u000adefault dir() implementation
p19
sa(dp20
g6
I01
sg7
V__doc__
p21
sg9
L5L
sa(dp22
g6
I01
sg7
V__eq__
p23
sg9
L5L
sa(dp24
g6
I01
sg7
V__format__
p25
sg9
L2L
sg18
Vdefault object formatter
p26
sa(dp27
g6
I01
sg7
V__ge__
p28
sg9
L5L
sa(dp29
g6
I01
sg7
V__getattribute__
p30
sg9
L5L
sa(dp31
g6
I01
sg7
V__gt__
p32
sg9
L5L
sa(dp33
g6
I01
sg7
V__hash__
p34
sg9
L5L
sa(dp35
g6
I01
sg7
V__init__
p36
sg9
L5L
sa(dp37
g6
I01
sg7
V__le__
p38
sg9
L5L
sa(dp39
g6
I01
sg7
V__lt__
p40
sg9
L5L
sa(dp41
g6
I01
sg7
V__ne__
p42
sg9
L5L
sa(dp43
g6
I01
sg7
V__new__
p44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p45
sa(dp46
g6
I01
sg7
V__reduce__
p47
sg9
L2L
sg18
Nsa(dp48
g6
I01
sg7
V__reduce_ex__
p49
sg9
L2L
sg18
Vhelper for pickle
p50
sa(dp51
g6
I01
sg7
V__repr__
p52
sg9
L5L
sa(dp53
g6
I01
sg7
V__setattr__
p54
sg9
L5L
sa(dp55
g6
I01
sg7
V__setstate__
p56
sg9
L2L
sg18
Nsa(dp57
g6
I01
sg7
V__sizeof__
p58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p59
sa(dp60
g6
I01
sg7
V__str__
p61
sg9
L5L
sa(dp62
g6
I01
sg7
V__subclasshook__
p63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p64
sa(dp65
g6
I01
sg7
V__suppress_context__
p66
sg9
L5L
sa(dp67
g6
I01
sg7
V__traceback__
p68
sg9
L5L
sa(dp69
g6
I01
sg7
Vargs
p70
sg9
L5L
sa(dp71
g6
I01
sg7
Vcharacters_written
p72
sg9
L5L
sa(dp73
g6
I01
sg7
Verrno
p74
sg9
L5L
sa(dp75
g6
I01
sg7
Vfilename
p76
sg9
L5L
sa(dp77
g6
I01
sg7
Vfilename2
p78
sg9
L5L
sa(dp79
g6
I01
sg7
Vstrerror
p80
sg9
L5L
sa(dp81
g6
I01
sg7
Vwith_traceback
p82
sg9
L2L
sg18
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p83
sasg6
I01
sg7
VBlockingIOError
p84
sg9
L3L
sg18
VI/O operation would block.
p85
sa(dp86
g1
(lp87
(dp88
g6
I01
sg7
V__del__
p89
sg9
L5L
sa(dp90
g6
I01
sg7
g13
sg9
L5L
sa(dp91
g6
I01
sg7
g15
sg9
L5L
sa(dp92
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p93
sa(dp94
g6
I01
sg7
g21
sg9
L5L
sa(dp95
g6
I01
sg7
V__enter__
p96
sg9
L2L
sg18
Nsa(dp97
g6
I01
sg7
g23
sg9
L5L
sa(dp98
g6
I01
sg7
V__exit__
p99
sg9
L2L
sg18
Nsa(dp100
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p101
sa(dp102
g6
I01
sg7
g28
sg9
L5L
sa(dp103
g6
I01
sg7
g30
sg9
L5L
sa(dp104
g6
I01
sg7
V__getstate__
p105
sg9
L2L
sg18
Nsa(dp106
g6
I01
sg7
g32
sg9
L5L
sa(dp107
g6
I01
sg7
g34
sg9
L5L
sa(dp108
g6
I01
sg7
g36
sg9
L5L
sa(dp109
g6
I01
sg7
V__iter__
p110
sg9
L5L
sa(dp111
g6
I01
sg7
g38
sg9
L5L
sa(dp112
g6
I01
sg7
g40
sg9
L5L
sa(dp113
g6
I01
sg7
g42
sg9
L5L
sa(dp114
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p115
sa(dp116
g6
I01
sg7
V__next__
p117
sg9
L5L
sa(dp118
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p119
sa(dp120
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p121
sa(dp122
g6
I01
sg7
g52
sg9
L5L
sa(dp123
g6
I01
sg7
g54
sg9
L5L
sa(dp124
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p125
sa(dp126
g6
I01
sg7
g61
sg9
L5L
sa(dp127
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p128
sa(dp129
g6
I01
sg7
V_checkClosed
p130
sg9
L2L
sg18
Nsa(dp131
g6
I01
sg7
V_checkReadable
p132
sg9
L2L
sg18
Nsa(dp133
g6
I01
sg7
V_checkSeekable
p134
sg9
L2L
sg18
Nsa(dp135
g6
I01
sg7
V_checkWritable
p136
sg9
L2L
sg18
Nsa(dp137
g6
I01
sg7
Vclose
p138
sg9
L2L
sg18
Nsa(dp139
g6
I01
sg7
Vclosed
p140
sg9
L5L
sa(dp141
g6
I01
sg7
Vdetach
p142
sg9
L2L
sg18
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p143
sa(dp144
g6
I01
sg7
Vfileno
p145
sg9
L2L
sg18
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p146
sa(dp147
g6
I01
sg7
Vflush
p148
sg9
L2L
sg18
Nsa(dp149
g6
I01
sg7
Visatty
p150
sg9
L2L
sg18
Nsa(dp151
g6
I01
sg7
Vpeek
p152
sg9
L2L
sg18
Nsa(dp153
g6
I01
sg7
Vread
p154
sg9
L2L
sg18
Nsa(dp155
g6
I01
sg7
Vread1
p156
sg9
L2L
sg18
Nsa(dp157
g6
I01
sg7
Vreadable
p158
sg9
L2L
sg18
Nsa(dp159
g6
I01
sg7
Vreadinto
p160
sg9
L2L
sg18
Nsa(dp161
g6
I01
sg7
Vreadinto1
p162
sg9
L2L
sg18
Nsa(dp163
g6
I01
sg7
Vreadline
p164
sg9
L2L
sg18
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p165
sa(dp166
g6
I01
sg7
Vreadlines
p167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p168
sa(dp169
g6
I01
sg7
Vseek
p170
sg9
L2L
sg18
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p171
sa(dp172
g6
I01
sg7
Vseekable
p173
sg9
L2L
sg18
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p174
sa(dp175
g6
I01
sg7
Vtell
p176
sg9
L2L
sg18
VReturn current stream position.
p177
sa(dp178
g6
I01
sg7
Vtruncate
p179
sg9
L2L
sg18
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p180
sa(dp181
g6
I01
sg7
Vwritable
p182
sg9
L2L
sg18
Nsa(dp183
g6
I01
sg7
Vwrite
p184
sg9
L2L
sg18
Nsa(dp185
g6
I01
sg7
Vwritelines
p186
sg9
L2L
sg18
Nsasg6
I01
sg7
VBufferedRWPair
p187
sg9
L3L
sg18
VA buffered reader and writer object together.\u000a\u000aA buffered reader object and buffered writer object put together to\u000aform a sequential IO object that can read and write. This is typically\u000aused with a socket or two-way pipe.\u000a\u000areader and writer are RawIOBase objects that are readable and\u000awriteable respectively. If the buffer_size is omitted it defaults to\u000aDEFAULT_BUFFER_SIZE.
p188
sa(dp189
g1
(lp190
(dp191
g6
I01
sg7
g89
sg9
L5L
sa(dp192
g6
I01
sg7
g13
sg9
L5L
sa(dp193
g6
I01
sg7
g15
sg9
L5L
sa(dp194
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p195
sa(dp196
g6
I01
sg7
g21
sg9
L5L
sa(dp197
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp198
g6
I01
sg7
g23
sg9
L5L
sa(dp199
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp200
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p201
sa(dp202
g6
I01
sg7
g28
sg9
L5L
sa(dp203
g6
I01
sg7
g30
sg9
L5L
sa(dp204
g6
I01
sg7
g105
sg9
L2L
sg18
Nsa(dp205
g6
I01
sg7
g32
sg9
L5L
sa(dp206
g6
I01
sg7
g34
sg9
L5L
sa(dp207
g6
I01
sg7
g36
sg9
L5L
sa(dp208
g6
I01
sg7
g110
sg9
L5L
sa(dp209
g6
I01
sg7
g38
sg9
L5L
sa(dp210
g6
I01
sg7
g40
sg9
L5L
sa(dp211
g6
I01
sg7
g42
sg9
L5L
sa(dp212
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p213
sa(dp214
g6
I01
sg7
g117
sg9
L5L
sa(dp215
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p216
sa(dp217
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p218
sa(dp219
g6
I01
sg7
g52
sg9
L5L
sa(dp220
g6
I01
sg7
g54
sg9
L5L
sa(dp221
g6
I01
sg7
g58
sg9
L2L
sg18
Nsa(dp222
g6
I01
sg7
g61
sg9
L5L
sa(dp223
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p224
sa(dp225
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp226
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp227
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp228
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp229
g6
I01
sg7
V_dealloc_warn
p230
sg9
L2L
sg18
Nsa(dp231
g6
I01
sg7
V_finalizing
p232
sg9
L5L
sa(dp233
g6
I01
sg7
g138
sg9
L2L
sg18
Nsa(dp234
g6
I01
sg7
g140
sg9
L5L
sa(dp235
g6
I01
sg7
g142
sg9
L2L
sg18
Nsa(dp236
g6
I01
sg7
g145
sg9
L2L
sg18
Nsa(dp237
g6
I01
sg7
g148
sg9
L2L
sg18
Nsa(dp238
g6
I01
sg7
g150
sg9
L2L
sg18
Nsa(dp239
g6
I01
sg7
Vmode
p240
sg9
L5L
sa(dp241
g6
I01
sg7
g7
sg9
L5L
sa(dp242
g6
I01
sg7
g152
sg9
L2L
sg18
Nsa(dp243
g6
I01
sg7
Vraw
p244
sg9
L5L
sa(dp245
g6
I01
sg7
g154
sg9
L2L
sg18
Nsa(dp246
g6
I01
sg7
g156
sg9
L2L
sg18
Nsa(dp247
g6
I01
sg7
g158
sg9
L2L
sg18
Nsa(dp248
g6
I01
sg7
g160
sg9
L2L
sg18
Nsa(dp249
g6
I01
sg7
g162
sg9
L2L
sg18
Nsa(dp250
g6
I01
sg7
g164
sg9
L2L
sg18
Nsa(dp251
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p252
sa(dp253
g6
I01
sg7
g170
sg9
L2L
sg18
Nsa(dp254
g6
I01
sg7
g173
sg9
L2L
sg18
Nsa(dp255
g6
I01
sg7
g176
sg9
L2L
sg18
Nsa(dp256
g6
I01
sg7
g179
sg9
L2L
sg18
Nsa(dp257
g6
I01
sg7
g182
sg9
L2L
sg18
Nsa(dp258
g6
I01
sg7
g184
sg9
L2L
sg18
Nsa(dp259
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
VBufferedRandom
p260
sg9
L3L
sg18
VA buffered interface to random access streams.\u000a\u000aThe constructor creates a reader and writer for a seekable stream,\u000araw, given in the first argument. If the buffer_size is omitted it\u000adefaults to DEFAULT_BUFFER_SIZE.
p261
sa(dp262
g1
(lp263
(dp264
g6
I01
sg7
g89
sg9
L5L
sa(dp265
g6
I01
sg7
g13
sg9
L5L
sa(dp266
g6
I01
sg7
g15
sg9
L5L
sa(dp267
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p268
sa(dp269
g6
I01
sg7
g21
sg9
L5L
sa(dp270
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp271
g6
I01
sg7
g23
sg9
L5L
sa(dp272
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp273
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p274
sa(dp275
g6
I01
sg7
g28
sg9
L5L
sa(dp276
g6
I01
sg7
g30
sg9
L5L
sa(dp277
g6
I01
sg7
g105
sg9
L2L
sg18
Nsa(dp278
g6
I01
sg7
g32
sg9
L5L
sa(dp279
g6
I01
sg7
g34
sg9
L5L
sa(dp280
g6
I01
sg7
g36
sg9
L5L
sa(dp281
g6
I01
sg7
g110
sg9
L5L
sa(dp282
g6
I01
sg7
g38
sg9
L5L
sa(dp283
g6
I01
sg7
g40
sg9
L5L
sa(dp284
g6
I01
sg7
g42
sg9
L5L
sa(dp285
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p286
sa(dp287
g6
I01
sg7
g117
sg9
L5L
sa(dp288
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p289
sa(dp290
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p291
sa(dp292
g6
I01
sg7
g52
sg9
L5L
sa(dp293
g6
I01
sg7
g54
sg9
L5L
sa(dp294
g6
I01
sg7
g58
sg9
L2L
sg18
Nsa(dp295
g6
I01
sg7
g61
sg9
L5L
sa(dp296
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p297
sa(dp298
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp299
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp300
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp301
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp302
g6
I01
sg7
g230
sg9
L2L
sg18
Nsa(dp303
g6
I01
sg7
g232
sg9
L5L
sa(dp304
g6
I01
sg7
g138
sg9
L2L
sg18
Nsa(dp305
g6
I01
sg7
g140
sg9
L5L
sa(dp306
g6
I01
sg7
g142
sg9
L2L
sg18
Nsa(dp307
g6
I01
sg7
g145
sg9
L2L
sg18
Nsa(dp308
g6
I01
sg7
g148
sg9
L2L
sg18
Nsa(dp309
g6
I01
sg7
g150
sg9
L2L
sg18
Nsa(dp310
g6
I01
sg7
g240
sg9
L5L
sa(dp311
g6
I01
sg7
g7
sg9
L5L
sa(dp312
g6
I01
sg7
g152
sg9
L2L
sg18
Nsa(dp313
g6
I01
sg7
g244
sg9
L5L
sa(dp314
g6
I01
sg7
g154
sg9
L2L
sg18
Nsa(dp315
g6
I01
sg7
g156
sg9
L2L
sg18
Nsa(dp316
g6
I01
sg7
g158
sg9
L2L
sg18
Nsa(dp317
g6
I01
sg7
g160
sg9
L2L
sg18
Nsa(dp318
g6
I01
sg7
g162
sg9
L2L
sg18
Nsa(dp319
g6
I01
sg7
g164
sg9
L2L
sg18
Nsa(dp320
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p321
sa(dp322
g6
I01
sg7
g170
sg9
L2L
sg18
Nsa(dp323
g6
I01
sg7
g173
sg9
L2L
sg18
Nsa(dp324
g6
I01
sg7
g176
sg9
L2L
sg18
Nsa(dp325
g6
I01
sg7
g179
sg9
L2L
sg18
Nsa(dp326
g6
I01
sg7
g182
sg9
L2L
sg18
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p327
sa(dp328
g6
I01
sg7
g184
sg9
L2L
sg18
VWrite the given buffer to the IO stream.\u000a\u000aReturns the number of bytes written, which is always the length of b\u000ain bytes.\u000a\u000aRaises BlockingIOError if the buffer is full and the\u000aunderlying raw stream cannot accept more data at the moment.\u000a
p329
sa(dp330
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
VBufferedReader
p331
sg9
L3L
sg18
VCreate a new buffered reader using the given readable raw IO object.
p332
sa(dp333
g1
(lp334
(dp335
g6
I01
sg7
g89
sg9
L5L
sa(dp336
g6
I01
sg7
g13
sg9
L5L
sa(dp337
g6
I01
sg7
g15
sg9
L5L
sa(dp338
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p339
sa(dp340
g6
I01
sg7
g21
sg9
L5L
sa(dp341
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp342
g6
I01
sg7
g23
sg9
L5L
sa(dp343
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp344
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p345
sa(dp346
g6
I01
sg7
g28
sg9
L5L
sa(dp347
g6
I01
sg7
g30
sg9
L5L
sa(dp348
g6
I01
sg7
g105
sg9
L2L
sg18
Nsa(dp349
g6
I01
sg7
g32
sg9
L5L
sa(dp350
g6
I01
sg7
g34
sg9
L5L
sa(dp351
g6
I01
sg7
g36
sg9
L5L
sa(dp352
g6
I01
sg7
g110
sg9
L5L
sa(dp353
g6
I01
sg7
g38
sg9
L5L
sa(dp354
g6
I01
sg7
g40
sg9
L5L
sa(dp355
g6
I01
sg7
g42
sg9
L5L
sa(dp356
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p357
sa(dp358
g6
I01
sg7
g117
sg9
L5L
sa(dp359
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p360
sa(dp361
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p362
sa(dp363
g6
I01
sg7
g52
sg9
L5L
sa(dp364
g6
I01
sg7
g54
sg9
L5L
sa(dp365
g6
I01
sg7
g58
sg9
L2L
sg18
Nsa(dp366
g6
I01
sg7
g61
sg9
L5L
sa(dp367
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p368
sa(dp369
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp370
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp371
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp372
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp373
g6
I01
sg7
g230
sg9
L2L
sg18
Nsa(dp374
g6
I01
sg7
g232
sg9
L5L
sa(dp375
g6
I01
sg7
g138
sg9
L2L
sg18
Nsa(dp376
g6
I01
sg7
g140
sg9
L5L
sa(dp377
g6
I01
sg7
g142
sg9
L2L
sg18
Nsa(dp378
g6
I01
sg7
g145
sg9
L2L
sg18
Nsa(dp379
g6
I01
sg7
g148
sg9
L2L
sg18
Nsa(dp380
g6
I01
sg7
g150
sg9
L2L
sg18
Nsa(dp381
g6
I01
sg7
g240
sg9
L5L
sa(dp382
g6
I01
sg7
g7
sg9
L5L
sa(dp383
g6
I01
sg7
g244
sg9
L5L
sa(dp384
g6
I01
sg7
g154
sg9
L2L
sg18
VRead and return up to n bytes.\u000a\u000aIf the argument is omitted, None, or negative, reads and\u000areturns all data until EOF.\u000a\u000aIf the argument is positive, and the underlying raw stream is\u000anot 'interactive', multiple raw reads may be issued to satisfy\u000athe byte count (unless EOF is reached first).  But for\u000ainteractive raw streams (as well as sockets and pipes), at most\u000aone raw read will be issued, and a short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a\u000aReturns None if the underlying raw stream was open in non-blocking\u000amode and no data is available at the moment.\u000a
p385
sa(dp386
g6
I01
sg7
g156
sg9
L2L
sg18
VRead and return up to n bytes, with at most one read() call\u000ato the underlying raw stream. A short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a
p387
sa(dp388
g6
I01
sg7
g158
sg9
L2L
sg18
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p389
sa(dp390
g6
I01
sg7
g160
sg9
L2L
sg18
Nsa(dp391
g6
I01
sg7
g162
sg9
L2L
sg18
Nsa(dp392
g6
I01
sg7
g164
sg9
L2L
sg18
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p393
sa(dp394
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p395
sa(dp396
g6
I01
sg7
g170
sg9
L2L
sg18
Nsa(dp397
g6
I01
sg7
g173
sg9
L2L
sg18
Nsa(dp398
g6
I01
sg7
g176
sg9
L2L
sg18
Nsa(dp399
g6
I01
sg7
g179
sg9
L2L
sg18
Nsa(dp400
g6
I01
sg7
g182
sg9
L2L
sg18
Nsa(dp401
g6
I01
sg7
g184
sg9
L2L
sg18
Nsa(dp402
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
VBufferedWriter
p403
sg9
L3L
sg18
VA buffer for a writeable sequential RawIO object.\u000a\u000aThe constructor creates a BufferedWriter for the given writeable raw\u000astream. If the buffer_size is not given, it defaults to\u000aDEFAULT_BUFFER_SIZE.
p404
sa(dp405
g1
(lp406
(dp407
g6
I01
sg7
g89
sg9
L5L
sa(dp408
g6
I01
sg7
g13
sg9
L5L
sa(dp409
g6
I01
sg7
g15
sg9
L5L
sa(dp410
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p411
sa(dp412
g6
I01
sg7
g21
sg9
L5L
sa(dp413
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp414
g6
I01
sg7
g23
sg9
L5L
sa(dp415
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp416
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p417
sa(dp418
g6
I01
sg7
g28
sg9
L5L
sa(dp419
g6
I01
sg7
g30
sg9
L5L
sa(dp420
g6
I01
sg7
g105
sg9
L2L
sg18
Nsa(dp421
g6
I01
sg7
g32
sg9
L5L
sa(dp422
g6
I01
sg7
g34
sg9
L5L
sa(dp423
g6
I01
sg7
g36
sg9
L5L
sa(dp424
g6
I01
sg7
g110
sg9
L5L
sa(dp425
g6
I01
sg7
g38
sg9
L5L
sa(dp426
g6
I01
sg7
g40
sg9
L5L
sa(dp427
g6
I01
sg7
g42
sg9
L5L
sa(dp428
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p429
sa(dp430
g6
I01
sg7
g117
sg9
L5L
sa(dp431
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p432
sa(dp433
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p434
sa(dp435
g6
I01
sg7
g52
sg9
L5L
sa(dp436
g6
I01
sg7
g54
sg9
L5L
sa(dp437
g6
I01
sg7
g56
sg9
L2L
sg18
Nsa(dp438
g6
I01
sg7
g58
sg9
L2L
sg18
Nsa(dp439
g6
I01
sg7
g61
sg9
L5L
sa(dp440
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p441
sa(dp442
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp443
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp444
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp445
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp446
g6
I01
sg7
g138
sg9
L2L
sg18
VDisable all I/O operations.
p447
sa(dp448
g6
I01
sg7
g140
sg9
L5L
sa(dp449
g6
I01
sg7
g142
sg9
L2L
sg18
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p450
sa(dp451
g6
I01
sg7
g145
sg9
L2L
sg18
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p452
sa(dp453
g6
I01
sg7
g148
sg9
L2L
sg18
VDoes nothing.
p454
sa(dp455
g6
I01
sg7
Vgetbuffer
p456
sg9
L2L
sg18
VGet a read-write view over the contents of the BytesIO object.
p457
sa(dp458
g6
I01
sg7
Vgetvalue
p459
sg9
L2L
sg18
VRetrieve the entire contents of the BytesIO object.
p460
sa(dp461
g6
I01
sg7
g150
sg9
L2L
sg18
VAlways returns False.\u000a\u000aBytesIO objects are not connected to a TTY-like device.
p462
sa(dp463
g6
I01
sg7
g154
sg9
L2L
sg18
VRead at most size bytes, returned as a bytes object.\u000a\u000aIf the size argument is negative, read until EOF is reached.\u000aReturn an empty bytes object at EOF.
p464
sa(dp465
g6
I01
sg7
g156
sg9
L2L
sg18
VRead at most size bytes, returned as a bytes object.\u000a\u000aIf the size argument is negative or omitted, read until EOF is reached.\u000aReturn an empty bytes object at EOF.
p466
sa(dp467
g6
I01
sg7
g158
sg9
L2L
sg18
VReturns True if the IO object can be read.
p468
sa(dp469
g6
I01
sg7
g160
sg9
L2L
sg18
VRead bytes into buffer.\u000a\u000aReturns number of bytes read (0 for EOF), or None if the object\u000ais set not to block and has no data to read.
p470
sa(dp471
g6
I01
sg7
g162
sg9
L2L
sg18
Nsa(dp472
g6
I01
sg7
g164
sg9
L2L
sg18
VNext line from the file, as a bytes object.\u000a\u000aRetain newline.  A non-negative size argument limits the maximum\u000anumber of bytes to return (an incomplete line may be returned then).\u000aReturn an empty bytes object at EOF.
p473
sa(dp474
g6
I01
sg7
g167
sg9
L2L
sg18
VList of bytes objects, each a line from the file.\u000a\u000aCall readline() repeatedly and return a list of the lines so read.\u000aThe optional size argument, if given, is an approximate bound on the\u000atotal number of bytes in the lines returned.
p475
sa(dp476
g6
I01
sg7
g170
sg9
L2L
sg18
VChange stream position.\u000a\u000aSeek to byte offset pos relative to position indicated by whence:\u000a     0  Start of stream (the default).  pos should be >= 0;\u000a     1  Current position - pos may be negative;\u000a     2  End of stream - pos usually negative.\u000aReturns the new absolute position.
p477
sa(dp478
g6
I01
sg7
g173
sg9
L2L
sg18
VReturns True if the IO object can be seeked.
p479
sa(dp480
g6
I01
sg7
g176
sg9
L2L
sg18
VCurrent file position, an integer.
p481
sa(dp482
g6
I01
sg7
g179
sg9
L2L
sg18
VTruncate the file to at most size bytes.\u000a\u000aSize defaults to the current file position, as returned by tell().\u000aThe current file position is unchanged.  Returns the new size.
p483
sa(dp484
g6
I01
sg7
g182
sg9
L2L
sg18
VReturns True if the IO object can be written.
p485
sa(dp486
g6
I01
sg7
g184
sg9
L2L
sg18
VWrite bytes to file.\u000a\u000aReturn the number of bytes written.
p487
sa(dp488
g6
I01
sg7
g186
sg9
L2L
sg18
VWrite lines to the file.\u000a\u000aNote that newlines are not added.  lines can be any iterable object\u000aproducing bytes-like objects. This is equivalent to calling write() for\u000aeach element.
p489
sasg6
I01
sg7
VBytesIO
p490
sg9
L3L
sg18
VBuffered I/O implementation using an in-memory bytes buffer.
p491
sa(dp492
g6
I01
sg7
VDEFAULT_BUFFER_SIZE
p493
sg9
L5L
sa(dp494
g1
(lp495
(dp496
g6
I01
sg7
g89
sg9
L5L
sa(dp497
g6
I01
sg7
g13
sg9
L5L
sa(dp498
g6
I01
sg7
g15
sg9
L5L
sa(dp499
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p500
sa(dp501
g6
I01
sg7
g21
sg9
L5L
sa(dp502
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp503
g6
I01
sg7
g23
sg9
L5L
sa(dp504
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp505
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p506
sa(dp507
g6
I01
sg7
g28
sg9
L5L
sa(dp508
g6
I01
sg7
g30
sg9
L5L
sa(dp509
g6
I01
sg7
g105
sg9
L2L
sg18
Nsa(dp510
g6
I01
sg7
g32
sg9
L5L
sa(dp511
g6
I01
sg7
g34
sg9
L5L
sa(dp512
g6
I01
sg7
g36
sg9
L5L
sa(dp513
g6
I01
sg7
g110
sg9
L5L
sa(dp514
g6
I01
sg7
g38
sg9
L5L
sa(dp515
g6
I01
sg7
g40
sg9
L5L
sa(dp516
g6
I01
sg7
g42
sg9
L5L
sa(dp517
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p518
sa(dp519
g6
I01
sg7
g117
sg9
L5L
sa(dp520
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p521
sa(dp522
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p523
sa(dp524
g6
I01
sg7
g52
sg9
L5L
sa(dp525
g6
I01
sg7
g54
sg9
L5L
sa(dp526
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p527
sa(dp528
g6
I01
sg7
g61
sg9
L5L
sa(dp529
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p530
sa(dp531
g6
I01
sg7
V_blksize
p532
sg9
L5L
sa(dp533
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp534
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp535
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp536
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp537
g6
I01
sg7
g230
sg9
L2L
sg18
Nsa(dp538
g6
I01
sg7
g232
sg9
L5L
sa(dp539
g6
I01
sg7
g138
sg9
L2L
sg18
VClose the file.\u000a\u000aA closed file cannot be used for further I/O operations.  close() may be\u000acalled more than once without error.
p540
sa(dp541
g6
I01
sg7
g140
sg9
L5L
sa(dp542
g6
I01
sg7
Vclosefd
p543
sg9
L5L
sa(dp544
g6
I01
sg7
g145
sg9
L2L
sg18
VReturn the underlying file descriptor (an integer).
p545
sa(dp546
g6
I01
sg7
g148
sg9
L2L
sg18
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p547
sa(dp548
g6
I01
sg7
g150
sg9
L2L
sg18
VTrue if the file is connected to a TTY device.
p549
sa(dp550
g6
I01
sg7
g240
sg9
L5L
sa(dp551
g6
I01
sg7
g154
sg9
L2L
sg18
VRead at most size bytes, returned as bytes.\u000a\u000aOnly makes one system call, so less data may be returned than requested.\u000aIn non-blocking mode, returns None if no data is available.\u000aReturn an empty bytes object at EOF.
p552
sa(dp553
g6
I01
sg7
g158
sg9
L2L
sg18
VTrue if file was opened in a read mode.
p554
sa(dp555
g6
I01
sg7
Vreadall
p556
sg9
L2L
sg18
VRead all data from the file, returned as bytes.\u000a\u000aIn non-blocking mode, returns as much as is immediately available,\u000aor None if no data is available.  Return an empty bytes object at EOF.
p557
sa(dp558
g6
I01
sg7
g160
sg9
L2L
sg18
VSame as RawIOBase.readinto().
p559
sa(dp560
g6
I01
sg7
g164
sg9
L2L
sg18
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p561
sa(dp562
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p563
sa(dp564
g6
I01
sg7
g170
sg9
L2L
sg18
VMove to new file position and return the file position.\u000a\u000aArgument offset is a byte count.  Optional argument whence defaults to\u000aSEEK_SET or 0 (offset from start of file, offset should be >= 0); other values\u000aare SEEK_CUR or 1 (move relative to current position, positive or negative),\u000aand SEEK_END or 2 (move relative to end of file, usually negative, although\u000amany platforms allow seeking beyond the end of a file).\u000a\u000aNote that not all file objects are seekable.
p565
sa(dp566
g6
I01
sg7
g173
sg9
L2L
sg18
VTrue if file supports random-access.
p567
sa(dp568
g6
I01
sg7
g176
sg9
L2L
sg18
VCurrent file position.\u000a\u000aCan raise OSError for non seekable files.
p569
sa(dp570
g6
I01
sg7
g179
sg9
L2L
sg18
VTruncate the file to at most size bytes and return the truncated size.\u000a\u000aSize defaults to the current file position, as returned by tell().\u000aThe current file position is changed to the value of size.
p571
sa(dp572
g6
I01
sg7
g182
sg9
L2L
sg18
VTrue if file was opened in a write mode.
p573
sa(dp574
g6
I01
sg7
g184
sg9
L2L
sg18
VWrite buffer b to file, return number of bytes written.\u000a\u000aOnly makes one system call, so not all of the data may be written.\u000aThe number of bytes actually written is returned.  In non-blocking mode,\u000areturns None if the write would block.
p575
sa(dp576
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
VFileIO
p577
sg9
L3L
sg18
VOpen a file.\u000a\u000aThe mode can be 'r' (default), 'w', 'x' or 'a' for reading,\u000awriting, exclusive creation or appending.  The file will be created if it\u000adoesn't exist when opened for writing or appending; it will be truncated\u000awhen opened for writing.  A FileExistsError will be raised if it already\u000aexists when opened for creating. Opening a file for creating implies\u000awriting so this mode behaves in a similar way to 'w'.Add a '+' to the mode\u000ato allow simultaneous reading and writing. A custom opener can be used by\u000apassing a callable as *opener*. The underlying file descriptor for the file\u000aobject is then obtained by calling opener with (*name*, *flags*).\u000a*opener* must return an open file descriptor (passing os.open as *opener*\u000aresults in functionality similar to passing None).
p578
sa(dp579
g1
(lp580
(dp581
g6
I01
sg7
g13
sg9
L5L
sa(dp582
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p583
sa(dp584
g6
I01
sg7
g21
sg9
L5L
sa(dp585
g6
I01
sg7
g23
sg9
L5L
sa(dp586
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p587
sa(dp588
g6
I01
sg7
g28
sg9
L5L
sa(dp589
g6
I01
sg7
g30
sg9
L5L
sa(dp590
g6
I01
sg7
g32
sg9
L5L
sa(dp591
g6
I01
sg7
g34
sg9
L5L
sa(dp592
g6
I01
sg7
g36
sg9
L5L
sa(dp593
g6
I01
sg7
g38
sg9
L5L
sa(dp594
g6
I01
sg7
g40
sg9
L5L
sa(dp595
g6
I01
sg7
g42
sg9
L5L
sa(dp596
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p597
sa(dp598
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p599
sa(dp600
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p601
sa(dp602
g6
I01
sg7
g52
sg9
L5L
sa(dp603
g6
I01
sg7
g54
sg9
L5L
sa(dp604
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p605
sa(dp606
g6
I01
sg7
g61
sg9
L5L
sa(dp607
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p608
sa(dp609
g6
I01
sg7
Vdecode
p610
sg9
L2L
sg18
Nsa(dp611
g6
I01
sg7
Vgetstate
p612
sg9
L2L
sg18
Nsa(dp613
g6
I01
sg7
Vnewlines
p614
sg9
L5L
sa(dp615
g6
I01
sg7
Vreset
p616
sg9
L2L
sg18
Nsa(dp617
g6
I01
sg7
Vsetstate
p618
sg9
L2L
sg18
Nsasg6
I01
sg7
VIncrementalNewlineDecoder
p619
sg9
L3L
sg18
VCodec used when reading a file in universal newlines mode.\u000a\u000aIt wraps another incremental decoder, translating \u005cr\u005cn and \u005cr into \u005cn.\u000aIt also records the types of newlines encountered.  When used with\u000atranslate=False, it ensures that the newline sequence is returned in\u000aone piece. When used with decoder=None, it expects unicode strings as\u000adecode input and translates newlines without first invoking an external\u000adecoder.
p620
sa(dp621
g1
(lp622
(dp623
g6
I01
sg7
g89
sg9
L5L
sa(dp624
g6
I01
sg7
g13
sg9
L5L
sa(dp625
g6
I01
sg7
g15
sg9
L5L
sa(dp626
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p627
sa(dp628
g6
I01
sg7
g21
sg9
L5L
sa(dp629
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp630
g6
I01
sg7
g23
sg9
L5L
sa(dp631
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp632
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p633
sa(dp634
g6
I01
sg7
g28
sg9
L5L
sa(dp635
g6
I01
sg7
g30
sg9
L5L
sa(dp636
g6
I01
sg7
g105
sg9
L2L
sg18
Nsa(dp637
g6
I01
sg7
g32
sg9
L5L
sa(dp638
g6
I01
sg7
g34
sg9
L5L
sa(dp639
g6
I01
sg7
g36
sg9
L5L
sa(dp640
g6
I01
sg7
g110
sg9
L5L
sa(dp641
g6
I01
sg7
g38
sg9
L5L
sa(dp642
g6
I01
sg7
g40
sg9
L5L
sa(dp643
g6
I01
sg7
g42
sg9
L5L
sa(dp644
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p645
sa(dp646
g6
I01
sg7
g117
sg9
L5L
sa(dp647
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p648
sa(dp649
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p650
sa(dp651
g6
I01
sg7
g52
sg9
L5L
sa(dp652
g6
I01
sg7
g54
sg9
L5L
sa(dp653
g6
I01
sg7
g56
sg9
L2L
sg18
Nsa(dp654
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p655
sa(dp656
g6
I01
sg7
g61
sg9
L5L
sa(dp657
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p658
sa(dp659
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp660
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp661
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp662
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp663
g6
I01
sg7
g138
sg9
L2L
sg18
VClose the IO object.\u000a\u000aAttempting any further operation after the object is closed\u000awill raise a ValueError.\u000a\u000aThis method has no effect if the file is already closed.
p664
sa(dp665
g6
I01
sg7
g140
sg9
L5L
sa(dp666
g6
I01
sg7
g142
sg9
L2L
sg18
VSeparate the underlying buffer from the TextIOBase and return it.\u000a\u000aAfter the underlying buffer has been detached, the TextIO is in an\u000aunusable state.\u000a
p667
sa(dp668
g6
I01
sg7
Vencoding
p669
sg9
L5L
sa(dp670
g6
I01
sg7
Verrors
p671
sg9
L5L
sa(dp672
g6
I01
sg7
g145
sg9
L2L
sg18
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p673
sa(dp674
g6
I01
sg7
g148
sg9
L2L
sg18
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p675
sa(dp676
g6
I01
sg7
g459
sg9
L2L
sg18
VRetrieve the entire contents of the object.
p677
sa(dp678
g6
I01
sg7
g150
sg9
L2L
sg18
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p679
sa(dp680
g6
I01
sg7
Vline_buffering
p681
sg9
L5L
sa(dp682
g6
I01
sg7
g614
sg9
L5L
sa(dp683
g6
I01
sg7
g154
sg9
L2L
sg18
VRead at most size characters, returned as a string.\u000a\u000aIf the argument is negative or omitted, read until EOF\u000ais reached. Return an empty string at EOF.
p684
sa(dp685
g6
I01
sg7
g158
sg9
L2L
sg18
VReturns True if the IO object can be read.
p686
sa(dp687
g6
I01
sg7
g164
sg9
L2L
sg18
VRead until newline or EOF.\u000a\u000aReturns an empty string if EOF is hit immediately.
p688
sa(dp689
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p690
sa(dp691
g6
I01
sg7
g170
sg9
L2L
sg18
VChange stream position.\u000a\u000aSeek to character offset pos relative to position indicated by whence:\u000a    0  Start of stream (the default).  pos should be >= 0;\u000a    1  Current position - pos must be 0;\u000a    2  End of stream - pos must be 0.\u000aReturns the new absolute position.
p692
sa(dp693
g6
I01
sg7
g173
sg9
L2L
sg18
VReturns True if the IO object can be seeked.
p694
sa(dp695
g6
I01
sg7
g176
sg9
L2L
sg18
VTell the current file position.
p696
sa(dp697
g6
I01
sg7
g179
sg9
L2L
sg18
VTruncate size to pos.\u000a\u000aThe pos argument defaults to the current file position, as\u000areturned by tell().  The current file position is unchanged.\u000aReturns the new absolute position.
p698
sa(dp699
g6
I01
sg7
g182
sg9
L2L
sg18
VReturns True if the IO object can be written.
p700
sa(dp701
g6
I01
sg7
g184
sg9
L2L
sg18
VWrite string to file.\u000a\u000aReturns the number of characters written, which is always equal to\u000athe length of the string.
p702
sa(dp703
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
VStringIO
p704
sg9
L3L
sg18
VText I/O implementation using an in-memory buffer.\u000a\u000aThe initial_value argument sets the value of object.  The newline\u000aargument is like the one of TextIOWrapper's constructor.
p705
sa(dp706
g1
(lp707
(dp708
g6
I01
sg7
V_CHUNK_SIZE
p709
sg9
L5L
sa(dp710
g6
I01
sg7
g89
sg9
L5L
sa(dp711
g6
I01
sg7
g13
sg9
L5L
sa(dp712
g6
I01
sg7
g15
sg9
L5L
sa(dp713
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p714
sa(dp715
g6
I01
sg7
g21
sg9
L5L
sa(dp716
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp717
g6
I01
sg7
g23
sg9
L5L
sa(dp718
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp719
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p720
sa(dp721
g6
I01
sg7
g28
sg9
L5L
sa(dp722
g6
I01
sg7
g30
sg9
L5L
sa(dp723
g6
I01
sg7
g105
sg9
L2L
sg18
Nsa(dp724
g6
I01
sg7
g32
sg9
L5L
sa(dp725
g6
I01
sg7
g34
sg9
L5L
sa(dp726
g6
I01
sg7
g36
sg9
L5L
sa(dp727
g6
I01
sg7
g110
sg9
L5L
sa(dp728
g6
I01
sg7
g38
sg9
L5L
sa(dp729
g6
I01
sg7
g40
sg9
L5L
sa(dp730
g6
I01
sg7
g42
sg9
L5L
sa(dp731
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p732
sa(dp733
g6
I01
sg7
g117
sg9
L5L
sa(dp734
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p735
sa(dp736
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p737
sa(dp738
g6
I01
sg7
g52
sg9
L5L
sa(dp739
g6
I01
sg7
g54
sg9
L5L
sa(dp740
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p741
sa(dp742
g6
I01
sg7
g61
sg9
L5L
sa(dp743
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p744
sa(dp745
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp746
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp747
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp748
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp749
g6
I01
sg7
g232
sg9
L5L
sa(dp750
g6
I01
sg7
Vbuffer
p751
sg9
L5L
sa(dp752
g6
I01
sg7
g138
sg9
L2L
sg18
Nsa(dp753
g6
I01
sg7
g140
sg9
L5L
sa(dp754
g6
I01
sg7
g142
sg9
L2L
sg18
Nsa(dp755
g6
I01
sg7
g669
sg9
L5L
sa(dp756
g6
I01
sg7
g671
sg9
L5L
sa(dp757
g6
I01
sg7
g145
sg9
L2L
sg18
Nsa(dp758
g6
I01
sg7
g148
sg9
L2L
sg18
Nsa(dp759
g6
I01
sg7
g150
sg9
L2L
sg18
Nsa(dp760
g6
I01
sg7
g681
sg9
L5L
sa(dp761
g6
I01
sg7
g7
sg9
L5L
sa(dp762
g6
I01
sg7
g614
sg9
L5L
sa(dp763
g6
I01
sg7
g154
sg9
L2L
sg18
Nsa(dp764
g6
I01
sg7
g158
sg9
L2L
sg18
Nsa(dp765
g6
I01
sg7
g164
sg9
L2L
sg18
Nsa(dp766
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p767
sa(dp768
g6
I01
sg7
g170
sg9
L2L
sg18
Nsa(dp769
g6
I01
sg7
g173
sg9
L2L
sg18
Nsa(dp770
g6
I01
sg7
g176
sg9
L2L
sg18
Nsa(dp771
g6
I01
sg7
g179
sg9
L2L
sg18
Nsa(dp772
g6
I01
sg7
g182
sg9
L2L
sg18
Nsa(dp773
g6
I01
sg7
g184
sg9
L2L
sg18
Nsa(dp774
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
VTextIOWrapper
p775
sg9
L3L
sg18
VCharacter and line based layer over a BufferedIOBase object, buffer.\u000a\u000aencoding gives the name of the encoding that the stream will be\u000adecoded or encoded with. It defaults to locale.getpreferredencoding(False).\u000a\u000aerrors determines the strictness of encoding and decoding (see\u000ahelp(codecs.Codec) or the documentation for codecs.register) and\u000adefaults to "strict".\u000a\u000anewline controls how line endings are handled. It can be None, '',\u000a'\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as follows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u005cn', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf line_buffering is True, a call to flush is implied when a call to\u000awrite contains a newline character.
p776
sa(dp777
g1
(lp778
(dp779
g6
I01
sg7
g8
sg9
L5L
sa(dp780
g6
I01
sg7
g11
sg9
L5L
sa(dp781
g6
I01
sg7
g13
sg9
L5L
sa(dp782
g6
I01
sg7
g15
sg9
L5L
sa(dp783
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p784
sa(dp785
g6
I01
sg7
g21
sg9
L5L
sa(dp786
g6
I01
sg7
g23
sg9
L5L
sa(dp787
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p788
sa(dp789
g6
I01
sg7
g28
sg9
L5L
sa(dp790
g6
I01
sg7
g30
sg9
L5L
sa(dp791
g6
I01
sg7
g32
sg9
L5L
sa(dp792
g6
I01
sg7
g34
sg9
L5L
sa(dp793
g6
I01
sg7
g36
sg9
L5L
sa(dp794
g6
I01
sg7
g38
sg9
L5L
sa(dp795
g6
I01
sg7
g40
sg9
L5L
sa(dp796
g6
I01
sg7
V__module__
p797
sg9
L5L
sa(dp798
g6
I01
sg7
g42
sg9
L5L
sa(dp799
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p800
sa(dp801
g6
I01
sg7
g47
sg9
L2L
sg18
Nsa(dp802
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p803
sa(dp804
g6
I01
sg7
g52
sg9
L5L
sa(dp805
g6
I01
sg7
g54
sg9
L5L
sa(dp806
g6
I01
sg7
g56
sg9
L2L
sg18
Nsa(dp807
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p808
sa(dp809
g6
I01
sg7
g61
sg9
L5L
sa(dp810
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p811
sa(dp812
g6
I01
sg7
g66
sg9
L5L
sa(dp813
g6
I01
sg7
g68
sg9
L5L
sa(dp814
g6
I01
sg7
V__weakref__
p815
sg9
L5L
sa(dp816
g6
I01
sg7
g70
sg9
L5L
sa(dp817
g6
I01
sg7
g72
sg9
L5L
sa(dp818
g6
I01
sg7
g74
sg9
L5L
sa(dp819
g6
I01
sg7
g76
sg9
L5L
sa(dp820
g6
I01
sg7
g78
sg9
L5L
sa(dp821
g6
I01
sg7
g80
sg9
L5L
sa(dp822
g6
I01
sg7
g82
sg9
L2L
sg18
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p823
sasg6
I01
sg7
VUnsupportedOperation
p824
sg9
L3L
sg18
Nsa(dp825
g1
(lp826
(dp827
g6
I01
sg7
g89
sg9
L5L
sa(dp828
g6
I01
sg7
g13
sg9
L5L
sa(dp829
g6
I01
sg7
g15
sg9
L5L
sa(dp830
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p831
sa(dp832
g6
I01
sg7
g21
sg9
L5L
sa(dp833
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp834
g6
I01
sg7
g23
sg9
L5L
sa(dp835
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp836
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p837
sa(dp838
g6
I01
sg7
g28
sg9
L5L
sa(dp839
g6
I01
sg7
g30
sg9
L5L
sa(dp840
g6
I01
sg7
g32
sg9
L5L
sa(dp841
g6
I01
sg7
g34
sg9
L5L
sa(dp842
g6
I01
sg7
g36
sg9
L5L
sa(dp843
g6
I01
sg7
g110
sg9
L5L
sa(dp844
g6
I01
sg7
g38
sg9
L5L
sa(dp845
g6
I01
sg7
g40
sg9
L5L
sa(dp846
g6
I01
sg7
g42
sg9
L5L
sa(dp847
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p848
sa(dp849
g6
I01
sg7
g117
sg9
L5L
sa(dp850
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p851
sa(dp852
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p853
sa(dp854
g6
I01
sg7
g52
sg9
L5L
sa(dp855
g6
I01
sg7
g54
sg9
L5L
sa(dp856
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p857
sa(dp858
g6
I01
sg7
g61
sg9
L5L
sa(dp859
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p860
sa(dp861
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp862
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp863
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp864
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp865
g6
I01
sg7
g138
sg9
L2L
sg18
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p866
sa(dp867
g6
I01
sg7
g140
sg9
L5L
sa(dp868
g6
I01
sg7
g142
sg9
L2L
sg18
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p869
sa(dp870
g6
I01
sg7
g145
sg9
L2L
sg18
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p871
sa(dp872
g6
I01
sg7
g148
sg9
L2L
sg18
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p873
sa(dp874
g6
I01
sg7
g150
sg9
L2L
sg18
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p875
sa(dp876
g6
I01
sg7
g154
sg9
L2L
sg18
VRead and return up to n bytes.\u000a\u000aIf the argument is omitted, None, or negative, reads and\u000areturns all data until EOF.\u000a\u000aIf the argument is positive, and the underlying raw stream is\u000anot 'interactive', multiple raw reads may be issued to satisfy\u000athe byte count (unless EOF is reached first).  But for\u000ainteractive raw streams (as well as sockets and pipes), at most\u000aone raw read will be issued, and a short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a\u000aReturns None if the underlying raw stream was open in non-blocking\u000amode and no data is available at the moment.\u000a
p877
sa(dp878
g6
I01
sg7
g156
sg9
L2L
sg18
VRead and return up to n bytes, with at most one read() call\u000ato the underlying raw stream. A short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a
p879
sa(dp880
g6
I01
sg7
g158
sg9
L2L
sg18
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p881
sa(dp882
g6
I01
sg7
g160
sg9
L2L
sg18
Nsa(dp883
g6
I01
sg7
g162
sg9
L2L
sg18
Nsa(dp884
g6
I01
sg7
g164
sg9
L2L
sg18
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p885
sa(dp886
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p887
sa(dp888
g6
I01
sg7
g170
sg9
L2L
sg18
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p889
sa(dp890
g6
I01
sg7
g173
sg9
L2L
sg18
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p891
sa(dp892
g6
I01
sg7
g176
sg9
L2L
sg18
VReturn current stream position.
p893
sa(dp894
g6
I01
sg7
g179
sg9
L2L
sg18
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p895
sa(dp896
g6
I01
sg7
g182
sg9
L2L
sg18
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p897
sa(dp898
g6
I01
sg7
g184
sg9
L2L
sg18
VWrite the given buffer to the IO stream.\u000a\u000aReturns the number of bytes written, which is always the length of b\u000ain bytes.\u000a\u000aRaises BlockingIOError if the buffer is full and the\u000aunderlying raw stream cannot accept more data at the moment.\u000a
p899
sa(dp900
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
V_BufferedIOBase
p901
sg9
L3L
sg18
VBase class for buffered IO objects.\u000a\u000aThe main difference with RawIOBase is that the read() method\u000asupports omitting the size argument, and does not have a default\u000aimplementation that defers to readinto().\u000a\u000aIn addition, read(), readinto() and write() may raise\u000aBlockingIOError if the underlying raw stream is in non-blocking\u000amode and not ready; unlike their raw counterparts, they will never\u000areturn None.\u000a\u000aA typical implementation should not inherit from a RawIOBase\u000aimplementation, but wrap one.\u000a
p902
sa(dp903
g1
(lp904
(dp905
g6
I01
sg7
g89
sg9
L5L
sa(dp906
g6
I01
sg7
g13
sg9
L5L
sa(dp907
g6
I01
sg7
g15
sg9
L5L
sa(dp908
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p909
sa(dp910
g6
I01
sg7
g21
sg9
L5L
sa(dp911
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp912
g6
I01
sg7
g23
sg9
L5L
sa(dp913
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp914
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p915
sa(dp916
g6
I01
sg7
g28
sg9
L5L
sa(dp917
g6
I01
sg7
g30
sg9
L5L
sa(dp918
g6
I01
sg7
g32
sg9
L5L
sa(dp919
g6
I01
sg7
g34
sg9
L5L
sa(dp920
g6
I01
sg7
g36
sg9
L5L
sa(dp921
g6
I01
sg7
g110
sg9
L5L
sa(dp922
g6
I01
sg7
g38
sg9
L5L
sa(dp923
g6
I01
sg7
g40
sg9
L5L
sa(dp924
g6
I01
sg7
g42
sg9
L5L
sa(dp925
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p926
sa(dp927
g6
I01
sg7
g117
sg9
L5L
sa(dp928
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p929
sa(dp930
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p931
sa(dp932
g6
I01
sg7
g52
sg9
L5L
sa(dp933
g6
I01
sg7
g54
sg9
L5L
sa(dp934
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p935
sa(dp936
g6
I01
sg7
g61
sg9
L5L
sa(dp937
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p938
sa(dp939
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp940
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp941
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp942
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp943
g6
I01
sg7
g138
sg9
L2L
sg18
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p944
sa(dp945
g6
I01
sg7
g140
sg9
L5L
sa(dp946
g6
I01
sg7
g145
sg9
L2L
sg18
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p947
sa(dp948
g6
I01
sg7
g148
sg9
L2L
sg18
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p949
sa(dp950
g6
I01
sg7
g150
sg9
L2L
sg18
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p951
sa(dp952
g6
I01
sg7
g158
sg9
L2L
sg18
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p953
sa(dp954
g6
I01
sg7
g164
sg9
L2L
sg18
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p955
sa(dp956
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p957
sa(dp958
g6
I01
sg7
g170
sg9
L2L
sg18
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p959
sa(dp960
g6
I01
sg7
g173
sg9
L2L
sg18
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p961
sa(dp962
g6
I01
sg7
g176
sg9
L2L
sg18
VReturn current stream position.
p963
sa(dp964
g6
I01
sg7
g179
sg9
L2L
sg18
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p965
sa(dp966
g6
I01
sg7
g182
sg9
L2L
sg18
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p967
sa(dp968
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
V_IOBase
p969
sg9
L3L
sg18
VThe abstract base class for all I/O classes, acting on streams of\u000abytes. There is no public constructor.\u000a\u000aThis class provides dummy implementations for many methods that\u000aderived classes can override selectively; the default implementations\u000arepresent a file that cannot be read, written or seeked.\u000a\u000aEven though IOBase does not declare read, readinto, or write because\u000atheir signatures will vary, implementations and clients should\u000aconsider those methods part of the interface. Also, implementations\u000amay raise UnsupportedOperation when operations they do not support are\u000acalled.\u000a\u000aThe basic type used for binary data read from or written to a file is\u000abytes. Other bytes-like objects are accepted as method arguments too.\u000aIn some cases (such as readinto), a writable object is required. Text\u000aI/O classes work with str data.\u000a\u000aNote that calling any method (except additional calls to close(),\u000awhich are ignored) on a closed stream should raise a ValueError.\u000a\u000aIOBase (and its subclasses) support the iterator protocol, meaning\u000athat an IOBase object can be iterated over yielding the lines in a\u000astream.\u000a\u000aIOBase also supports the :keyword:`with` statement. In this example,\u000afp is closed after the suite of the with statement is complete:\u000a\u000awith open('spam.txt', 'r') as fp:\u000a    fp.write('Spam and eggs!')\u000a
p970
sa(dp971
g1
(lp972
(dp973
g6
I01
sg7
g89
sg9
L5L
sa(dp974
g6
I01
sg7
g13
sg9
L5L
sa(dp975
g6
I01
sg7
g15
sg9
L5L
sa(dp976
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p977
sa(dp978
g6
I01
sg7
g21
sg9
L5L
sa(dp979
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp980
g6
I01
sg7
g23
sg9
L5L
sa(dp981
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp982
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p983
sa(dp984
g6
I01
sg7
g28
sg9
L5L
sa(dp985
g6
I01
sg7
g30
sg9
L5L
sa(dp986
g6
I01
sg7
g32
sg9
L5L
sa(dp987
g6
I01
sg7
g34
sg9
L5L
sa(dp988
g6
I01
sg7
g36
sg9
L5L
sa(dp989
g6
I01
sg7
g110
sg9
L5L
sa(dp990
g6
I01
sg7
g38
sg9
L5L
sa(dp991
g6
I01
sg7
g40
sg9
L5L
sa(dp992
g6
I01
sg7
g42
sg9
L5L
sa(dp993
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p994
sa(dp995
g6
I01
sg7
g117
sg9
L5L
sa(dp996
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p997
sa(dp998
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p999
sa(dp1000
g6
I01
sg7
g52
sg9
L5L
sa(dp1001
g6
I01
sg7
g54
sg9
L5L
sa(dp1002
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1003
sa(dp1004
g6
I01
sg7
g61
sg9
L5L
sa(dp1005
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1006
sa(dp1007
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp1008
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp1009
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp1010
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp1011
g6
I01
sg7
g138
sg9
L2L
sg18
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p1012
sa(dp1013
g6
I01
sg7
g140
sg9
L5L
sa(dp1014
g6
I01
sg7
g145
sg9
L2L
sg18
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p1015
sa(dp1016
g6
I01
sg7
g148
sg9
L2L
sg18
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p1017
sa(dp1018
g6
I01
sg7
g150
sg9
L2L
sg18
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p1019
sa(dp1020
g6
I01
sg7
g154
sg9
L2L
sg18
Nsa(dp1021
g6
I01
sg7
g158
sg9
L2L
sg18
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p1022
sa(dp1023
g6
I01
sg7
g556
sg9
L2L
sg18
VRead until EOF, using multiple read() call.
p1024
sa(dp1025
g6
I01
sg7
g160
sg9
L2L
sg18
Nsa(dp1026
g6
I01
sg7
g164
sg9
L2L
sg18
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p1027
sa(dp1028
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p1029
sa(dp1030
g6
I01
sg7
g170
sg9
L2L
sg18
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p1031
sa(dp1032
g6
I01
sg7
g173
sg9
L2L
sg18
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p1033
sa(dp1034
g6
I01
sg7
g176
sg9
L2L
sg18
VReturn current stream position.
p1035
sa(dp1036
g6
I01
sg7
g179
sg9
L2L
sg18
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p1037
sa(dp1038
g6
I01
sg7
g182
sg9
L2L
sg18
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p1039
sa(dp1040
g6
I01
sg7
g184
sg9
L2L
sg18
Nsa(dp1041
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
V_RawIOBase
p1042
sg9
L3L
sg18
VBase class for raw binary I/O.
p1043
sa(dp1044
g1
(lp1045
(dp1046
g6
I01
sg7
g89
sg9
L5L
sa(dp1047
g6
I01
sg7
g13
sg9
L5L
sa(dp1048
g6
I01
sg7
g15
sg9
L5L
sa(dp1049
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p1050
sa(dp1051
g6
I01
sg7
g21
sg9
L5L
sa(dp1052
g6
I01
sg7
g96
sg9
L2L
sg18
Nsa(dp1053
g6
I01
sg7
g23
sg9
L5L
sa(dp1054
g6
I01
sg7
g99
sg9
L2L
sg18
Nsa(dp1055
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p1056
sa(dp1057
g6
I01
sg7
g28
sg9
L5L
sa(dp1058
g6
I01
sg7
g30
sg9
L5L
sa(dp1059
g6
I01
sg7
g32
sg9
L5L
sa(dp1060
g6
I01
sg7
g34
sg9
L5L
sa(dp1061
g6
I01
sg7
g36
sg9
L5L
sa(dp1062
g6
I01
sg7
g110
sg9
L5L
sa(dp1063
g6
I01
sg7
g38
sg9
L5L
sa(dp1064
g6
I01
sg7
g40
sg9
L5L
sa(dp1065
g6
I01
sg7
g42
sg9
L5L
sa(dp1066
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p1067
sa(dp1068
g6
I01
sg7
g117
sg9
L5L
sa(dp1069
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p1070
sa(dp1071
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p1072
sa(dp1073
g6
I01
sg7
g52
sg9
L5L
sa(dp1074
g6
I01
sg7
g54
sg9
L5L
sa(dp1075
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1076
sa(dp1077
g6
I01
sg7
g61
sg9
L5L
sa(dp1078
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1079
sa(dp1080
g6
I01
sg7
g130
sg9
L2L
sg18
Nsa(dp1081
g6
I01
sg7
g132
sg9
L2L
sg18
Nsa(dp1082
g6
I01
sg7
g134
sg9
L2L
sg18
Nsa(dp1083
g6
I01
sg7
g136
sg9
L2L
sg18
Nsa(dp1084
g6
I01
sg7
g138
sg9
L2L
sg18
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p1085
sa(dp1086
g6
I01
sg7
g140
sg9
L5L
sa(dp1087
g6
I01
sg7
g142
sg9
L2L
sg18
VSeparate the underlying buffer from the TextIOBase and return it.\u000a\u000aAfter the underlying buffer has been detached, the TextIO is in an\u000aunusable state.\u000a
p1088
sa(dp1089
g6
I01
sg7
g669
sg9
L5L
sa(dp1090
g6
I01
sg7
g671
sg9
L5L
sa(dp1091
g6
I01
sg7
g145
sg9
L2L
sg18
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p1092
sa(dp1093
g6
I01
sg7
g148
sg9
L2L
sg18
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p1094
sa(dp1095
g6
I01
sg7
g150
sg9
L2L
sg18
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p1096
sa(dp1097
g6
I01
sg7
g614
sg9
L5L
sa(dp1098
g6
I01
sg7
g154
sg9
L2L
sg18
VRead at most n characters from stream.\u000a\u000aRead from underlying buffer until we have n characters or we hit EOF.\u000aIf n is negative or omitted, read until EOF.\u000a
p1099
sa(dp1100
g6
I01
sg7
g158
sg9
L2L
sg18
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p1101
sa(dp1102
g6
I01
sg7
g164
sg9
L2L
sg18
VRead until newline or EOF.\u000a\u000aReturns an empty string if EOF is hit immediately.\u000a
p1103
sa(dp1104
g6
I01
sg7
g167
sg9
L2L
sg18
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p1105
sa(dp1106
g6
I01
sg7
g170
sg9
L2L
sg18
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p1107
sa(dp1108
g6
I01
sg7
g173
sg9
L2L
sg18
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p1109
sa(dp1110
g6
I01
sg7
g176
sg9
L2L
sg18
VReturn current stream position.
p1111
sa(dp1112
g6
I01
sg7
g179
sg9
L2L
sg18
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p1113
sa(dp1114
g6
I01
sg7
g182
sg9
L2L
sg18
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p1115
sa(dp1116
g6
I01
sg7
g184
sg9
L2L
sg18
VWrite string to stream.\u000aReturns the number of characters written (which is always equal to\u000athe length of the string).\u000a
p1117
sa(dp1118
g6
I01
sg7
g186
sg9
L2L
sg18
Nsasg6
I01
sg7
V_TextIOBase
p1119
sg9
L3L
sg18
VBase class for text I/O.\u000a\u000aThis class provides a character and line based interface to stream\u000aI/O. There is no readinto method because Python's character strings\u000aare immutable. There is no public constructor.\u000a
p1120
sa(dp1121
g6
I01
sg7
g21
sg9
L5L
sa(dp1122
g1
(lp1123
(dp1124
g6
I01
sg7
g13
sg9
L5L
sa(dp1125
g6
I01
sg7
g15
sg9
L5L
sa(dp1126
g6
I01
sg7
g17
sg9
L2L
sg18
V__dir__() -> list\u000adefault dir() implementation
p1127
sa(dp1128
g6
I01
sg7
g21
sg9
L5L
sa(dp1129
g6
I01
sg7
g23
sg9
L5L
sa(dp1130
g6
I01
sg7
g25
sg9
L2L
sg18
Vdefault object formatter
p1131
sa(dp1132
g6
I01
sg7
g28
sg9
L5L
sa(dp1133
g6
I01
sg7
g30
sg9
L5L
sa(dp1134
g6
I01
sg7
g32
sg9
L5L
sa(dp1135
g6
I01
sg7
g34
sg9
L5L
sa(dp1136
g6
I01
sg7
g36
sg9
L5L
sa(dp1137
g6
I01
sg7
g38
sg9
L5L
sa(dp1138
g6
I01
sg7
g40
sg9
L5L
sa(dp1139
g6
I01
sg7
g797
sg9
L5L
sa(dp1140
g6
I01
sg7
g42
sg9
L5L
sa(dp1141
g6
I01
sg7
g44
sg9
L2L
sg18
VCreate and return a new object.  See help(type) for accurate signature.
p1142
sa(dp1143
g6
I01
sg7
g47
sg9
L2L
sg18
Vhelper for pickle
p1144
sa(dp1145
g6
I01
sg7
g49
sg9
L2L
sg18
Vhelper for pickle
p1146
sa(dp1147
g6
I01
sg7
g52
sg9
L5L
sa(dp1148
g6
I01
sg7
g54
sg9
L5L
sa(dp1149
g6
I01
sg7
g58
sg9
L2L
sg18
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1150
sa(dp1151
g6
I01
sg7
g61
sg9
L5L
sa(dp1152
g6
I01
sg7
g63
sg9
L2L
sg18
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1153
sa(dp1154
g6
I01
sg7
g815
sg9
L5L
sa(dp1155
g6
I01
sg7
Vcreate_module
p1156
sg9
L5L
sa(dp1157
g6
I01
sg7
Vexec_module
p1158
sg9
L5L
sa(dp1159
g6
I01
sg7
Vfind_module
p1160
sg9
L5L
sa(dp1161
g6
I01
sg7
Vfind_spec
p1162
sg9
L5L
sa(dp1163
g6
I01
sg7
Vget_code
p1164
sg9
L5L
sa(dp1165
g6
I01
sg7
Vget_source
p1166
sg9
L5L
sa(dp1167
g6
I01
sg7
Vis_package
p1168
sg9
L5L
sa(dp1169
g6
I01
sg7
Vload_module
p1170
sg9
L5L
sa(dp1171
g6
I01
sg7
Vmodule_repr
p1172
sg9
L5L
sasg6
I01
sg7
V__loader__
p1173
sg9
L3L
sg18
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p1174
sa(dp1175
g6
I01
sg7
V__name__
p1176
sg9
L5L
sa(dp1177
g6
I01
sg7
V__package__
p1178
sg9
L5L
sa(dp1179
g6
I01
sg7
V__spec__
p1180
sg9
L5L
sa(dp1181
g6
I01
sg7
Vopen
p1182
sg9
L2L
sg18
VOpen file and return a stream.  Raise IOError upon failure.\u000a\u000afile is either a text or byte string giving the name (and the path\u000aif the file isn't in the current working directory) of the file to\u000abe opened or an integer file descriptor of the file to be\u000awrapped. (If a file descriptor is given, it is closed when the\u000areturned I/O object is closed, unless closefd is set to False.)\u000a\u000amode is an optional string that specifies the mode in which the file\u000ais opened. It defaults to 'r' which means open for reading in text\u000amode.  Other common values are 'w' for writing (truncating the file if\u000ait already exists), 'x' for creating and writing to a new file, and\u000a'a' for appending (which on some Unix systems, means that all writes\u000aappend to the end of the file regardless of the current seek position).\u000aIn text mode, if encoding is not specified the encoding used is platform\u000adependent: locale.getpreferredencoding(False) is called to get the\u000acurrent locale encoding. (For reading and writing raw bytes use binary\u000amode and leave encoding unspecified.) The available modes are:\u000a\u000a========= ===============================================================\u000aCharacter Meaning\u000a--------- ---------------------------------------------------------------\u000a'r'       open for reading (default)\u000a'w'       open for writing, truncating the file first\u000a'x'       create a new file and open it for writing\u000a'a'       open for writing, appending to the end of the file if it exists\u000a'b'       binary mode\u000a't'       text mode (default)\u000a'+'       open a disk file for updating (reading and writing)\u000a'U'       universal newline mode (deprecated)\u000a========= ===============================================================\u000a\u000aThe default mode is 'rt' (open for reading text). For binary random\u000aaccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\u000a'r+b' opens the file without truncation. The 'x' mode implies 'w' and\u000araises an `FileExistsError` if the file already exists.\u000a\u000aPython distinguishes between files opened in binary and text modes,\u000aeven when the underlying operating system doesn't. Files opened in\u000abinary mode (appending 'b' to the mode argument) return contents as\u000abytes objects without any decoding. In text mode (the default, or when\u000a't' is appended to the mode argument), the contents of the file are\u000areturned as strings, the bytes having been first decoded using a\u000aplatform-dependent encoding or using the specified encoding if given.\u000a\u000a'U' mode is deprecated and will raise an exception in future versions\u000aof Python.  It has no effect in Python 3.  Use newline to control\u000auniversal newlines mode.\u000a\u000abuffering is an optional integer used to set the buffering policy.\u000aPass 0 to switch buffering off (only allowed in binary mode), 1 to select\u000aline buffering (only usable in text mode), and an integer > 1 to indicate\u000athe size of a fixed-size chunk buffer.  When no buffering argument is\u000agiven, the default buffering policy works as follows:\u000a\u000a* Binary files are buffered in fixed-size chunks; the size of the buffer\u000a  is chosen using a heuristic trying to determine the underlying device's\u000a  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\u000a  On many systems, the buffer will typically be 4096 or 8192 bytes long.\u000a\u000a* "Interactive" text files (files for which isatty() returns True)\u000a  use line buffering.  Other text files use the policy described above\u000a  for binary files.\u000a\u000aencoding is the name of the encoding used to decode or encode the\u000afile. This should only be used in text mode. The default encoding is\u000aplatform dependent, but any encoding supported by Python can be\u000apassed.  See the codecs module for the list of supported encodings.\u000a\u000aerrors is an optional string that specifies how encoding errors are to\u000abe handled---this argument should not be used in binary mode. Pass\u000a'strict' to raise a ValueError exception if there is an encoding error\u000a(the default of None has the same effect), or pass 'ignore' to ignore\u000aerrors. (Note that ignoring encoding errors can lead to data loss.)\u000aSee the documentation for codecs.register or run 'help(codecs.Codec)'\u000afor a list of the permitted encoding error strings.\u000a\u000anewline controls how universal newlines works (it only applies to text\u000amode). It can be None, '', '\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as\u000afollows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u005cn', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf closefd is False, the underlying file descriptor will be kept open\u000awhen the file is closed. This does not work when a file name is given\u000aand must be True in that case.\u000a\u000aA custom opener can be used by passing a callable as *opener*. The\u000aunderlying file descriptor for the file object is then obtained by\u000acalling *opener* with (*file*, *flags*). *opener* must return an open\u000afile descriptor (passing os.open as *opener* results in functionality\u000asimilar to passing None).\u000a\u000aopen() returns a file object whose type depends on the mode, and\u000athrough which the standard file operations such as reading and writing\u000aare performed. When open() is used to open a file in a text mode ('w',\u000a'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\u000aa file in a binary mode, the returned class varies: in read binary\u000amode, it returns a BufferedReader; in write binary and append binary\u000amodes, it returns a BufferedWriter, and in read/write mode, it returns\u000aa BufferedRandom.\u000a\u000aIt is also possible to use a string or bytearray as a file for both\u000areading and writing. For strings StringIO can be used like a file\u000aopened in a text mode, and for bytes a BytesIO can be used like a file\u000aopened in a binary mode.
p1183
sasg6
I01
sg7
V_io
p1184
sg18
VThe io module provides the Python interfaces to stream handling. The\u000abuiltin open function is defined in this module.\u000a\u000aAt the top of the I/O hierarchy is the abstract base class IOBase. It\u000adefines the basic interface to a stream. Note, however, that there is no\u000aseparation between reading and writing to streams; implementations are\u000aallowed to raise an IOError if they do not support a given operation.\u000a\u000aExtending IOBase is RawIOBase which deals simply with the reading and\u000awriting of raw bytes to a stream. FileIO subclasses RawIOBase to provide\u000aan interface to OS files.\u000a\u000aBufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\u000asubclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\u000astreams that are readable, writable, and both respectively.\u000aBufferedRandom provides a buffered interface to random access\u000astreams. BytesIO is a simple stream of in-memory bytes.\u000a\u000aAnother IOBase subclass, TextIOBase, deals with the encoding and decoding\u000aof streams into text. TextIOWrapper, which extends it, is a buffered text\u000ainterface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\u000ais an in-memory stream for text.\u000a\u000aArgument names are not part of the specification, and only the arguments\u000aof open() are intended to be used as keyword arguments.\u000a\u000adata:\u000a\u000aDEFAULT_BUFFER_SIZE\u000a\u000a   An int containing the default buffer size used by the module's buffered\u000a   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\u000a   possible.\u000a
p1185
s.