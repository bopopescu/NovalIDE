(dp0
Vname
p1
V_io
p2
sVis_builtin
p3
I01
sVdoc
p4
VThe io module provides the Python interfaces to stream handling. The\u000abuiltin open function is defined in this module.\u000a\u000aAt the top of the I/O hierarchy is the abstract base class IOBase. It\u000adefines the basic interface to a stream. Note, however, that there is no\u000aseparation between reading and writing to streams; implementations are\u000aallowed to raise an IOError if they do not support a given operation.\u000a\u000aExtending IOBase is RawIOBase which deals simply with the reading and\u000awriting of raw bytes to a stream. FileIO subclasses RawIOBase to provide\u000aan interface to OS files.\u000a\u000aBufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its\u000asubclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer\u000astreams that are readable, writable, and both respectively.\u000aBufferedRandom provides a buffered interface to random access\u000astreams. BytesIO is a simple stream of in-memory bytes.\u000a\u000aAnother IOBase subclass, TextIOBase, deals with the encoding and decoding\u000aof streams into text. TextIOWrapper, which extends it, is a buffered text\u000ainterface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO\u000ais an in-memory stream for text.\u000a\u000aArgument names are not part of the specification, and only the arguments\u000aof open() are intended to be used as keyword arguments.\u000a\u000adata:\u000a\u000aDEFAULT_BUFFER_SIZE\u000a\u000a   An int containing the default buffer size used by the module's buffered\u000a   I/O classes. open() uses the file's blksize (as obtained by os.stat) if\u000a   possible.\u000a
p5
sVchilds
p6
(lp7
(dp8
g1
VBlockingIOError
p9
sg3
I01
sVtype
p10
L3L
sg6
(lp11
(dp12
g1
V__cause__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__context__
p15
sg3
I01
sg10
L5L
sa(dp16
g1
V__delattr__
p17
sg3
I01
sg10
L5L
sa(dp18
g1
V__dict__
p19
sg3
I01
sg10
L5L
sa(dp20
g1
V__dir__
p21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p22
sa(dp23
g1
V__doc__
p24
sg3
I01
sg10
L5L
sa(dp25
g1
V__eq__
p26
sg3
I01
sg10
L5L
sa(dp27
g1
V__format__
p28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p29
sa(dp30
g1
V__ge__
p31
sg3
I01
sg10
L5L
sa(dp32
g1
V__getattribute__
p33
sg3
I01
sg10
L5L
sa(dp34
g1
V__gt__
p35
sg3
I01
sg10
L5L
sa(dp36
g1
V__hash__
p37
sg3
I01
sg10
L5L
sa(dp38
g1
V__init__
p39
sg3
I01
sg10
L5L
sa(dp40
g1
V__init_subclass__
p41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p42
sa(dp43
g1
V__le__
p44
sg3
I01
sg10
L5L
sa(dp45
g1
V__lt__
p46
sg3
I01
sg10
L5L
sa(dp47
g1
V__ne__
p48
sg3
I01
sg10
L5L
sa(dp49
g1
V__new__
p50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p51
sa(dp52
g1
V__reduce__
p53
sg3
I01
sg10
L2L
sg4
Nsa(dp54
g1
V__reduce_ex__
p55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p56
sa(dp57
g1
V__repr__
p58
sg3
I01
sg10
L5L
sa(dp59
g1
V__setattr__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__setstate__
p62
sg3
I01
sg10
L2L
sg4
Nsa(dp63
g1
V__sizeof__
p64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p65
sa(dp66
g1
V__str__
p67
sg3
I01
sg10
L5L
sa(dp68
g1
V__subclasshook__
p69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p70
sa(dp71
g1
V__suppress_context__
p72
sg3
I01
sg10
L5L
sa(dp73
g1
V__traceback__
p74
sg3
I01
sg10
L5L
sa(dp75
g1
Vargs
p76
sg3
I01
sg10
L5L
sa(dp77
g1
Vcharacters_written
p78
sg3
I01
sg10
L5L
sa(dp79
g1
Verrno
p80
sg3
I01
sg10
L5L
sa(dp81
g1
Vfilename
p82
sg3
I01
sg10
L5L
sa(dp83
g1
Vfilename2
p84
sg3
I01
sg10
L5L
sa(dp85
g1
Vstrerror
p86
sg3
I01
sg10
L5L
sa(dp87
g1
Vwinerror
p88
sg3
I01
sg10
L5L
sa(dp89
g1
Vwith_traceback
p90
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p91
sasg4
VI/O operation would block.
p92
sa(dp93
g1
VBufferedRWPair
p94
sg3
I01
sg10
L3L
sg6
(lp95
(dp96
g1
V__del__
p97
sg3
I01
sg10
L5L
sa(dp98
g1
g17
sg3
I01
sg10
L5L
sa(dp99
g1
g19
sg3
I01
sg10
L5L
sa(dp100
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p101
sa(dp102
g1
g24
sg3
I01
sg10
L5L
sa(dp103
g1
V__enter__
p104
sg3
I01
sg10
L2L
sg4
Nsa(dp105
g1
g26
sg3
I01
sg10
L5L
sa(dp106
g1
V__exit__
p107
sg3
I01
sg10
L2L
sg4
Nsa(dp108
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p109
sa(dp110
g1
g31
sg3
I01
sg10
L5L
sa(dp111
g1
g33
sg3
I01
sg10
L5L
sa(dp112
g1
V__getstate__
p113
sg3
I01
sg10
L2L
sg4
Nsa(dp114
g1
g35
sg3
I01
sg10
L5L
sa(dp115
g1
g37
sg3
I01
sg10
L5L
sa(dp116
g1
g39
sg3
I01
sg10
L5L
sa(dp117
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p118
sa(dp119
g1
V__iter__
p120
sg3
I01
sg10
L5L
sa(dp121
g1
g44
sg3
I01
sg10
L5L
sa(dp122
g1
g46
sg3
I01
sg10
L5L
sa(dp123
g1
g48
sg3
I01
sg10
L5L
sa(dp124
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p125
sa(dp126
g1
V__next__
p127
sg3
I01
sg10
L5L
sa(dp128
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p129
sa(dp130
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p131
sa(dp132
g1
g58
sg3
I01
sg10
L5L
sa(dp133
g1
g60
sg3
I01
sg10
L5L
sa(dp134
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p135
sa(dp136
g1
g67
sg3
I01
sg10
L5L
sa(dp137
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p138
sa(dp139
g1
V_checkClosed
p140
sg3
I01
sg10
L2L
sg4
Nsa(dp141
g1
V_checkReadable
p142
sg3
I01
sg10
L2L
sg4
Nsa(dp143
g1
V_checkSeekable
p144
sg3
I01
sg10
L2L
sg4
Nsa(dp145
g1
V_checkWritable
p146
sg3
I01
sg10
L2L
sg4
Nsa(dp147
g1
Vclose
p148
sg3
I01
sg10
L2L
sg4
Nsa(dp149
g1
Vclosed
p150
sg3
I01
sg10
L5L
sa(dp151
g1
Vdetach
p152
sg3
I01
sg10
L2L
sg4
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p153
sa(dp154
g1
Vfileno
p155
sg3
I01
sg10
L2L
sg4
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p156
sa(dp157
g1
Vflush
p158
sg3
I01
sg10
L2L
sg4
Nsa(dp159
g1
Visatty
p160
sg3
I01
sg10
L2L
sg4
Nsa(dp161
g1
Vpeek
p162
sg3
I01
sg10
L2L
sg4
Nsa(dp163
g1
Vread
p164
sg3
I01
sg10
L2L
sg4
Nsa(dp165
g1
Vread1
p166
sg3
I01
sg10
L2L
sg4
Nsa(dp167
g1
Vreadable
p168
sg3
I01
sg10
L2L
sg4
Nsa(dp169
g1
Vreadinto
p170
sg3
I01
sg10
L2L
sg4
Nsa(dp171
g1
Vreadinto1
p172
sg3
I01
sg10
L2L
sg4
Nsa(dp173
g1
Vreadline
p174
sg3
I01
sg10
L2L
sg4
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p175
sa(dp176
g1
Vreadlines
p177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p178
sa(dp179
g1
Vseek
p180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p181
sa(dp182
g1
Vseekable
p183
sg3
I01
sg10
L2L
sg4
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p184
sa(dp185
g1
Vtell
p186
sg3
I01
sg10
L2L
sg4
VReturn current stream position.
p187
sa(dp188
g1
Vtruncate
p189
sg3
I01
sg10
L2L
sg4
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p190
sa(dp191
g1
Vwritable
p192
sg3
I01
sg10
L2L
sg4
Nsa(dp193
g1
Vwrite
p194
sg3
I01
sg10
L2L
sg4
Nsa(dp195
g1
Vwritelines
p196
sg3
I01
sg10
L2L
sg4
Nsasg4
VA buffered reader and writer object together.\u000a\u000aA buffered reader object and buffered writer object put together to\u000aform a sequential IO object that can read and write. This is typically\u000aused with a socket or two-way pipe.\u000a\u000areader and writer are RawIOBase objects that are readable and\u000awriteable respectively. If the buffer_size is omitted it defaults to\u000aDEFAULT_BUFFER_SIZE.
p197
sa(dp198
g1
VBufferedRandom
p199
sg3
I01
sg10
L3L
sg6
(lp200
(dp201
g1
g97
sg3
I01
sg10
L5L
sa(dp202
g1
g17
sg3
I01
sg10
L5L
sa(dp203
g1
g19
sg3
I01
sg10
L5L
sa(dp204
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p205
sa(dp206
g1
g24
sg3
I01
sg10
L5L
sa(dp207
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp208
g1
g26
sg3
I01
sg10
L5L
sa(dp209
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp210
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p211
sa(dp212
g1
g31
sg3
I01
sg10
L5L
sa(dp213
g1
g33
sg3
I01
sg10
L5L
sa(dp214
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp215
g1
g35
sg3
I01
sg10
L5L
sa(dp216
g1
g37
sg3
I01
sg10
L5L
sa(dp217
g1
g39
sg3
I01
sg10
L5L
sa(dp218
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p219
sa(dp220
g1
g120
sg3
I01
sg10
L5L
sa(dp221
g1
g44
sg3
I01
sg10
L5L
sa(dp222
g1
g46
sg3
I01
sg10
L5L
sa(dp223
g1
g48
sg3
I01
sg10
L5L
sa(dp224
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p225
sa(dp226
g1
g127
sg3
I01
sg10
L5L
sa(dp227
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p228
sa(dp229
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p230
sa(dp231
g1
g58
sg3
I01
sg10
L5L
sa(dp232
g1
g60
sg3
I01
sg10
L5L
sa(dp233
g1
g64
sg3
I01
sg10
L2L
sg4
Nsa(dp234
g1
g67
sg3
I01
sg10
L5L
sa(dp235
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p236
sa(dp237
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp238
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp239
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp240
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp241
g1
V_dealloc_warn
p242
sg3
I01
sg10
L2L
sg4
Nsa(dp243
g1
V_finalizing
p244
sg3
I01
sg10
L5L
sa(dp245
g1
g148
sg3
I01
sg10
L2L
sg4
Nsa(dp246
g1
g150
sg3
I01
sg10
L5L
sa(dp247
g1
g152
sg3
I01
sg10
L2L
sg4
Nsa(dp248
g1
g155
sg3
I01
sg10
L2L
sg4
Nsa(dp249
g1
g158
sg3
I01
sg10
L2L
sg4
Nsa(dp250
g1
g160
sg3
I01
sg10
L2L
sg4
Nsa(dp251
g1
Vmode
p252
sg3
I01
sg10
L5L
sa(dp253
g1
g1
sg3
I01
sg10
L5L
sa(dp254
g1
g162
sg3
I01
sg10
L2L
sg4
Nsa(dp255
g1
Vraw
p256
sg3
I01
sg10
L5L
sa(dp257
g1
g164
sg3
I01
sg10
L2L
sg4
Nsa(dp258
g1
g166
sg3
I01
sg10
L2L
sg4
Nsa(dp259
g1
g168
sg3
I01
sg10
L2L
sg4
Nsa(dp260
g1
g170
sg3
I01
sg10
L2L
sg4
Nsa(dp261
g1
g172
sg3
I01
sg10
L2L
sg4
Nsa(dp262
g1
g174
sg3
I01
sg10
L2L
sg4
Nsa(dp263
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p264
sa(dp265
g1
g180
sg3
I01
sg10
L2L
sg4
Nsa(dp266
g1
g183
sg3
I01
sg10
L2L
sg4
Nsa(dp267
g1
g186
sg3
I01
sg10
L2L
sg4
Nsa(dp268
g1
g189
sg3
I01
sg10
L2L
sg4
Nsa(dp269
g1
g192
sg3
I01
sg10
L2L
sg4
Nsa(dp270
g1
g194
sg3
I01
sg10
L2L
sg4
Nsa(dp271
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VA buffered interface to random access streams.\u000a\u000aThe constructor creates a reader and writer for a seekable stream,\u000araw, given in the first argument. If the buffer_size is omitted it\u000adefaults to DEFAULT_BUFFER_SIZE.
p272
sa(dp273
g1
VBufferedReader
p274
sg3
I01
sg10
L3L
sg6
(lp275
(dp276
g1
g97
sg3
I01
sg10
L5L
sa(dp277
g1
g17
sg3
I01
sg10
L5L
sa(dp278
g1
g19
sg3
I01
sg10
L5L
sa(dp279
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p280
sa(dp281
g1
g24
sg3
I01
sg10
L5L
sa(dp282
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp283
g1
g26
sg3
I01
sg10
L5L
sa(dp284
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp285
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p286
sa(dp287
g1
g31
sg3
I01
sg10
L5L
sa(dp288
g1
g33
sg3
I01
sg10
L5L
sa(dp289
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp290
g1
g35
sg3
I01
sg10
L5L
sa(dp291
g1
g37
sg3
I01
sg10
L5L
sa(dp292
g1
g39
sg3
I01
sg10
L5L
sa(dp293
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p294
sa(dp295
g1
g120
sg3
I01
sg10
L5L
sa(dp296
g1
g44
sg3
I01
sg10
L5L
sa(dp297
g1
g46
sg3
I01
sg10
L5L
sa(dp298
g1
g48
sg3
I01
sg10
L5L
sa(dp299
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p300
sa(dp301
g1
g127
sg3
I01
sg10
L5L
sa(dp302
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p303
sa(dp304
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p305
sa(dp306
g1
g58
sg3
I01
sg10
L5L
sa(dp307
g1
g60
sg3
I01
sg10
L5L
sa(dp308
g1
g64
sg3
I01
sg10
L2L
sg4
Nsa(dp309
g1
g67
sg3
I01
sg10
L5L
sa(dp310
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p311
sa(dp312
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp313
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp314
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp315
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp316
g1
g242
sg3
I01
sg10
L2L
sg4
Nsa(dp317
g1
g244
sg3
I01
sg10
L5L
sa(dp318
g1
g148
sg3
I01
sg10
L2L
sg4
Nsa(dp319
g1
g150
sg3
I01
sg10
L5L
sa(dp320
g1
g152
sg3
I01
sg10
L2L
sg4
Nsa(dp321
g1
g155
sg3
I01
sg10
L2L
sg4
Nsa(dp322
g1
g158
sg3
I01
sg10
L2L
sg4
Nsa(dp323
g1
g160
sg3
I01
sg10
L2L
sg4
Nsa(dp324
g1
g252
sg3
I01
sg10
L5L
sa(dp325
g1
g1
sg3
I01
sg10
L5L
sa(dp326
g1
g162
sg3
I01
sg10
L2L
sg4
Nsa(dp327
g1
g256
sg3
I01
sg10
L5L
sa(dp328
g1
g164
sg3
I01
sg10
L2L
sg4
Nsa(dp329
g1
g166
sg3
I01
sg10
L2L
sg4
Nsa(dp330
g1
g168
sg3
I01
sg10
L2L
sg4
Nsa(dp331
g1
g170
sg3
I01
sg10
L2L
sg4
Nsa(dp332
g1
g172
sg3
I01
sg10
L2L
sg4
Nsa(dp333
g1
g174
sg3
I01
sg10
L2L
sg4
Nsa(dp334
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p335
sa(dp336
g1
g180
sg3
I01
sg10
L2L
sg4
Nsa(dp337
g1
g183
sg3
I01
sg10
L2L
sg4
Nsa(dp338
g1
g186
sg3
I01
sg10
L2L
sg4
Nsa(dp339
g1
g189
sg3
I01
sg10
L2L
sg4
Nsa(dp340
g1
g192
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p341
sa(dp342
g1
g194
sg3
I01
sg10
L2L
sg4
VWrite the given buffer to the IO stream.\u000a\u000aReturns the number of bytes written, which is always the length of b\u000ain bytes.\u000a\u000aRaises BlockingIOError if the buffer is full and the\u000aunderlying raw stream cannot accept more data at the moment.\u000a
p343
sa(dp344
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VCreate a new buffered reader using the given readable raw IO object.
p345
sa(dp346
g1
VBufferedWriter
p347
sg3
I01
sg10
L3L
sg6
(lp348
(dp349
g1
g97
sg3
I01
sg10
L5L
sa(dp350
g1
g17
sg3
I01
sg10
L5L
sa(dp351
g1
g19
sg3
I01
sg10
L5L
sa(dp352
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p353
sa(dp354
g1
g24
sg3
I01
sg10
L5L
sa(dp355
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp356
g1
g26
sg3
I01
sg10
L5L
sa(dp357
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp358
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p359
sa(dp360
g1
g31
sg3
I01
sg10
L5L
sa(dp361
g1
g33
sg3
I01
sg10
L5L
sa(dp362
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp363
g1
g35
sg3
I01
sg10
L5L
sa(dp364
g1
g37
sg3
I01
sg10
L5L
sa(dp365
g1
g39
sg3
I01
sg10
L5L
sa(dp366
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p367
sa(dp368
g1
g120
sg3
I01
sg10
L5L
sa(dp369
g1
g44
sg3
I01
sg10
L5L
sa(dp370
g1
g46
sg3
I01
sg10
L5L
sa(dp371
g1
g48
sg3
I01
sg10
L5L
sa(dp372
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p373
sa(dp374
g1
g127
sg3
I01
sg10
L5L
sa(dp375
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p376
sa(dp377
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p378
sa(dp379
g1
g58
sg3
I01
sg10
L5L
sa(dp380
g1
g60
sg3
I01
sg10
L5L
sa(dp381
g1
g64
sg3
I01
sg10
L2L
sg4
Nsa(dp382
g1
g67
sg3
I01
sg10
L5L
sa(dp383
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p384
sa(dp385
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp386
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp387
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp388
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp389
g1
g242
sg3
I01
sg10
L2L
sg4
Nsa(dp390
g1
g244
sg3
I01
sg10
L5L
sa(dp391
g1
g148
sg3
I01
sg10
L2L
sg4
Nsa(dp392
g1
g150
sg3
I01
sg10
L5L
sa(dp393
g1
g152
sg3
I01
sg10
L2L
sg4
Nsa(dp394
g1
g155
sg3
I01
sg10
L2L
sg4
Nsa(dp395
g1
g158
sg3
I01
sg10
L2L
sg4
Nsa(dp396
g1
g160
sg3
I01
sg10
L2L
sg4
Nsa(dp397
g1
g252
sg3
I01
sg10
L5L
sa(dp398
g1
g1
sg3
I01
sg10
L5L
sa(dp399
g1
g256
sg3
I01
sg10
L5L
sa(dp400
g1
g164
sg3
I01
sg10
L2L
sg4
VRead and return up to n bytes.\u000a\u000aIf the argument is omitted, None, or negative, reads and\u000areturns all data until EOF.\u000a\u000aIf the argument is positive, and the underlying raw stream is\u000anot 'interactive', multiple raw reads may be issued to satisfy\u000athe byte count (unless EOF is reached first).  But for\u000ainteractive raw streams (as well as sockets and pipes), at most\u000aone raw read will be issued, and a short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a\u000aReturns None if the underlying raw stream was open in non-blocking\u000amode and no data is available at the moment.\u000a
p401
sa(dp402
g1
g166
sg3
I01
sg10
L2L
sg4
VRead and return up to n bytes, with at most one read() call\u000ato the underlying raw stream. A short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a
p403
sa(dp404
g1
g168
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p405
sa(dp406
g1
g170
sg3
I01
sg10
L2L
sg4
Nsa(dp407
g1
g172
sg3
I01
sg10
L2L
sg4
Nsa(dp408
g1
g174
sg3
I01
sg10
L2L
sg4
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p409
sa(dp410
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p411
sa(dp412
g1
g180
sg3
I01
sg10
L2L
sg4
Nsa(dp413
g1
g183
sg3
I01
sg10
L2L
sg4
Nsa(dp414
g1
g186
sg3
I01
sg10
L2L
sg4
Nsa(dp415
g1
g189
sg3
I01
sg10
L2L
sg4
Nsa(dp416
g1
g192
sg3
I01
sg10
L2L
sg4
Nsa(dp417
g1
g194
sg3
I01
sg10
L2L
sg4
Nsa(dp418
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VA buffer for a writeable sequential RawIO object.\u000a\u000aThe constructor creates a BufferedWriter for the given writeable raw\u000astream. If the buffer_size is not given, it defaults to\u000aDEFAULT_BUFFER_SIZE.
p419
sa(dp420
g1
VBytesIO
p421
sg3
I01
sg10
L3L
sg6
(lp422
(dp423
g1
g97
sg3
I01
sg10
L5L
sa(dp424
g1
g17
sg3
I01
sg10
L5L
sa(dp425
g1
g19
sg3
I01
sg10
L5L
sa(dp426
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p427
sa(dp428
g1
g24
sg3
I01
sg10
L5L
sa(dp429
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp430
g1
g26
sg3
I01
sg10
L5L
sa(dp431
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp432
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p433
sa(dp434
g1
g31
sg3
I01
sg10
L5L
sa(dp435
g1
g33
sg3
I01
sg10
L5L
sa(dp436
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp437
g1
g35
sg3
I01
sg10
L5L
sa(dp438
g1
g37
sg3
I01
sg10
L5L
sa(dp439
g1
g39
sg3
I01
sg10
L5L
sa(dp440
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p441
sa(dp442
g1
g120
sg3
I01
sg10
L5L
sa(dp443
g1
g44
sg3
I01
sg10
L5L
sa(dp444
g1
g46
sg3
I01
sg10
L5L
sa(dp445
g1
g48
sg3
I01
sg10
L5L
sa(dp446
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p447
sa(dp448
g1
g127
sg3
I01
sg10
L5L
sa(dp449
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p450
sa(dp451
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p452
sa(dp453
g1
g58
sg3
I01
sg10
L5L
sa(dp454
g1
g60
sg3
I01
sg10
L5L
sa(dp455
g1
g62
sg3
I01
sg10
L2L
sg4
Nsa(dp456
g1
g64
sg3
I01
sg10
L2L
sg4
Nsa(dp457
g1
g67
sg3
I01
sg10
L5L
sa(dp458
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p459
sa(dp460
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp461
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp462
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp463
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp464
g1
g148
sg3
I01
sg10
L2L
sg4
VDisable all I/O operations.
p465
sa(dp466
g1
g150
sg3
I01
sg10
L5L
sa(dp467
g1
g152
sg3
I01
sg10
L2L
sg4
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p468
sa(dp469
g1
g155
sg3
I01
sg10
L2L
sg4
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p470
sa(dp471
g1
g158
sg3
I01
sg10
L2L
sg4
VDoes nothing.
p472
sa(dp473
g1
Vgetbuffer
p474
sg3
I01
sg10
L2L
sg4
VGet a read-write view over the contents of the BytesIO object.
p475
sa(dp476
g1
Vgetvalue
p477
sg3
I01
sg10
L2L
sg4
VRetrieve the entire contents of the BytesIO object.
p478
sa(dp479
g1
g160
sg3
I01
sg10
L2L
sg4
VAlways returns False.\u000a\u000aBytesIO objects are not connected to a TTY-like device.
p480
sa(dp481
g1
g164
sg3
I01
sg10
L2L
sg4
VRead at most size bytes, returned as a bytes object.\u000a\u000aIf the size argument is negative, read until EOF is reached.\u000aReturn an empty bytes object at EOF.
p482
sa(dp483
g1
g166
sg3
I01
sg10
L2L
sg4
VRead at most size bytes, returned as a bytes object.\u000a\u000aIf the size argument is negative or omitted, read until EOF is reached.\u000aReturn an empty bytes object at EOF.
p484
sa(dp485
g1
g168
sg3
I01
sg10
L2L
sg4
VReturns True if the IO object can be read.
p486
sa(dp487
g1
g170
sg3
I01
sg10
L2L
sg4
VRead bytes into buffer.\u000a\u000aReturns number of bytes read (0 for EOF), or None if the object\u000ais set not to block and has no data to read.
p488
sa(dp489
g1
g172
sg3
I01
sg10
L2L
sg4
Nsa(dp490
g1
g174
sg3
I01
sg10
L2L
sg4
VNext line from the file, as a bytes object.\u000a\u000aRetain newline.  A non-negative size argument limits the maximum\u000anumber of bytes to return (an incomplete line may be returned then).\u000aReturn an empty bytes object at EOF.
p491
sa(dp492
g1
g177
sg3
I01
sg10
L2L
sg4
VList of bytes objects, each a line from the file.\u000a\u000aCall readline() repeatedly and return a list of the lines so read.\u000aThe optional size argument, if given, is an approximate bound on the\u000atotal number of bytes in the lines returned.
p493
sa(dp494
g1
g180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aSeek to byte offset pos relative to position indicated by whence:\u000a     0  Start of stream (the default).  pos should be >= 0;\u000a     1  Current position - pos may be negative;\u000a     2  End of stream - pos usually negative.\u000aReturns the new absolute position.
p495
sa(dp496
g1
g183
sg3
I01
sg10
L2L
sg4
VReturns True if the IO object can be seeked.
p497
sa(dp498
g1
g186
sg3
I01
sg10
L2L
sg4
VCurrent file position, an integer.
p499
sa(dp500
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate the file to at most size bytes.\u000a\u000aSize defaults to the current file position, as returned by tell().\u000aThe current file position is unchanged.  Returns the new size.
p501
sa(dp502
g1
g192
sg3
I01
sg10
L2L
sg4
VReturns True if the IO object can be written.
p503
sa(dp504
g1
g194
sg3
I01
sg10
L2L
sg4
VWrite bytes to file.\u000a\u000aReturn the number of bytes written.
p505
sa(dp506
g1
g196
sg3
I01
sg10
L2L
sg4
VWrite lines to the file.\u000a\u000aNote that newlines are not added.  lines can be any iterable object\u000aproducing bytes-like objects. This is equivalent to calling write() for\u000aeach element.
p507
sasg4
VBuffered I/O implementation using an in-memory bytes buffer.
p508
sa(dp509
g1
VDEFAULT_BUFFER_SIZE
p510
sg3
I01
sg10
L5L
sa(dp511
g1
VFileIO
p512
sg3
I01
sg10
L3L
sg6
(lp513
(dp514
g1
g97
sg3
I01
sg10
L5L
sa(dp515
g1
g17
sg3
I01
sg10
L5L
sa(dp516
g1
g19
sg3
I01
sg10
L5L
sa(dp517
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p518
sa(dp519
g1
g24
sg3
I01
sg10
L5L
sa(dp520
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp521
g1
g26
sg3
I01
sg10
L5L
sa(dp522
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp523
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p524
sa(dp525
g1
g31
sg3
I01
sg10
L5L
sa(dp526
g1
g33
sg3
I01
sg10
L5L
sa(dp527
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp528
g1
g35
sg3
I01
sg10
L5L
sa(dp529
g1
g37
sg3
I01
sg10
L5L
sa(dp530
g1
g39
sg3
I01
sg10
L5L
sa(dp531
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p532
sa(dp533
g1
g120
sg3
I01
sg10
L5L
sa(dp534
g1
g44
sg3
I01
sg10
L5L
sa(dp535
g1
g46
sg3
I01
sg10
L5L
sa(dp536
g1
g48
sg3
I01
sg10
L5L
sa(dp537
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p538
sa(dp539
g1
g127
sg3
I01
sg10
L5L
sa(dp540
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p541
sa(dp542
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p543
sa(dp544
g1
g58
sg3
I01
sg10
L5L
sa(dp545
g1
g60
sg3
I01
sg10
L5L
sa(dp546
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p547
sa(dp548
g1
g67
sg3
I01
sg10
L5L
sa(dp549
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p550
sa(dp551
g1
V_blksize
p552
sg3
I01
sg10
L5L
sa(dp553
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp554
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp555
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp556
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp557
g1
g242
sg3
I01
sg10
L2L
sg4
Nsa(dp558
g1
g244
sg3
I01
sg10
L5L
sa(dp559
g1
g148
sg3
I01
sg10
L2L
sg4
VClose the file.\u000a\u000aA closed file cannot be used for further I/O operations.  close() may be\u000acalled more than once without error.
p560
sa(dp561
g1
g150
sg3
I01
sg10
L5L
sa(dp562
g1
Vclosefd
p563
sg3
I01
sg10
L5L
sa(dp564
g1
g155
sg3
I01
sg10
L2L
sg4
VReturn the underlying file descriptor (an integer).
p565
sa(dp566
g1
g158
sg3
I01
sg10
L2L
sg4
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p567
sa(dp568
g1
g160
sg3
I01
sg10
L2L
sg4
VTrue if the file is connected to a TTY device.
p569
sa(dp570
g1
g252
sg3
I01
sg10
L5L
sa(dp571
g1
g164
sg3
I01
sg10
L2L
sg4
VRead at most size bytes, returned as bytes.\u000a\u000aOnly makes one system call, so less data may be returned than requested.\u000aIn non-blocking mode, returns None if no data is available.\u000aReturn an empty bytes object at EOF.
p572
sa(dp573
g1
g168
sg3
I01
sg10
L2L
sg4
VTrue if file was opened in a read mode.
p574
sa(dp575
g1
Vreadall
p576
sg3
I01
sg10
L2L
sg4
VRead all data from the file, returned as bytes.\u000a\u000aIn non-blocking mode, returns as much as is immediately available,\u000aor None if no data is available.  Return an empty bytes object at EOF.
p577
sa(dp578
g1
g170
sg3
I01
sg10
L2L
sg4
VSame as RawIOBase.readinto().
p579
sa(dp580
g1
g174
sg3
I01
sg10
L2L
sg4
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p581
sa(dp582
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p583
sa(dp584
g1
g180
sg3
I01
sg10
L2L
sg4
VMove to new file position and return the file position.\u000a\u000aArgument offset is a byte count.  Optional argument whence defaults to\u000aSEEK_SET or 0 (offset from start of file, offset should be >= 0); other values\u000aare SEEK_CUR or 1 (move relative to current position, positive or negative),\u000aand SEEK_END or 2 (move relative to end of file, usually negative, although\u000amany platforms allow seeking beyond the end of a file).\u000a\u000aNote that not all file objects are seekable.
p585
sa(dp586
g1
g183
sg3
I01
sg10
L2L
sg4
VTrue if file supports random-access.
p587
sa(dp588
g1
g186
sg3
I01
sg10
L2L
sg4
VCurrent file position.\u000a\u000aCan raise OSError for non seekable files.
p589
sa(dp590
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate the file to at most size bytes and return the truncated size.\u000a\u000aSize defaults to the current file position, as returned by tell().\u000aThe current file position is changed to the value of size.
p591
sa(dp592
g1
g192
sg3
I01
sg10
L2L
sg4
VTrue if file was opened in a write mode.
p593
sa(dp594
g1
g194
sg3
I01
sg10
L2L
sg4
VWrite buffer b to file, return number of bytes written.\u000a\u000aOnly makes one system call, so not all of the data may be written.\u000aThe number of bytes actually written is returned.  In non-blocking mode,\u000areturns None if the write would block.
p595
sa(dp596
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VOpen a file.\u000a\u000aThe mode can be 'r' (default), 'w', 'x' or 'a' for reading,\u000awriting, exclusive creation or appending.  The file will be created if it\u000adoesn't exist when opened for writing or appending; it will be truncated\u000awhen opened for writing.  A FileExistsError will be raised if it already\u000aexists when opened for creating. Opening a file for creating implies\u000awriting so this mode behaves in a similar way to 'w'.Add a '+' to the mode\u000ato allow simultaneous reading and writing. A custom opener can be used by\u000apassing a callable as *opener*. The underlying file descriptor for the file\u000aobject is then obtained by calling opener with (*name*, *flags*).\u000a*opener* must return an open file descriptor (passing os.open as *opener*\u000aresults in functionality similar to passing None).
p597
sa(dp598
g1
VIncrementalNewlineDecoder
p599
sg3
I01
sg10
L3L
sg6
(lp600
(dp601
g1
g17
sg3
I01
sg10
L5L
sa(dp602
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p603
sa(dp604
g1
g24
sg3
I01
sg10
L5L
sa(dp605
g1
g26
sg3
I01
sg10
L5L
sa(dp606
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p607
sa(dp608
g1
g31
sg3
I01
sg10
L5L
sa(dp609
g1
g33
sg3
I01
sg10
L5L
sa(dp610
g1
g35
sg3
I01
sg10
L5L
sa(dp611
g1
g37
sg3
I01
sg10
L5L
sa(dp612
g1
g39
sg3
I01
sg10
L5L
sa(dp613
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p614
sa(dp615
g1
g44
sg3
I01
sg10
L5L
sa(dp616
g1
g46
sg3
I01
sg10
L5L
sa(dp617
g1
g48
sg3
I01
sg10
L5L
sa(dp618
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p619
sa(dp620
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p621
sa(dp622
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p623
sa(dp624
g1
g58
sg3
I01
sg10
L5L
sa(dp625
g1
g60
sg3
I01
sg10
L5L
sa(dp626
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p627
sa(dp628
g1
g67
sg3
I01
sg10
L5L
sa(dp629
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p630
sa(dp631
g1
Vdecode
p632
sg3
I01
sg10
L2L
sg4
Nsa(dp633
g1
Vgetstate
p634
sg3
I01
sg10
L2L
sg4
Nsa(dp635
g1
Vnewlines
p636
sg3
I01
sg10
L5L
sa(dp637
g1
Vreset
p638
sg3
I01
sg10
L2L
sg4
Nsa(dp639
g1
Vsetstate
p640
sg3
I01
sg10
L2L
sg4
Nsasg4
VCodec used when reading a file in universal newlines mode.\u000a\u000aIt wraps another incremental decoder, translating \u005cr\u005cn and \u005cr into \u005cn.\u000aIt also records the types of newlines encountered.  When used with\u000atranslate=False, it ensures that the newline sequence is returned in\u000aone piece. When used with decoder=None, it expects unicode strings as\u000adecode input and translates newlines without first invoking an external\u000adecoder.
p641
sa(dp642
g1
VStringIO
p643
sg3
I01
sg10
L3L
sg6
(lp644
(dp645
g1
g97
sg3
I01
sg10
L5L
sa(dp646
g1
g17
sg3
I01
sg10
L5L
sa(dp647
g1
g19
sg3
I01
sg10
L5L
sa(dp648
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p649
sa(dp650
g1
g24
sg3
I01
sg10
L5L
sa(dp651
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp652
g1
g26
sg3
I01
sg10
L5L
sa(dp653
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp654
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p655
sa(dp656
g1
g31
sg3
I01
sg10
L5L
sa(dp657
g1
g33
sg3
I01
sg10
L5L
sa(dp658
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp659
g1
g35
sg3
I01
sg10
L5L
sa(dp660
g1
g37
sg3
I01
sg10
L5L
sa(dp661
g1
g39
sg3
I01
sg10
L5L
sa(dp662
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p663
sa(dp664
g1
g120
sg3
I01
sg10
L5L
sa(dp665
g1
g44
sg3
I01
sg10
L5L
sa(dp666
g1
g46
sg3
I01
sg10
L5L
sa(dp667
g1
g48
sg3
I01
sg10
L5L
sa(dp668
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p669
sa(dp670
g1
g127
sg3
I01
sg10
L5L
sa(dp671
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p672
sa(dp673
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p674
sa(dp675
g1
g58
sg3
I01
sg10
L5L
sa(dp676
g1
g60
sg3
I01
sg10
L5L
sa(dp677
g1
g62
sg3
I01
sg10
L2L
sg4
Nsa(dp678
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p679
sa(dp680
g1
g67
sg3
I01
sg10
L5L
sa(dp681
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p682
sa(dp683
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp684
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp685
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp686
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp687
g1
g148
sg3
I01
sg10
L2L
sg4
VClose the IO object.\u000a\u000aAttempting any further operation after the object is closed\u000awill raise a ValueError.\u000a\u000aThis method has no effect if the file is already closed.
p688
sa(dp689
g1
g150
sg3
I01
sg10
L5L
sa(dp690
g1
g152
sg3
I01
sg10
L2L
sg4
VSeparate the underlying buffer from the TextIOBase and return it.\u000a\u000aAfter the underlying buffer has been detached, the TextIO is in an\u000aunusable state.\u000a
p691
sa(dp692
g1
Vencoding
p693
sg3
I01
sg10
L5L
sa(dp694
g1
Verrors
p695
sg3
I01
sg10
L5L
sa(dp696
g1
g155
sg3
I01
sg10
L2L
sg4
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p697
sa(dp698
g1
g158
sg3
I01
sg10
L2L
sg4
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p699
sa(dp700
g1
g477
sg3
I01
sg10
L2L
sg4
VRetrieve the entire contents of the object.
p701
sa(dp702
g1
g160
sg3
I01
sg10
L2L
sg4
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p703
sa(dp704
g1
Vline_buffering
p705
sg3
I01
sg10
L5L
sa(dp706
g1
g636
sg3
I01
sg10
L5L
sa(dp707
g1
g164
sg3
I01
sg10
L2L
sg4
VRead at most size characters, returned as a string.\u000a\u000aIf the argument is negative or omitted, read until EOF\u000ais reached. Return an empty string at EOF.
p708
sa(dp709
g1
g168
sg3
I01
sg10
L2L
sg4
VReturns True if the IO object can be read.
p710
sa(dp711
g1
g174
sg3
I01
sg10
L2L
sg4
VRead until newline or EOF.\u000a\u000aReturns an empty string if EOF is hit immediately.
p712
sa(dp713
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p714
sa(dp715
g1
g180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aSeek to character offset pos relative to position indicated by whence:\u000a    0  Start of stream (the default).  pos should be >= 0;\u000a    1  Current position - pos must be 0;\u000a    2  End of stream - pos must be 0.\u000aReturns the new absolute position.
p716
sa(dp717
g1
g183
sg3
I01
sg10
L2L
sg4
VReturns True if the IO object can be seeked.
p718
sa(dp719
g1
g186
sg3
I01
sg10
L2L
sg4
VTell the current file position.
p720
sa(dp721
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate size to pos.\u000a\u000aThe pos argument defaults to the current file position, as\u000areturned by tell().  The current file position is unchanged.\u000aReturns the new absolute position.
p722
sa(dp723
g1
g192
sg3
I01
sg10
L2L
sg4
VReturns True if the IO object can be written.
p724
sa(dp725
g1
g194
sg3
I01
sg10
L2L
sg4
VWrite string to file.\u000a\u000aReturns the number of characters written, which is always equal to\u000athe length of the string.
p726
sa(dp727
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VText I/O implementation using an in-memory buffer.\u000a\u000aThe initial_value argument sets the value of object.  The newline\u000aargument is like the one of TextIOWrapper's constructor.
p728
sa(dp729
g1
VTextIOWrapper
p730
sg3
I01
sg10
L3L
sg6
(lp731
(dp732
g1
V_CHUNK_SIZE
p733
sg3
I01
sg10
L5L
sa(dp734
g1
g97
sg3
I01
sg10
L5L
sa(dp735
g1
g17
sg3
I01
sg10
L5L
sa(dp736
g1
g19
sg3
I01
sg10
L5L
sa(dp737
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p738
sa(dp739
g1
g24
sg3
I01
sg10
L5L
sa(dp740
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp741
g1
g26
sg3
I01
sg10
L5L
sa(dp742
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp743
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p744
sa(dp745
g1
g31
sg3
I01
sg10
L5L
sa(dp746
g1
g33
sg3
I01
sg10
L5L
sa(dp747
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp748
g1
g35
sg3
I01
sg10
L5L
sa(dp749
g1
g37
sg3
I01
sg10
L5L
sa(dp750
g1
g39
sg3
I01
sg10
L5L
sa(dp751
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p752
sa(dp753
g1
g120
sg3
I01
sg10
L5L
sa(dp754
g1
g44
sg3
I01
sg10
L5L
sa(dp755
g1
g46
sg3
I01
sg10
L5L
sa(dp756
g1
g48
sg3
I01
sg10
L5L
sa(dp757
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p758
sa(dp759
g1
g127
sg3
I01
sg10
L5L
sa(dp760
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p761
sa(dp762
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p763
sa(dp764
g1
g58
sg3
I01
sg10
L5L
sa(dp765
g1
g60
sg3
I01
sg10
L5L
sa(dp766
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p767
sa(dp768
g1
g67
sg3
I01
sg10
L5L
sa(dp769
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p770
sa(dp771
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp772
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp773
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp774
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp775
g1
g244
sg3
I01
sg10
L5L
sa(dp776
g1
Vbuffer
p777
sg3
I01
sg10
L5L
sa(dp778
g1
g148
sg3
I01
sg10
L2L
sg4
Nsa(dp779
g1
g150
sg3
I01
sg10
L5L
sa(dp780
g1
g152
sg3
I01
sg10
L2L
sg4
Nsa(dp781
g1
g693
sg3
I01
sg10
L5L
sa(dp782
g1
g695
sg3
I01
sg10
L5L
sa(dp783
g1
g155
sg3
I01
sg10
L2L
sg4
Nsa(dp784
g1
g158
sg3
I01
sg10
L2L
sg4
Nsa(dp785
g1
g160
sg3
I01
sg10
L2L
sg4
Nsa(dp786
g1
g705
sg3
I01
sg10
L5L
sa(dp787
g1
g1
sg3
I01
sg10
L5L
sa(dp788
g1
g636
sg3
I01
sg10
L5L
sa(dp789
g1
g164
sg3
I01
sg10
L2L
sg4
Nsa(dp790
g1
g168
sg3
I01
sg10
L2L
sg4
Nsa(dp791
g1
g174
sg3
I01
sg10
L2L
sg4
Nsa(dp792
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p793
sa(dp794
g1
g180
sg3
I01
sg10
L2L
sg4
Nsa(dp795
g1
g183
sg3
I01
sg10
L2L
sg4
Nsa(dp796
g1
g186
sg3
I01
sg10
L2L
sg4
Nsa(dp797
g1
g189
sg3
I01
sg10
L2L
sg4
Nsa(dp798
g1
g192
sg3
I01
sg10
L2L
sg4
Nsa(dp799
g1
g194
sg3
I01
sg10
L2L
sg4
Nsa(dp800
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VCharacter and line based layer over a BufferedIOBase object, buffer.\u000a\u000aencoding gives the name of the encoding that the stream will be\u000adecoded or encoded with. It defaults to locale.getpreferredencoding(False).\u000a\u000aerrors determines the strictness of encoding and decoding (see\u000ahelp(codecs.Codec) or the documentation for codecs.register) and\u000adefaults to "strict".\u000a\u000anewline controls how line endings are handled. It can be None, '',\u000a'\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as follows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u005cn', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf line_buffering is True, a call to flush is implied when a call to\u000awrite contains a newline character.
p801
sa(dp802
g1
VUnsupportedOperation
p803
sg3
I01
sg10
L3L
sg6
(lp804
(dp805
g1
g13
sg3
I01
sg10
L5L
sa(dp806
g1
g15
sg3
I01
sg10
L5L
sa(dp807
g1
g17
sg3
I01
sg10
L5L
sa(dp808
g1
g19
sg3
I01
sg10
L5L
sa(dp809
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p810
sa(dp811
g1
g24
sg3
I01
sg10
L5L
sa(dp812
g1
g26
sg3
I01
sg10
L5L
sa(dp813
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p814
sa(dp815
g1
g31
sg3
I01
sg10
L5L
sa(dp816
g1
g33
sg3
I01
sg10
L5L
sa(dp817
g1
g35
sg3
I01
sg10
L5L
sa(dp818
g1
g37
sg3
I01
sg10
L5L
sa(dp819
g1
g39
sg3
I01
sg10
L5L
sa(dp820
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p821
sa(dp822
g1
g44
sg3
I01
sg10
L5L
sa(dp823
g1
g46
sg3
I01
sg10
L5L
sa(dp824
g1
V__module__
p825
sg3
I01
sg10
L5L
sa(dp826
g1
g48
sg3
I01
sg10
L5L
sa(dp827
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p828
sa(dp829
g1
g53
sg3
I01
sg10
L2L
sg4
Nsa(dp830
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p831
sa(dp832
g1
g58
sg3
I01
sg10
L5L
sa(dp833
g1
g60
sg3
I01
sg10
L5L
sa(dp834
g1
g62
sg3
I01
sg10
L2L
sg4
Nsa(dp835
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p836
sa(dp837
g1
g67
sg3
I01
sg10
L5L
sa(dp838
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p839
sa(dp840
g1
g72
sg3
I01
sg10
L5L
sa(dp841
g1
g74
sg3
I01
sg10
L5L
sa(dp842
g1
V__weakref__
p843
sg3
I01
sg10
L5L
sa(dp844
g1
g76
sg3
I01
sg10
L5L
sa(dp845
g1
g78
sg3
I01
sg10
L5L
sa(dp846
g1
g80
sg3
I01
sg10
L5L
sa(dp847
g1
g82
sg3
I01
sg10
L5L
sa(dp848
g1
g84
sg3
I01
sg10
L5L
sa(dp849
g1
g86
sg3
I01
sg10
L5L
sa(dp850
g1
g88
sg3
I01
sg10
L5L
sa(dp851
g1
g90
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p852
sasg4
Nsa(dp853
g1
V_BufferedIOBase
p854
sg3
I01
sg10
L3L
sg6
(lp855
(dp856
g1
g97
sg3
I01
sg10
L5L
sa(dp857
g1
g17
sg3
I01
sg10
L5L
sa(dp858
g1
g19
sg3
I01
sg10
L5L
sa(dp859
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p860
sa(dp861
g1
g24
sg3
I01
sg10
L5L
sa(dp862
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp863
g1
g26
sg3
I01
sg10
L5L
sa(dp864
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp865
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p866
sa(dp867
g1
g31
sg3
I01
sg10
L5L
sa(dp868
g1
g33
sg3
I01
sg10
L5L
sa(dp869
g1
g35
sg3
I01
sg10
L5L
sa(dp870
g1
g37
sg3
I01
sg10
L5L
sa(dp871
g1
g39
sg3
I01
sg10
L5L
sa(dp872
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p873
sa(dp874
g1
g120
sg3
I01
sg10
L5L
sa(dp875
g1
g44
sg3
I01
sg10
L5L
sa(dp876
g1
g46
sg3
I01
sg10
L5L
sa(dp877
g1
g48
sg3
I01
sg10
L5L
sa(dp878
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p879
sa(dp880
g1
g127
sg3
I01
sg10
L5L
sa(dp881
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p882
sa(dp883
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p884
sa(dp885
g1
g58
sg3
I01
sg10
L5L
sa(dp886
g1
g60
sg3
I01
sg10
L5L
sa(dp887
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p888
sa(dp889
g1
g67
sg3
I01
sg10
L5L
sa(dp890
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p891
sa(dp892
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp893
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp894
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp895
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp896
g1
g148
sg3
I01
sg10
L2L
sg4
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p897
sa(dp898
g1
g150
sg3
I01
sg10
L5L
sa(dp899
g1
g152
sg3
I01
sg10
L2L
sg4
VDisconnect this buffer from its underlying raw stream and return it.\u000a\u000aAfter the raw stream has been detached, the buffer is in an unusable\u000astate.
p900
sa(dp901
g1
g155
sg3
I01
sg10
L2L
sg4
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p902
sa(dp903
g1
g158
sg3
I01
sg10
L2L
sg4
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p904
sa(dp905
g1
g160
sg3
I01
sg10
L2L
sg4
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p906
sa(dp907
g1
g164
sg3
I01
sg10
L2L
sg4
VRead and return up to n bytes.\u000a\u000aIf the argument is omitted, None, or negative, reads and\u000areturns all data until EOF.\u000a\u000aIf the argument is positive, and the underlying raw stream is\u000anot 'interactive', multiple raw reads may be issued to satisfy\u000athe byte count (unless EOF is reached first).  But for\u000ainteractive raw streams (as well as sockets and pipes), at most\u000aone raw read will be issued, and a short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a\u000aReturns None if the underlying raw stream was open in non-blocking\u000amode and no data is available at the moment.\u000a
p908
sa(dp909
g1
g166
sg3
I01
sg10
L2L
sg4
VRead and return up to n bytes, with at most one read() call\u000ato the underlying raw stream. A short result does not imply\u000athat EOF is imminent.\u000a\u000aReturns an empty bytes object on EOF.\u000a
p910
sa(dp911
g1
g168
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p912
sa(dp913
g1
g170
sg3
I01
sg10
L2L
sg4
Nsa(dp914
g1
g172
sg3
I01
sg10
L2L
sg4
Nsa(dp915
g1
g174
sg3
I01
sg10
L2L
sg4
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p916
sa(dp917
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p918
sa(dp919
g1
g180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p920
sa(dp921
g1
g183
sg3
I01
sg10
L2L
sg4
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p922
sa(dp923
g1
g186
sg3
I01
sg10
L2L
sg4
VReturn current stream position.
p924
sa(dp925
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p926
sa(dp927
g1
g192
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p928
sa(dp929
g1
g194
sg3
I01
sg10
L2L
sg4
VWrite the given buffer to the IO stream.\u000a\u000aReturns the number of bytes written, which is always the length of b\u000ain bytes.\u000a\u000aRaises BlockingIOError if the buffer is full and the\u000aunderlying raw stream cannot accept more data at the moment.\u000a
p930
sa(dp931
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VBase class for buffered IO objects.\u000a\u000aThe main difference with RawIOBase is that the read() method\u000asupports omitting the size argument, and does not have a default\u000aimplementation that defers to readinto().\u000a\u000aIn addition, read(), readinto() and write() may raise\u000aBlockingIOError if the underlying raw stream is in non-blocking\u000amode and not ready; unlike their raw counterparts, they will never\u000areturn None.\u000a\u000aA typical implementation should not inherit from a RawIOBase\u000aimplementation, but wrap one.\u000a
p932
sa(dp933
g1
V_IOBase
p934
sg3
I01
sg10
L3L
sg6
(lp935
(dp936
g1
g97
sg3
I01
sg10
L5L
sa(dp937
g1
g17
sg3
I01
sg10
L5L
sa(dp938
g1
g19
sg3
I01
sg10
L5L
sa(dp939
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p940
sa(dp941
g1
g24
sg3
I01
sg10
L5L
sa(dp942
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp943
g1
g26
sg3
I01
sg10
L5L
sa(dp944
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp945
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p946
sa(dp947
g1
g31
sg3
I01
sg10
L5L
sa(dp948
g1
g33
sg3
I01
sg10
L5L
sa(dp949
g1
g35
sg3
I01
sg10
L5L
sa(dp950
g1
g37
sg3
I01
sg10
L5L
sa(dp951
g1
g39
sg3
I01
sg10
L5L
sa(dp952
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p953
sa(dp954
g1
g120
sg3
I01
sg10
L5L
sa(dp955
g1
g44
sg3
I01
sg10
L5L
sa(dp956
g1
g46
sg3
I01
sg10
L5L
sa(dp957
g1
g48
sg3
I01
sg10
L5L
sa(dp958
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p959
sa(dp960
g1
g127
sg3
I01
sg10
L5L
sa(dp961
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p962
sa(dp963
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p964
sa(dp965
g1
g58
sg3
I01
sg10
L5L
sa(dp966
g1
g60
sg3
I01
sg10
L5L
sa(dp967
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p968
sa(dp969
g1
g67
sg3
I01
sg10
L5L
sa(dp970
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p971
sa(dp972
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp973
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp974
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp975
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp976
g1
g148
sg3
I01
sg10
L2L
sg4
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p977
sa(dp978
g1
g150
sg3
I01
sg10
L5L
sa(dp979
g1
g155
sg3
I01
sg10
L2L
sg4
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p980
sa(dp981
g1
g158
sg3
I01
sg10
L2L
sg4
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p982
sa(dp983
g1
g160
sg3
I01
sg10
L2L
sg4
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p984
sa(dp985
g1
g168
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p986
sa(dp987
g1
g174
sg3
I01
sg10
L2L
sg4
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p988
sa(dp989
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p990
sa(dp991
g1
g180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p992
sa(dp993
g1
g183
sg3
I01
sg10
L2L
sg4
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p994
sa(dp995
g1
g186
sg3
I01
sg10
L2L
sg4
VReturn current stream position.
p996
sa(dp997
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p998
sa(dp999
g1
g192
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p1000
sa(dp1001
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VThe abstract base class for all I/O classes, acting on streams of\u000abytes. There is no public constructor.\u000a\u000aThis class provides dummy implementations for many methods that\u000aderived classes can override selectively; the default implementations\u000arepresent a file that cannot be read, written or seeked.\u000a\u000aEven though IOBase does not declare read, readinto, or write because\u000atheir signatures will vary, implementations and clients should\u000aconsider those methods part of the interface. Also, implementations\u000amay raise UnsupportedOperation when operations they do not support are\u000acalled.\u000a\u000aThe basic type used for binary data read from or written to a file is\u000abytes. Other bytes-like objects are accepted as method arguments too.\u000aIn some cases (such as readinto), a writable object is required. Text\u000aI/O classes work with str data.\u000a\u000aNote that calling any method (except additional calls to close(),\u000awhich are ignored) on a closed stream should raise a ValueError.\u000a\u000aIOBase (and its subclasses) support the iterator protocol, meaning\u000athat an IOBase object can be iterated over yielding the lines in a\u000astream.\u000a\u000aIOBase also supports the :keyword:`with` statement. In this example,\u000afp is closed after the suite of the with statement is complete:\u000a\u000awith open('spam.txt', 'r') as fp:\u000a    fp.write('Spam and eggs!')\u000a
p1002
sa(dp1003
g1
V_RawIOBase
p1004
sg3
I01
sg10
L3L
sg6
(lp1005
(dp1006
g1
g97
sg3
I01
sg10
L5L
sa(dp1007
g1
g17
sg3
I01
sg10
L5L
sa(dp1008
g1
g19
sg3
I01
sg10
L5L
sa(dp1009
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p1010
sa(dp1011
g1
g24
sg3
I01
sg10
L5L
sa(dp1012
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp1013
g1
g26
sg3
I01
sg10
L5L
sa(dp1014
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp1015
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p1016
sa(dp1017
g1
g31
sg3
I01
sg10
L5L
sa(dp1018
g1
g33
sg3
I01
sg10
L5L
sa(dp1019
g1
g35
sg3
I01
sg10
L5L
sa(dp1020
g1
g37
sg3
I01
sg10
L5L
sa(dp1021
g1
g39
sg3
I01
sg10
L5L
sa(dp1022
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p1023
sa(dp1024
g1
g120
sg3
I01
sg10
L5L
sa(dp1025
g1
g44
sg3
I01
sg10
L5L
sa(dp1026
g1
g46
sg3
I01
sg10
L5L
sa(dp1027
g1
g48
sg3
I01
sg10
L5L
sa(dp1028
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p1029
sa(dp1030
g1
g127
sg3
I01
sg10
L5L
sa(dp1031
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1032
sa(dp1033
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1034
sa(dp1035
g1
g58
sg3
I01
sg10
L5L
sa(dp1036
g1
g60
sg3
I01
sg10
L5L
sa(dp1037
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1038
sa(dp1039
g1
g67
sg3
I01
sg10
L5L
sa(dp1040
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1041
sa(dp1042
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp1043
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp1044
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp1045
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp1046
g1
g148
sg3
I01
sg10
L2L
sg4
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p1047
sa(dp1048
g1
g150
sg3
I01
sg10
L5L
sa(dp1049
g1
g155
sg3
I01
sg10
L2L
sg4
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p1050
sa(dp1051
g1
g158
sg3
I01
sg10
L2L
sg4
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p1052
sa(dp1053
g1
g160
sg3
I01
sg10
L2L
sg4
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p1054
sa(dp1055
g1
g164
sg3
I01
sg10
L2L
sg4
Nsa(dp1056
g1
g168
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p1057
sa(dp1058
g1
g576
sg3
I01
sg10
L2L
sg4
VRead until EOF, using multiple read() call.
p1059
sa(dp1060
g1
g170
sg3
I01
sg10
L2L
sg4
Nsa(dp1061
g1
g174
sg3
I01
sg10
L2L
sg4
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p1062
sa(dp1063
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p1064
sa(dp1065
g1
g180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p1066
sa(dp1067
g1
g183
sg3
I01
sg10
L2L
sg4
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p1068
sa(dp1069
g1
g186
sg3
I01
sg10
L2L
sg4
VReturn current stream position.
p1070
sa(dp1071
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p1072
sa(dp1073
g1
g192
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p1074
sa(dp1075
g1
g194
sg3
I01
sg10
L2L
sg4
Nsa(dp1076
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VBase class for raw binary I/O.
p1077
sa(dp1078
g1
V_TextIOBase
p1079
sg3
I01
sg10
L3L
sg6
(lp1080
(dp1081
g1
g97
sg3
I01
sg10
L5L
sa(dp1082
g1
g17
sg3
I01
sg10
L5L
sa(dp1083
g1
g19
sg3
I01
sg10
L5L
sa(dp1084
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p1085
sa(dp1086
g1
g24
sg3
I01
sg10
L5L
sa(dp1087
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp1088
g1
g26
sg3
I01
sg10
L5L
sa(dp1089
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp1090
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p1091
sa(dp1092
g1
g31
sg3
I01
sg10
L5L
sa(dp1093
g1
g33
sg3
I01
sg10
L5L
sa(dp1094
g1
g35
sg3
I01
sg10
L5L
sa(dp1095
g1
g37
sg3
I01
sg10
L5L
sa(dp1096
g1
g39
sg3
I01
sg10
L5L
sa(dp1097
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p1098
sa(dp1099
g1
g120
sg3
I01
sg10
L5L
sa(dp1100
g1
g44
sg3
I01
sg10
L5L
sa(dp1101
g1
g46
sg3
I01
sg10
L5L
sa(dp1102
g1
g48
sg3
I01
sg10
L5L
sa(dp1103
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p1104
sa(dp1105
g1
g127
sg3
I01
sg10
L5L
sa(dp1106
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1107
sa(dp1108
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1109
sa(dp1110
g1
g58
sg3
I01
sg10
L5L
sa(dp1111
g1
g60
sg3
I01
sg10
L5L
sa(dp1112
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1113
sa(dp1114
g1
g67
sg3
I01
sg10
L5L
sa(dp1115
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1116
sa(dp1117
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp1118
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp1119
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp1120
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp1121
g1
g148
sg3
I01
sg10
L2L
sg4
VFlush and close the IO object.\u000a\u000aThis method has no effect if the file is already closed.
p1122
sa(dp1123
g1
g150
sg3
I01
sg10
L5L
sa(dp1124
g1
g152
sg3
I01
sg10
L2L
sg4
VSeparate the underlying buffer from the TextIOBase and return it.\u000a\u000aAfter the underlying buffer has been detached, the TextIO is in an\u000aunusable state.\u000a
p1125
sa(dp1126
g1
g693
sg3
I01
sg10
L5L
sa(dp1127
g1
g695
sg3
I01
sg10
L5L
sa(dp1128
g1
g155
sg3
I01
sg10
L2L
sg4
VReturns underlying file descriptor if one exists.\u000a\u000aOSError is raised if the IO object does not use a file descriptor.
p1129
sa(dp1130
g1
g158
sg3
I01
sg10
L2L
sg4
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p1131
sa(dp1132
g1
g160
sg3
I01
sg10
L2L
sg4
VReturn whether this is an 'interactive' stream.\u000a\u000aReturn False if it can't be determined.
p1133
sa(dp1134
g1
g636
sg3
I01
sg10
L5L
sa(dp1135
g1
g164
sg3
I01
sg10
L2L
sg4
VRead at most n characters from stream.\u000a\u000aRead from underlying buffer until we have n characters or we hit EOF.\u000aIf n is negative or omitted, read until EOF.\u000a
p1136
sa(dp1137
g1
g168
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for reading.\u000a\u000aIf False, read() will raise OSError.
p1138
sa(dp1139
g1
g174
sg3
I01
sg10
L2L
sg4
VRead until newline or EOF.\u000a\u000aReturns an empty string if EOF is hit immediately.\u000a
p1140
sa(dp1141
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p1142
sa(dp1143
g1
g180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p1144
sa(dp1145
g1
g183
sg3
I01
sg10
L2L
sg4
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p1146
sa(dp1147
g1
g186
sg3
I01
sg10
L2L
sg4
VReturn current stream position.
p1148
sa(dp1149
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p1150
sa(dp1151
g1
g192
sg3
I01
sg10
L2L
sg4
VReturn whether object was opened for writing.\u000a\u000aIf False, write() will raise OSError.
p1152
sa(dp1153
g1
g194
sg3
I01
sg10
L2L
sg4
VWrite string to stream.\u000aReturns the number of characters written (which is always equal to\u000athe length of the string).\u000a
p1154
sa(dp1155
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VBase class for text I/O.\u000a\u000aThis class provides a character and line based interface to stream\u000aI/O. There is no readinto method because Python's character strings\u000aare immutable. There is no public constructor.\u000a
p1156
sa(dp1157
g1
V_WindowsConsoleIO
p1158
sg3
I01
sg10
L3L
sg6
(lp1159
(dp1160
g1
g97
sg3
I01
sg10
L5L
sa(dp1161
g1
g17
sg3
I01
sg10
L5L
sa(dp1162
g1
g19
sg3
I01
sg10
L5L
sa(dp1163
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p1164
sa(dp1165
g1
g24
sg3
I01
sg10
L5L
sa(dp1166
g1
g104
sg3
I01
sg10
L2L
sg4
Nsa(dp1167
g1
g26
sg3
I01
sg10
L5L
sa(dp1168
g1
g107
sg3
I01
sg10
L2L
sg4
Nsa(dp1169
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p1170
sa(dp1171
g1
g31
sg3
I01
sg10
L5L
sa(dp1172
g1
g33
sg3
I01
sg10
L5L
sa(dp1173
g1
g113
sg3
I01
sg10
L2L
sg4
Nsa(dp1174
g1
g35
sg3
I01
sg10
L5L
sa(dp1175
g1
g37
sg3
I01
sg10
L5L
sa(dp1176
g1
g39
sg3
I01
sg10
L5L
sa(dp1177
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p1178
sa(dp1179
g1
g120
sg3
I01
sg10
L5L
sa(dp1180
g1
g44
sg3
I01
sg10
L5L
sa(dp1181
g1
g46
sg3
I01
sg10
L5L
sa(dp1182
g1
g48
sg3
I01
sg10
L5L
sa(dp1183
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p1184
sa(dp1185
g1
g127
sg3
I01
sg10
L5L
sa(dp1186
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1187
sa(dp1188
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1189
sa(dp1190
g1
g58
sg3
I01
sg10
L5L
sa(dp1191
g1
g60
sg3
I01
sg10
L5L
sa(dp1192
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1193
sa(dp1194
g1
g67
sg3
I01
sg10
L5L
sa(dp1195
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1196
sa(dp1197
g1
g552
sg3
I01
sg10
L5L
sa(dp1198
g1
g140
sg3
I01
sg10
L2L
sg4
Nsa(dp1199
g1
g142
sg3
I01
sg10
L2L
sg4
Nsa(dp1200
g1
g144
sg3
I01
sg10
L2L
sg4
Nsa(dp1201
g1
g146
sg3
I01
sg10
L2L
sg4
Nsa(dp1202
g1
g244
sg3
I01
sg10
L5L
sa(dp1203
g1
g148
sg3
I01
sg10
L2L
sg4
VClose the handle.\u000a\u000aA closed handle cannot be used for further I/O operations.  close() may be\u000acalled more than once without error.
p1204
sa(dp1205
g1
g150
sg3
I01
sg10
L5L
sa(dp1206
g1
g563
sg3
I01
sg10
L5L
sa(dp1207
g1
g155
sg3
I01
sg10
L2L
sg4
VReturn the underlying file descriptor (an integer).\u000a\u000afileno is only set when a file descriptor is used to open\u000aone of the standard streams.
p1208
sa(dp1209
g1
g158
sg3
I01
sg10
L2L
sg4
VFlush write buffers, if applicable.\u000a\u000aThis is not implemented for read-only and non-blocking streams.
p1210
sa(dp1211
g1
g160
sg3
I01
sg10
L2L
sg4
VAlways True.
p1212
sa(dp1213
g1
g252
sg3
I01
sg10
L5L
sa(dp1214
g1
g164
sg3
I01
sg10
L2L
sg4
VRead at most size bytes, returned as bytes.\u000a\u000aOnly makes one system call when size is a positive integer,\u000aso less data may be returned than requested.\u000aReturn an empty bytes object at EOF.
p1215
sa(dp1216
g1
g168
sg3
I01
sg10
L2L
sg4
VTrue if console is an input buffer.
p1217
sa(dp1218
g1
g576
sg3
I01
sg10
L2L
sg4
VRead all data from the console, returned as bytes.\u000a\u000aReturn an empty bytes object at EOF.
p1219
sa(dp1220
g1
g170
sg3
I01
sg10
L2L
sg4
VSame as RawIOBase.readinto().
p1221
sa(dp1222
g1
g174
sg3
I01
sg10
L2L
sg4
VRead and return a line from the stream.\u000a\u000aIf size is specified, at most size bytes will be read.\u000a\u000aThe line terminator is always b'\u005cn' for binary files; for text\u000afiles, the newlines argument to open can be used to select the line\u000aterminator(s) recognized.
p1223
sa(dp1224
g1
g177
sg3
I01
sg10
L2L
sg4
VReturn a list of lines from the stream.\u000a\u000ahint can be specified to control the number of lines read: no more\u000alines will be read if the total size (in bytes/characters) of all\u000alines so far exceeds hint.
p1225
sa(dp1226
g1
g180
sg3
I01
sg10
L2L
sg4
VChange stream position.\u000a\u000aChange the stream position to the given byte offset. The offset is\u000ainterpreted relative to the position indicated by whence.  Values\u000afor whence are:\u000a\u000a* 0 -- start of stream (the default); offset should be zero or positive\u000a* 1 -- current stream position; offset may be negative\u000a* 2 -- end of stream; offset is usually negative\u000a\u000aReturn the new absolute position.
p1227
sa(dp1228
g1
g183
sg3
I01
sg10
L2L
sg4
VReturn whether object supports random access.\u000a\u000aIf False, seek(), tell() and truncate() will raise OSError.\u000aThis method may need to do a test seek().
p1229
sa(dp1230
g1
g186
sg3
I01
sg10
L2L
sg4
VReturn current stream position.
p1231
sa(dp1232
g1
g189
sg3
I01
sg10
L2L
sg4
VTruncate file to size bytes.\u000a\u000aFile pointer is left unchanged.  Size defaults to the current IO\u000aposition as reported by tell().  Returns the new size.
p1233
sa(dp1234
g1
g192
sg3
I01
sg10
L2L
sg4
VTrue if console is an output buffer.
p1235
sa(dp1236
g1
g194
sg3
I01
sg10
L2L
sg4
VWrite buffer b to file, return number of bytes written.\u000a\u000aOnly makes one system call, so not all of the data may be written.\u000aThe number of bytes actually written is returned.
p1237
sa(dp1238
g1
g196
sg3
I01
sg10
L2L
sg4
Nsasg4
VOpen a console buffer by file descriptor.\u000a\u000aThe mode can be 'rb' (default), or 'wb' for reading or writing bytes. All\u000aother mode characters will be ignored. Mode 'b' will be assumed if it is\u000aomitted. The *opener* parameter is always ignored.
p1239
sa(dp1240
g1
g24
sg3
I01
sg10
L5L
sa(dp1241
g1
V__loader__
p1242
sg3
I01
sg10
L3L
sg6
(lp1243
(dp1244
g1
g17
sg3
I01
sg10
L5L
sa(dp1245
g1
g19
sg3
I01
sg10
L5L
sa(dp1246
g1
g21
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p1247
sa(dp1248
g1
g24
sg3
I01
sg10
L5L
sa(dp1249
g1
g26
sg3
I01
sg10
L5L
sa(dp1250
g1
g28
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p1251
sa(dp1252
g1
g31
sg3
I01
sg10
L5L
sa(dp1253
g1
g33
sg3
I01
sg10
L5L
sa(dp1254
g1
g35
sg3
I01
sg10
L5L
sa(dp1255
g1
g37
sg3
I01
sg10
L5L
sa(dp1256
g1
g39
sg3
I01
sg10
L5L
sa(dp1257
g1
g41
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p1258
sa(dp1259
g1
g44
sg3
I01
sg10
L5L
sa(dp1260
g1
g46
sg3
I01
sg10
L5L
sa(dp1261
g1
g825
sg3
I01
sg10
L5L
sa(dp1262
g1
g48
sg3
I01
sg10
L5L
sa(dp1263
g1
g50
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p1264
sa(dp1265
g1
g53
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1266
sa(dp1267
g1
g55
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p1268
sa(dp1269
g1
g58
sg3
I01
sg10
L5L
sa(dp1270
g1
g60
sg3
I01
sg10
L5L
sa(dp1271
g1
g64
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1272
sa(dp1273
g1
g67
sg3
I01
sg10
L5L
sa(dp1274
g1
g69
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1275
sa(dp1276
g1
g843
sg3
I01
sg10
L5L
sa(dp1277
g1
Vcreate_module
p1278
sg3
I01
sg10
L5L
sa(dp1279
g1
Vexec_module
p1280
sg3
I01
sg10
L5L
sa(dp1281
g1
Vfind_module
p1282
sg3
I01
sg10
L5L
sa(dp1283
g1
Vfind_spec
p1284
sg3
I01
sg10
L5L
sa(dp1285
g1
Vget_code
p1286
sg3
I01
sg10
L5L
sa(dp1287
g1
Vget_source
p1288
sg3
I01
sg10
L5L
sa(dp1289
g1
Vis_package
p1290
sg3
I01
sg10
L5L
sa(dp1291
g1
Vload_module
p1292
sg3
I01
sg10
L5L
sa(dp1293
g1
Vmodule_repr
p1294
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p1295
sa(dp1296
g1
V__name__
p1297
sg3
I01
sg10
L5L
sa(dp1298
g1
V__package__
p1299
sg3
I01
sg10
L5L
sa(dp1300
g1
V__spec__
p1301
sg3
I01
sg10
L5L
sa(dp1302
g1
Vopen
p1303
sg3
I01
sg10
L2L
sg4
VOpen file and return a stream.  Raise IOError upon failure.\u000a\u000afile is either a text or byte string giving the name (and the path\u000aif the file isn't in the current working directory) of the file to\u000abe opened or an integer file descriptor of the file to be\u000awrapped. (If a file descriptor is given, it is closed when the\u000areturned I/O object is closed, unless closefd is set to False.)\u000a\u000amode is an optional string that specifies the mode in which the file\u000ais opened. It defaults to 'r' which means open for reading in text\u000amode.  Other common values are 'w' for writing (truncating the file if\u000ait already exists), 'x' for creating and writing to a new file, and\u000a'a' for appending (which on some Unix systems, means that all writes\u000aappend to the end of the file regardless of the current seek position).\u000aIn text mode, if encoding is not specified the encoding used is platform\u000adependent: locale.getpreferredencoding(False) is called to get the\u000acurrent locale encoding. (For reading and writing raw bytes use binary\u000amode and leave encoding unspecified.) The available modes are:\u000a\u000a========= ===============================================================\u000aCharacter Meaning\u000a--------- ---------------------------------------------------------------\u000a'r'       open for reading (default)\u000a'w'       open for writing, truncating the file first\u000a'x'       create a new file and open it for writing\u000a'a'       open for writing, appending to the end of the file if it exists\u000a'b'       binary mode\u000a't'       text mode (default)\u000a'+'       open a disk file for updating (reading and writing)\u000a'U'       universal newline mode (deprecated)\u000a========= ===============================================================\u000a\u000aThe default mode is 'rt' (open for reading text). For binary random\u000aaccess, the mode 'w+b' opens and truncates the file to 0 bytes, while\u000a'r+b' opens the file without truncation. The 'x' mode implies 'w' and\u000araises an `FileExistsError` if the file already exists.\u000a\u000aPython distinguishes between files opened in binary and text modes,\u000aeven when the underlying operating system doesn't. Files opened in\u000abinary mode (appending 'b' to the mode argument) return contents as\u000abytes objects without any decoding. In text mode (the default, or when\u000a't' is appended to the mode argument), the contents of the file are\u000areturned as strings, the bytes having been first decoded using a\u000aplatform-dependent encoding or using the specified encoding if given.\u000a\u000a'U' mode is deprecated and will raise an exception in future versions\u000aof Python.  It has no effect in Python 3.  Use newline to control\u000auniversal newlines mode.\u000a\u000abuffering is an optional integer used to set the buffering policy.\u000aPass 0 to switch buffering off (only allowed in binary mode), 1 to select\u000aline buffering (only usable in text mode), and an integer > 1 to indicate\u000athe size of a fixed-size chunk buffer.  When no buffering argument is\u000agiven, the default buffering policy works as follows:\u000a\u000a* Binary files are buffered in fixed-size chunks; the size of the buffer\u000a  is chosen using a heuristic trying to determine the underlying device's\u000a  "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\u000a  On many systems, the buffer will typically be 4096 or 8192 bytes long.\u000a\u000a* "Interactive" text files (files for which isatty() returns True)\u000a  use line buffering.  Other text files use the policy described above\u000a  for binary files.\u000a\u000aencoding is the name of the encoding used to decode or encode the\u000afile. This should only be used in text mode. The default encoding is\u000aplatform dependent, but any encoding supported by Python can be\u000apassed.  See the codecs module for the list of supported encodings.\u000a\u000aerrors is an optional string that specifies how encoding errors are to\u000abe handled---this argument should not be used in binary mode. Pass\u000a'strict' to raise a ValueError exception if there is an encoding error\u000a(the default of None has the same effect), or pass 'ignore' to ignore\u000aerrors. (Note that ignoring encoding errors can lead to data loss.)\u000aSee the documentation for codecs.register or run 'help(codecs.Codec)'\u000afor a list of the permitted encoding error strings.\u000a\u000anewline controls how universal newlines works (it only applies to text\u000amode). It can be None, '', '\u005cn', '\u005cr', and '\u005cr\u005cn'.  It works as\u000afollows:\u000a\u000a* On input, if newline is None, universal newlines mode is\u000a  enabled. Lines in the input can end in '\u005cn', '\u005cr', or '\u005cr\u005cn', and\u000a  these are translated into '\u005cn' before being returned to the\u000a  caller. If it is '', universal newline mode is enabled, but line\u000a  endings are returned to the caller untranslated. If it has any of\u000a  the other legal values, input lines are only terminated by the given\u000a  string, and the line ending is returned to the caller untranslated.\u000a\u000a* On output, if newline is None, any '\u005cn' characters written are\u000a  translated to the system default line separator, os.linesep. If\u000a  newline is '' or '\u005cn', no translation takes place. If newline is any\u000a  of the other legal values, any '\u005cn' characters written are translated\u000a  to the given string.\u000a\u000aIf closefd is False, the underlying file descriptor will be kept open\u000awhen the file is closed. This does not work when a file name is given\u000aand must be True in that case.\u000a\u000aA custom opener can be used by passing a callable as *opener*. The\u000aunderlying file descriptor for the file object is then obtained by\u000acalling *opener* with (*file*, *flags*). *opener* must return an open\u000afile descriptor (passing os.open as *opener* results in functionality\u000asimilar to passing None).\u000a\u000aopen() returns a file object whose type depends on the mode, and\u000athrough which the standard file operations such as reading and writing\u000aare performed. When open() is used to open a file in a text mode ('w',\u000a'r', 'wt', 'rt', etc.), it returns a TextIOWrapper. When used to open\u000aa file in a binary mode, the returned class varies: in read binary\u000amode, it returns a BufferedReader; in write binary and append binary\u000amodes, it returns a BufferedWriter, and in read/write mode, it returns\u000aa BufferedRandom.\u000a\u000aIt is also possible to use a string or bytearray as a file for both\u000areading and writing. For strings StringIO can be used like a file\u000aopened in a text mode, and for bytes a BytesIO can be used like a file\u000aopened in a binary mode.
p1304
sasg10
L1L
s.