(dp0
Vname
p1
V_csv
p2
sVis_builtin
p3
I01
sVdoc
p4
VCSV parsing and writing.\u000a\u000aThis module provides classes that assist in the reading and writing\u000aof Comma Separated Value (CSV) files, and implements the interface\u000adescribed by PEP 305.  Although many CSV files are simple to parse,\u000athe format is not formally defined by a stable specification and\u000ais subtle enough that parsing lines of a CSV file with something\u000alike line.split(",") is bound to fail.  The module supports three\u000abasic APIs: reading, writing, and registration of dialects.\u000a\u000a\u000aDIALECT REGISTRATION:\u000a\u000aReaders and writers support a dialect argument, which is a convenient\u000ahandle on a group of settings.  When the dialect argument is a string,\u000ait identifies one of the dialects previously registered with the module.\u000aIf it is a class or instance, the attributes of the argument are used as\u000athe settings for the reader or writer:\u000a\u000a    class excel:\u000a        delimiter = ','\u000a        quotechar = '"'\u000a        escapechar = None\u000a        doublequote = True\u000a        skipinitialspace = False\u000a        lineterminator = '\u005cr\u005cn'\u000a        quoting = QUOTE_MINIMAL\u000a\u000aSETTINGS:\u000a\u000a    * quotechar - specifies a one-character string to use as the \u000a        quoting character.  It defaults to '"'.\u000a    * delimiter - specifies a one-character string to use as the \u000a        field separator.  It defaults to ','.\u000a    * skipinitialspace - specifies how to interpret whitespace which\u000a        immediately follows a delimiter.  It defaults to False, which\u000a        means that whitespace immediately following a delimiter is part\u000a        of the following field.\u000a    * lineterminator -  specifies the character sequence which should \u000a        terminate rows.\u000a    * quoting - controls when quotes should be generated by the writer.\u000a        It can take on any of the following module constants:\u000a\u000a        csv.QUOTE_MINIMAL means only when required, for example, when a\u000a            field contains either the quotechar or the delimiter\u000a        csv.QUOTE_ALL means that quotes are always placed around fields.\u000a        csv.QUOTE_NONNUMERIC means that quotes are always placed around\u000a            fields which do not parse as integers or floating point\u000a            numbers.\u000a        csv.QUOTE_NONE means that quotes are never placed around fields.\u000a    * escapechar - specifies a one-character string used to escape \u000a        the delimiter when quoting is set to QUOTE_NONE.\u000a    * doublequote - controls the handling of quotes inside fields.  When\u000a        True, two consecutive quotes are interpreted as one during read,\u000a        and when writing, each quote character embedded in the data is\u000a        written as two quotes\u000a
p5
sVchilds
p6
(lp7
(dp8
g1
VDialect
p9
sg3
I01
sVtype
p10
L3L
sg6
(lp11
(dp12
g1
V__delattr__
p13
sg3
I01
sg10
L5L
sa(dp14
g1
V__dir__
p15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p16
sa(dp17
g1
V__doc__
p18
sg3
I01
sg10
L5L
sa(dp19
g1
V__eq__
p20
sg3
I01
sg10
L5L
sa(dp21
g1
V__format__
p22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p23
sa(dp24
g1
V__ge__
p25
sg3
I01
sg10
L5L
sa(dp26
g1
V__getattribute__
p27
sg3
I01
sg10
L5L
sa(dp28
g1
V__gt__
p29
sg3
I01
sg10
L5L
sa(dp30
g1
V__hash__
p31
sg3
I01
sg10
L5L
sa(dp32
g1
V__init__
p33
sg3
I01
sg10
L5L
sa(dp34
g1
V__init_subclass__
p35
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p36
sa(dp37
g1
V__le__
p38
sg3
I01
sg10
L5L
sa(dp39
g1
V__lt__
p40
sg3
I01
sg10
L5L
sa(dp41
g1
V__ne__
p42
sg3
I01
sg10
L5L
sa(dp43
g1
V__new__
p44
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p45
sa(dp46
g1
V__reduce__
p47
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p48
sa(dp49
g1
V__reduce_ex__
p50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p51
sa(dp52
g1
V__repr__
p53
sg3
I01
sg10
L5L
sa(dp54
g1
V__setattr__
p55
sg3
I01
sg10
L5L
sa(dp56
g1
V__sizeof__
p57
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p58
sa(dp59
g1
V__str__
p60
sg3
I01
sg10
L5L
sa(dp61
g1
V__subclasshook__
p62
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p63
sa(dp64
g1
Vdelimiter
p65
sg3
I01
sg10
L5L
sa(dp66
g1
Vdoublequote
p67
sg3
I01
sg10
L5L
sa(dp68
g1
Vescapechar
p69
sg3
I01
sg10
L5L
sa(dp70
g1
Vlineterminator
p71
sg3
I01
sg10
L5L
sa(dp72
g1
Vquotechar
p73
sg3
I01
sg10
L5L
sa(dp74
g1
Vquoting
p75
sg3
I01
sg10
L5L
sa(dp76
g1
Vskipinitialspace
p77
sg3
I01
sg10
L5L
sa(dp78
g1
Vstrict
p79
sg3
I01
sg10
L5L
sasg4
VCSV dialect\u000a\u000aThe Dialect type records CSV parsing and generation options.\u000a
p80
sa(dp81
g1
VError
p82
sg3
I01
sg10
L3L
sg6
(lp83
(dp84
g1
V__cause__
p85
sg3
I01
sg10
L5L
sa(dp86
g1
V__context__
p87
sg3
I01
sg10
L5L
sa(dp88
g1
g13
sg3
I01
sg10
L5L
sa(dp89
g1
V__dict__
p90
sg3
I01
sg10
L5L
sa(dp91
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p92
sa(dp93
g1
g18
sg3
I01
sg10
L5L
sa(dp94
g1
g20
sg3
I01
sg10
L5L
sa(dp95
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p96
sa(dp97
g1
g25
sg3
I01
sg10
L5L
sa(dp98
g1
g27
sg3
I01
sg10
L5L
sa(dp99
g1
g29
sg3
I01
sg10
L5L
sa(dp100
g1
g31
sg3
I01
sg10
L5L
sa(dp101
g1
g33
sg3
I01
sg10
L5L
sa(dp102
g1
g35
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p103
sa(dp104
g1
g38
sg3
I01
sg10
L5L
sa(dp105
g1
g40
sg3
I01
sg10
L5L
sa(dp106
g1
V__module__
p107
sg3
I01
sg10
L5L
sa(dp108
g1
g42
sg3
I01
sg10
L5L
sa(dp109
g1
g44
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p110
sa(dp111
g1
g47
sg3
I01
sg10
L2L
sg4
Nsa(dp112
g1
g50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p113
sa(dp114
g1
g53
sg3
I01
sg10
L5L
sa(dp115
g1
g55
sg3
I01
sg10
L5L
sa(dp116
g1
V__setstate__
p117
sg3
I01
sg10
L2L
sg4
Nsa(dp118
g1
g57
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p119
sa(dp120
g1
g60
sg3
I01
sg10
L5L
sa(dp121
g1
g62
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p122
sa(dp123
g1
V__suppress_context__
p124
sg3
I01
sg10
L5L
sa(dp125
g1
V__traceback__
p126
sg3
I01
sg10
L5L
sa(dp127
g1
V__weakref__
p128
sg3
I01
sg10
L5L
sa(dp129
g1
Vargs
p130
sg3
I01
sg10
L5L
sa(dp131
g1
Vwith_traceback
p132
sg3
I01
sg10
L2L
sg4
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p133
sasg4
Nsa(dp134
g1
VQUOTE_ALL
p135
sg3
I01
sg10
L5L
sa(dp136
g1
VQUOTE_MINIMAL
p137
sg3
I01
sg10
L5L
sa(dp138
g1
VQUOTE_NONE
p139
sg3
I01
sg10
L5L
sa(dp140
g1
VQUOTE_NONNUMERIC
p141
sg3
I01
sg10
L5L
sa(dp142
g1
g18
sg3
I01
sg10
L5L
sa(dp143
g1
V__loader__
p144
sg3
I01
sg10
L3L
sg6
(lp145
(dp146
g1
g13
sg3
I01
sg10
L5L
sa(dp147
g1
g90
sg3
I01
sg10
L5L
sa(dp148
g1
g15
sg3
I01
sg10
L2L
sg4
V__dir__() -> list\u000adefault dir() implementation
p149
sa(dp150
g1
g18
sg3
I01
sg10
L5L
sa(dp151
g1
g20
sg3
I01
sg10
L5L
sa(dp152
g1
g22
sg3
I01
sg10
L2L
sg4
Vdefault object formatter
p153
sa(dp154
g1
g25
sg3
I01
sg10
L5L
sa(dp155
g1
g27
sg3
I01
sg10
L5L
sa(dp156
g1
g29
sg3
I01
sg10
L5L
sa(dp157
g1
g31
sg3
I01
sg10
L5L
sa(dp158
g1
g33
sg3
I01
sg10
L5L
sa(dp159
g1
g35
sg3
I01
sg10
L2L
sg4
VThis method is called when a class is subclassed.\u000a\u000aThe default implementation does nothing. It may be\u000aoverridden to extend subclasses.\u000a
p160
sa(dp161
g1
g38
sg3
I01
sg10
L5L
sa(dp162
g1
g40
sg3
I01
sg10
L5L
sa(dp163
g1
g107
sg3
I01
sg10
L5L
sa(dp164
g1
g42
sg3
I01
sg10
L5L
sa(dp165
g1
g44
sg3
I01
sg10
L2L
sg4
VCreate and return a new object.  See help(type) for accurate signature.
p166
sa(dp167
g1
g47
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p168
sa(dp169
g1
g50
sg3
I01
sg10
L2L
sg4
Vhelper for pickle
p170
sa(dp171
g1
g53
sg3
I01
sg10
L5L
sa(dp172
g1
g55
sg3
I01
sg10
L5L
sa(dp173
g1
g57
sg3
I01
sg10
L2L
sg4
V__sizeof__() -> int\u000asize of object in memory, in bytes
p174
sa(dp175
g1
g60
sg3
I01
sg10
L5L
sa(dp176
g1
g62
sg3
I01
sg10
L2L
sg4
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p177
sa(dp178
g1
g128
sg3
I01
sg10
L5L
sa(dp179
g1
Vcreate_module
p180
sg3
I01
sg10
L5L
sa(dp181
g1
Vexec_module
p182
sg3
I01
sg10
L5L
sa(dp183
g1
Vfind_module
p184
sg3
I01
sg10
L5L
sa(dp185
g1
Vfind_spec
p186
sg3
I01
sg10
L5L
sa(dp187
g1
Vget_code
p188
sg3
I01
sg10
L5L
sa(dp189
g1
Vget_source
p190
sg3
I01
sg10
L5L
sa(dp191
g1
Vis_package
p192
sg3
I01
sg10
L5L
sa(dp193
g1
Vload_module
p194
sg3
I01
sg10
L5L
sa(dp195
g1
Vmodule_repr
p196
sg3
I01
sg10
L5L
sasg4
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p197
sa(dp198
g1
V__name__
p199
sg3
I01
sg10
L5L
sa(dp200
g1
V__package__
p201
sg3
I01
sg10
L5L
sa(dp202
g1
V__spec__
p203
sg3
I01
sg10
L5L
sa(dp204
g1
V__version__
p205
sg3
I01
sg10
L5L
sa(dp206
g1
V_dialects
p207
sg3
I01
sg10
L5L
sa(dp208
g1
Vfield_size_limit
p209
sg3
I01
sg10
L2L
sg4
VSets an upper limit on parsed fields.\u000a    csv.field_size_limit([limit])\u000a\u000aReturns old limit. If limit is not given, no new limit is set and\u000athe old limit is returned
p210
sa(dp211
g1
Vget_dialect
p212
sg3
I01
sg10
L2L
sg4
VReturn the dialect instance associated with name.\u000a    dialect = csv.get_dialect(name)
p213
sa(dp214
g1
Vlist_dialects
p215
sg3
I01
sg10
L2L
sg4
VReturn a list of all know dialect names.\u000a    names = csv.list_dialects()
p216
sa(dp217
g1
Vreader
p218
sg3
I01
sg10
L2L
sg4
V    csv_reader = reader(iterable [, dialect='excel']\u000a                        [optional keyword args])\u000a    for row in csv_reader:\u000a        process(row)\u000a\u000aThe "iterable" argument can be any object that returns a line\u000aof input for each iteration, such as a file object or a list.  The\u000aoptional "dialect" parameter is discussed below.  The function\u000aalso accepts optional keyword arguments which override settings\u000aprovided by the dialect.\u000a\u000aThe returned object is an iterator.  Each iteration returns a row\u000aof the CSV file (which can span multiple input lines).\u000a
p219
sa(dp220
g1
Vregister_dialect
p221
sg3
I01
sg10
L2L
sg4
VCreate a mapping from a string name to a dialect class.\u000a    dialect = csv.register_dialect(name[, dialect[, **fmtparams]])
p222
sa(dp223
g1
Vunregister_dialect
p224
sg3
I01
sg10
L2L
sg4
VDelete the name/dialect mapping associated with a string name.\u000a    csv.unregister_dialect(name)
p225
sa(dp226
g1
Vwriter
p227
sg3
I01
sg10
L2L
sg4
V    csv_writer = csv.writer(fileobj [, dialect='excel']\u000a                            [optional keyword args])\u000a    for row in sequence:\u000a        csv_writer.writerow(row)\u000a\u000a    [or]\u000a\u000a    csv_writer = csv.writer(fileobj [, dialect='excel']\u000a                            [optional keyword args])\u000a    csv_writer.writerows(rows)\u000a\u000aThe "fileobj" argument can be any object that supports the file API.\u000a
p228
sasg10
L1L
s.