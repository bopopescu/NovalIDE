(dp0
Vchilds
p1
(lp2
(dp3
Vis_builtin
p4
I01
sVname
p5
VAF_APPLETALK
p6
sVtype
p7
L5L
sa(dp8
g4
I01
sg5
VAF_ASH
p9
sg7
L5L
sa(dp10
g4
I01
sg5
VAF_ATMPVC
p11
sg7
L5L
sa(dp12
g4
I01
sg5
VAF_ATMSVC
p13
sg7
L5L
sa(dp14
g4
I01
sg5
VAF_AX25
p15
sg7
L5L
sa(dp16
g4
I01
sg5
VAF_BLUETOOTH
p17
sg7
L5L
sa(dp18
g4
I01
sg5
VAF_BRIDGE
p19
sg7
L5L
sa(dp20
g4
I01
sg5
VAF_CAN
p21
sg7
L5L
sa(dp22
g4
I01
sg5
VAF_DECnet
p23
sg7
L5L
sa(dp24
g4
I01
sg5
VAF_ECONET
p25
sg7
L5L
sa(dp26
g4
I01
sg5
VAF_INET
p27
sg7
L5L
sa(dp28
g4
I01
sg5
VAF_INET6
p29
sg7
L5L
sa(dp30
g4
I01
sg5
VAF_IPX
p31
sg7
L5L
sa(dp32
g4
I01
sg5
VAF_IRDA
p33
sg7
L5L
sa(dp34
g4
I01
sg5
VAF_KEY
p35
sg7
L5L
sa(dp36
g4
I01
sg5
VAF_LLC
p37
sg7
L5L
sa(dp38
g4
I01
sg5
VAF_NETBEUI
p39
sg7
L5L
sa(dp40
g4
I01
sg5
VAF_NETLINK
p41
sg7
L5L
sa(dp42
g4
I01
sg5
VAF_NETROM
p43
sg7
L5L
sa(dp44
g4
I01
sg5
VAF_PACKET
p45
sg7
L5L
sa(dp46
g4
I01
sg5
VAF_PPPOX
p47
sg7
L5L
sa(dp48
g4
I01
sg5
VAF_RDS
p49
sg7
L5L
sa(dp50
g4
I01
sg5
VAF_ROSE
p51
sg7
L5L
sa(dp52
g4
I01
sg5
VAF_ROUTE
p53
sg7
L5L
sa(dp54
g4
I01
sg5
VAF_SECURITY
p55
sg7
L5L
sa(dp56
g4
I01
sg5
VAF_SNA
p57
sg7
L5L
sa(dp58
g4
I01
sg5
VAF_TIPC
p59
sg7
L5L
sa(dp60
g4
I01
sg5
VAF_UNIX
p61
sg7
L5L
sa(dp62
g4
I01
sg5
VAF_UNSPEC
p63
sg7
L5L
sa(dp64
g4
I01
sg5
VAF_WANPIPE
p65
sg7
L5L
sa(dp66
g4
I01
sg5
VAF_X25
p67
sg7
L5L
sa(dp68
g4
I01
sg5
VAI_ADDRCONFIG
p69
sg7
L5L
sa(dp70
g4
I01
sg5
VAI_ALL
p71
sg7
L5L
sa(dp72
g4
I01
sg5
VAI_CANONNAME
p73
sg7
L5L
sa(dp74
g4
I01
sg5
VAI_NUMERICHOST
p75
sg7
L5L
sa(dp76
g4
I01
sg5
VAI_NUMERICSERV
p77
sg7
L5L
sa(dp78
g4
I01
sg5
VAI_PASSIVE
p79
sg7
L5L
sa(dp80
g4
I01
sg5
VAI_V4MAPPED
p81
sg7
L5L
sa(dp82
g4
I01
sg5
VBDADDR_ANY
p83
sg7
L5L
sa(dp84
g4
I01
sg5
VBDADDR_LOCAL
p85
sg7
L5L
sa(dp86
g4
I01
sg5
VBTPROTO_HCI
p87
sg7
L5L
sa(dp88
g4
I01
sg5
VBTPROTO_L2CAP
p89
sg7
L5L
sa(dp90
g4
I01
sg5
VBTPROTO_RFCOMM
p91
sg7
L5L
sa(dp92
g4
I01
sg5
VBTPROTO_SCO
p93
sg7
L5L
sa(dp94
g4
I01
sg5
VCAN_BCM
p95
sg7
L5L
sa(dp96
g4
I01
sg5
VCAN_BCM_RX_CHANGED
p97
sg7
L5L
sa(dp98
g4
I01
sg5
VCAN_BCM_RX_DELETE
p99
sg7
L5L
sa(dp100
g4
I01
sg5
VCAN_BCM_RX_READ
p101
sg7
L5L
sa(dp102
g4
I01
sg5
VCAN_BCM_RX_SETUP
p103
sg7
L5L
sa(dp104
g4
I01
sg5
VCAN_BCM_RX_STATUS
p105
sg7
L5L
sa(dp106
g4
I01
sg5
VCAN_BCM_RX_TIMEOUT
p107
sg7
L5L
sa(dp108
g4
I01
sg5
VCAN_BCM_TX_DELETE
p109
sg7
L5L
sa(dp110
g4
I01
sg5
VCAN_BCM_TX_EXPIRED
p111
sg7
L5L
sa(dp112
g4
I01
sg5
VCAN_BCM_TX_READ
p113
sg7
L5L
sa(dp114
g4
I01
sg5
VCAN_BCM_TX_SEND
p115
sg7
L5L
sa(dp116
g4
I01
sg5
VCAN_BCM_TX_SETUP
p117
sg7
L5L
sa(dp118
g4
I01
sg5
VCAN_BCM_TX_STATUS
p119
sg7
L5L
sa(dp120
g4
I01
sg5
VCAN_EFF_FLAG
p121
sg7
L5L
sa(dp122
g4
I01
sg5
VCAN_EFF_MASK
p123
sg7
L5L
sa(dp124
g4
I01
sg5
VCAN_ERR_FLAG
p125
sg7
L5L
sa(dp126
g4
I01
sg5
VCAN_ERR_MASK
p127
sg7
L5L
sa(dp128
g4
I01
sg5
VCAN_RAW
p129
sg7
L5L
sa(dp130
g4
I01
sg5
VCAN_RAW_ERR_FILTER
p131
sg7
L5L
sa(dp132
g4
I01
sg5
VCAN_RAW_FD_FRAMES
p133
sg7
L5L
sa(dp134
g4
I01
sg5
VCAN_RAW_FILTER
p135
sg7
L5L
sa(dp136
g4
I01
sg5
VCAN_RAW_LOOPBACK
p137
sg7
L5L
sa(dp138
g4
I01
sg5
VCAN_RAW_RECV_OWN_MSGS
p139
sg7
L5L
sa(dp140
g4
I01
sg5
VCAN_RTR_FLAG
p141
sg7
L5L
sa(dp142
g4
I01
sg5
VCAN_SFF_MASK
p143
sg7
L5L
sa(dp144
g4
I01
sg5
VCAPI
p145
sg7
L5L
sa(dp146
g4
I01
sg5
VCMSG_LEN
p147
sg7
L2L
sVdoc
p148
VCMSG_LEN(length) -> control message length\u000a\u000aReturn the total length, without trailing padding, of an ancillary\u000adata item with associated data of the given length.  This value can\u000aoften be used as the buffer size for recvmsg() to receive a single\u000aitem of ancillary data, but RFC 3542 requires portable applications to\u000ause CMSG_SPACE() and thus include space for padding, even when the\u000aitem will be the last in the buffer.  Raises OverflowError if length\u000ais outside the permissible range of values.
p149
sa(dp150
g4
I01
sg5
VCMSG_SPACE
p151
sg7
L2L
sg148
VCMSG_SPACE(length) -> buffer size\u000a\u000aReturn the buffer size needed for recvmsg() to receive an ancillary\u000adata item with associated data of the given length, along with any\u000atrailing padding.  The buffer space needed to receive multiple items\u000ais the sum of the CMSG_SPACE() values for their associated data\u000alengths.  Raises OverflowError if length is outside the permissible\u000arange of values.
p152
sa(dp153
g4
I01
sg5
VEAI_ADDRFAMILY
p154
sg7
L5L
sa(dp155
g4
I01
sg5
VEAI_AGAIN
p156
sg7
L5L
sa(dp157
g4
I01
sg5
VEAI_BADFLAGS
p158
sg7
L5L
sa(dp159
g4
I01
sg5
VEAI_FAIL
p160
sg7
L5L
sa(dp161
g4
I01
sg5
VEAI_FAMILY
p162
sg7
L5L
sa(dp163
g4
I01
sg5
VEAI_MEMORY
p164
sg7
L5L
sa(dp165
g4
I01
sg5
VEAI_NODATA
p166
sg7
L5L
sa(dp167
g4
I01
sg5
VEAI_NONAME
p168
sg7
L5L
sa(dp169
g4
I01
sg5
VEAI_OVERFLOW
p170
sg7
L5L
sa(dp171
g4
I01
sg5
VEAI_SERVICE
p172
sg7
L5L
sa(dp173
g4
I01
sg5
VEAI_SOCKTYPE
p174
sg7
L5L
sa(dp175
g4
I01
sg5
VEAI_SYSTEM
p176
sg7
L5L
sa(dp177
g4
I01
sg5
VHCI_DATA_DIR
p178
sg7
L5L
sa(dp179
g4
I01
sg5
VHCI_FILTER
p180
sg7
L5L
sa(dp181
g4
I01
sg5
VHCI_TIME_STAMP
p182
sg7
L5L
sa(dp183
g4
I01
sg5
VINADDR_ALLHOSTS_GROUP
p184
sg7
L5L
sa(dp185
g4
I01
sg5
VINADDR_ANY
p186
sg7
L5L
sa(dp187
g4
I01
sg5
VINADDR_BROADCAST
p188
sg7
L5L
sa(dp189
g4
I01
sg5
VINADDR_LOOPBACK
p190
sg7
L5L
sa(dp191
g4
I01
sg5
VINADDR_MAX_LOCAL_GROUP
p192
sg7
L5L
sa(dp193
g4
I01
sg5
VINADDR_NONE
p194
sg7
L5L
sa(dp195
g4
I01
sg5
VINADDR_UNSPEC_GROUP
p196
sg7
L5L
sa(dp197
g4
I01
sg5
VIPPORT_RESERVED
p198
sg7
L5L
sa(dp199
g4
I01
sg5
VIPPORT_USERRESERVED
p200
sg7
L5L
sa(dp201
g4
I01
sg5
VIPPROTO_AH
p202
sg7
L5L
sa(dp203
g4
I01
sg5
VIPPROTO_DSTOPTS
p204
sg7
L5L
sa(dp205
g4
I01
sg5
VIPPROTO_EGP
p206
sg7
L5L
sa(dp207
g4
I01
sg5
VIPPROTO_ESP
p208
sg7
L5L
sa(dp209
g4
I01
sg5
VIPPROTO_FRAGMENT
p210
sg7
L5L
sa(dp211
g4
I01
sg5
VIPPROTO_GRE
p212
sg7
L5L
sa(dp213
g4
I01
sg5
VIPPROTO_HOPOPTS
p214
sg7
L5L
sa(dp215
g4
I01
sg5
VIPPROTO_ICMP
p216
sg7
L5L
sa(dp217
g4
I01
sg5
VIPPROTO_ICMPV6
p218
sg7
L5L
sa(dp219
g4
I01
sg5
VIPPROTO_IDP
p220
sg7
L5L
sa(dp221
g4
I01
sg5
VIPPROTO_IGMP
p222
sg7
L5L
sa(dp223
g4
I01
sg5
VIPPROTO_IP
p224
sg7
L5L
sa(dp225
g4
I01
sg5
VIPPROTO_IPIP
p226
sg7
L5L
sa(dp227
g4
I01
sg5
VIPPROTO_IPV6
p228
sg7
L5L
sa(dp229
g4
I01
sg5
VIPPROTO_NONE
p230
sg7
L5L
sa(dp231
g4
I01
sg5
VIPPROTO_PIM
p232
sg7
L5L
sa(dp233
g4
I01
sg5
VIPPROTO_PUP
p234
sg7
L5L
sa(dp235
g4
I01
sg5
VIPPROTO_RAW
p236
sg7
L5L
sa(dp237
g4
I01
sg5
VIPPROTO_ROUTING
p238
sg7
L5L
sa(dp239
g4
I01
sg5
VIPPROTO_RSVP
p240
sg7
L5L
sa(dp241
g4
I01
sg5
VIPPROTO_SCTP
p242
sg7
L5L
sa(dp243
g4
I01
sg5
VIPPROTO_TCP
p244
sg7
L5L
sa(dp245
g4
I01
sg5
VIPPROTO_TP
p246
sg7
L5L
sa(dp247
g4
I01
sg5
VIPPROTO_UDP
p248
sg7
L5L
sa(dp249
g4
I01
sg5
VIPV6_CHECKSUM
p250
sg7
L5L
sa(dp251
g4
I01
sg5
VIPV6_DONTFRAG
p252
sg7
L5L
sa(dp253
g4
I01
sg5
VIPV6_DSTOPTS
p254
sg7
L5L
sa(dp255
g4
I01
sg5
VIPV6_HOPLIMIT
p256
sg7
L5L
sa(dp257
g4
I01
sg5
VIPV6_HOPOPTS
p258
sg7
L5L
sa(dp259
g4
I01
sg5
VIPV6_JOIN_GROUP
p260
sg7
L5L
sa(dp261
g4
I01
sg5
VIPV6_LEAVE_GROUP
p262
sg7
L5L
sa(dp263
g4
I01
sg5
VIPV6_MULTICAST_HOPS
p264
sg7
L5L
sa(dp265
g4
I01
sg5
VIPV6_MULTICAST_IF
p266
sg7
L5L
sa(dp267
g4
I01
sg5
VIPV6_MULTICAST_LOOP
p268
sg7
L5L
sa(dp269
g4
I01
sg5
VIPV6_NEXTHOP
p270
sg7
L5L
sa(dp271
g4
I01
sg5
VIPV6_PATHMTU
p272
sg7
L5L
sa(dp273
g4
I01
sg5
VIPV6_PKTINFO
p274
sg7
L5L
sa(dp275
g4
I01
sg5
VIPV6_RECVDSTOPTS
p276
sg7
L5L
sa(dp277
g4
I01
sg5
VIPV6_RECVHOPLIMIT
p278
sg7
L5L
sa(dp279
g4
I01
sg5
VIPV6_RECVHOPOPTS
p280
sg7
L5L
sa(dp281
g4
I01
sg5
VIPV6_RECVPATHMTU
p282
sg7
L5L
sa(dp283
g4
I01
sg5
VIPV6_RECVPKTINFO
p284
sg7
L5L
sa(dp285
g4
I01
sg5
VIPV6_RECVRTHDR
p286
sg7
L5L
sa(dp287
g4
I01
sg5
VIPV6_RECVTCLASS
p288
sg7
L5L
sa(dp289
g4
I01
sg5
VIPV6_RTHDR
p290
sg7
L5L
sa(dp291
g4
I01
sg5
VIPV6_RTHDRDSTOPTS
p292
sg7
L5L
sa(dp293
g4
I01
sg5
VIPV6_RTHDR_TYPE_0
p294
sg7
L5L
sa(dp295
g4
I01
sg5
VIPV6_TCLASS
p296
sg7
L5L
sa(dp297
g4
I01
sg5
VIPV6_UNICAST_HOPS
p298
sg7
L5L
sa(dp299
g4
I01
sg5
VIPV6_V6ONLY
p300
sg7
L5L
sa(dp301
g4
I01
sg5
VIP_ADD_MEMBERSHIP
p302
sg7
L5L
sa(dp303
g4
I01
sg5
VIP_DEFAULT_MULTICAST_LOOP
p304
sg7
L5L
sa(dp305
g4
I01
sg5
VIP_DEFAULT_MULTICAST_TTL
p306
sg7
L5L
sa(dp307
g4
I01
sg5
VIP_DROP_MEMBERSHIP
p308
sg7
L5L
sa(dp309
g4
I01
sg5
VIP_HDRINCL
p310
sg7
L5L
sa(dp311
g4
I01
sg5
VIP_MAX_MEMBERSHIPS
p312
sg7
L5L
sa(dp313
g4
I01
sg5
VIP_MULTICAST_IF
p314
sg7
L5L
sa(dp315
g4
I01
sg5
VIP_MULTICAST_LOOP
p316
sg7
L5L
sa(dp317
g4
I01
sg5
VIP_MULTICAST_TTL
p318
sg7
L5L
sa(dp319
g4
I01
sg5
VIP_OPTIONS
p320
sg7
L5L
sa(dp321
g4
I01
sg5
VIP_RECVOPTS
p322
sg7
L5L
sa(dp323
g4
I01
sg5
VIP_RECVRETOPTS
p324
sg7
L5L
sa(dp325
g4
I01
sg5
VIP_RETOPTS
p326
sg7
L5L
sa(dp327
g4
I01
sg5
VIP_TOS
p328
sg7
L5L
sa(dp329
g4
I01
sg5
VIP_TRANSPARENT
p330
sg7
L5L
sa(dp331
g4
I01
sg5
VIP_TTL
p332
sg7
L5L
sa(dp333
g4
I01
sg5
VMSG_CMSG_CLOEXEC
p334
sg7
L5L
sa(dp335
g4
I01
sg5
VMSG_CONFIRM
p336
sg7
L5L
sa(dp337
g4
I01
sg5
VMSG_CTRUNC
p338
sg7
L5L
sa(dp339
g4
I01
sg5
VMSG_DONTROUTE
p340
sg7
L5L
sa(dp341
g4
I01
sg5
VMSG_DONTWAIT
p342
sg7
L5L
sa(dp343
g4
I01
sg5
VMSG_EOR
p344
sg7
L5L
sa(dp345
g4
I01
sg5
VMSG_ERRQUEUE
p346
sg7
L5L
sa(dp347
g4
I01
sg5
VMSG_FASTOPEN
p348
sg7
L5L
sa(dp349
g4
I01
sg5
VMSG_MORE
p350
sg7
L5L
sa(dp351
g4
I01
sg5
VMSG_NOSIGNAL
p352
sg7
L5L
sa(dp353
g4
I01
sg5
VMSG_OOB
p354
sg7
L5L
sa(dp355
g4
I01
sg5
VMSG_PEEK
p356
sg7
L5L
sa(dp357
g4
I01
sg5
VMSG_TRUNC
p358
sg7
L5L
sa(dp359
g4
I01
sg5
VMSG_WAITALL
p360
sg7
L5L
sa(dp361
g4
I01
sg5
VNETLINK_DNRTMSG
p362
sg7
L5L
sa(dp363
g4
I01
sg5
VNETLINK_FIREWALL
p364
sg7
L5L
sa(dp365
g4
I01
sg5
VNETLINK_IP6_FW
p366
sg7
L5L
sa(dp367
g4
I01
sg5
VNETLINK_NFLOG
p368
sg7
L5L
sa(dp369
g4
I01
sg5
VNETLINK_ROUTE
p370
sg7
L5L
sa(dp371
g4
I01
sg5
VNETLINK_USERSOCK
p372
sg7
L5L
sa(dp373
g4
I01
sg5
VNETLINK_XFRM
p374
sg7
L5L
sa(dp375
g4
I01
sg5
VNI_DGRAM
p376
sg7
L5L
sa(dp377
g4
I01
sg5
VNI_MAXHOST
p378
sg7
L5L
sa(dp379
g4
I01
sg5
VNI_MAXSERV
p380
sg7
L5L
sa(dp381
g4
I01
sg5
VNI_NAMEREQD
p382
sg7
L5L
sa(dp383
g4
I01
sg5
VNI_NOFQDN
p384
sg7
L5L
sa(dp385
g4
I01
sg5
VNI_NUMERICHOST
p386
sg7
L5L
sa(dp387
g4
I01
sg5
VNI_NUMERICSERV
p388
sg7
L5L
sa(dp389
g4
I01
sg5
VPACKET_BROADCAST
p390
sg7
L5L
sa(dp391
g4
I01
sg5
VPACKET_FASTROUTE
p392
sg7
L5L
sa(dp393
g4
I01
sg5
VPACKET_HOST
p394
sg7
L5L
sa(dp395
g4
I01
sg5
VPACKET_LOOPBACK
p396
sg7
L5L
sa(dp397
g4
I01
sg5
VPACKET_MULTICAST
p398
sg7
L5L
sa(dp399
g4
I01
sg5
VPACKET_OTHERHOST
p400
sg7
L5L
sa(dp401
g4
I01
sg5
VPACKET_OUTGOING
p402
sg7
L5L
sa(dp403
g4
I01
sg5
VPF_CAN
p404
sg7
L5L
sa(dp405
g4
I01
sg5
VPF_PACKET
p406
sg7
L5L
sa(dp407
g4
I01
sg5
VPF_RDS
p408
sg7
L5L
sa(dp409
g4
I01
sg5
VSCM_CREDENTIALS
p410
sg7
L5L
sa(dp411
g4
I01
sg5
VSCM_RIGHTS
p412
sg7
L5L
sa(dp413
g4
I01
sg5
VSHUT_RD
p414
sg7
L5L
sa(dp415
g4
I01
sg5
VSHUT_RDWR
p416
sg7
L5L
sa(dp417
g4
I01
sg5
VSHUT_WR
p418
sg7
L5L
sa(dp419
g4
I01
sg5
VSOCK_CLOEXEC
p420
sg7
L5L
sa(dp421
g4
I01
sg5
VSOCK_DGRAM
p422
sg7
L5L
sa(dp423
g4
I01
sg5
VSOCK_NONBLOCK
p424
sg7
L5L
sa(dp425
g4
I01
sg5
VSOCK_RAW
p426
sg7
L5L
sa(dp427
g4
I01
sg5
VSOCK_RDM
p428
sg7
L5L
sa(dp429
g4
I01
sg5
VSOCK_SEQPACKET
p430
sg7
L5L
sa(dp431
g4
I01
sg5
VSOCK_STREAM
p432
sg7
L5L
sa(dp433
g4
I01
sg5
VSOL_CAN_BASE
p434
sg7
L5L
sa(dp435
g4
I01
sg5
VSOL_CAN_RAW
p436
sg7
L5L
sa(dp437
g4
I01
sg5
VSOL_HCI
p438
sg7
L5L
sa(dp439
g4
I01
sg5
VSOL_IP
p440
sg7
L5L
sa(dp441
g4
I01
sg5
VSOL_SOCKET
p442
sg7
L5L
sa(dp443
g4
I01
sg5
VSOL_TCP
p444
sg7
L5L
sa(dp445
g4
I01
sg5
VSOL_TIPC
p446
sg7
L5L
sa(dp447
g4
I01
sg5
VSOL_UDP
p448
sg7
L5L
sa(dp449
g4
I01
sg5
VSOMAXCONN
p450
sg7
L5L
sa(dp451
g4
I01
sg5
VSO_ACCEPTCONN
p452
sg7
L5L
sa(dp453
g4
I01
sg5
VSO_BINDTODEVICE
p454
sg7
L5L
sa(dp455
g4
I01
sg5
VSO_BROADCAST
p456
sg7
L5L
sa(dp457
g4
I01
sg5
VSO_DEBUG
p458
sg7
L5L
sa(dp459
g4
I01
sg5
VSO_DONTROUTE
p460
sg7
L5L
sa(dp461
g4
I01
sg5
VSO_ERROR
p462
sg7
L5L
sa(dp463
g4
I01
sg5
VSO_KEEPALIVE
p464
sg7
L5L
sa(dp465
g4
I01
sg5
VSO_LINGER
p466
sg7
L5L
sa(dp467
g4
I01
sg5
VSO_MARK
p468
sg7
L5L
sa(dp469
g4
I01
sg5
VSO_OOBINLINE
p470
sg7
L5L
sa(dp471
g4
I01
sg5
VSO_PASSCRED
p472
sg7
L5L
sa(dp473
g4
I01
sg5
VSO_PEERCRED
p474
sg7
L5L
sa(dp475
g4
I01
sg5
VSO_PRIORITY
p476
sg7
L5L
sa(dp477
g4
I01
sg5
VSO_RCVBUF
p478
sg7
L5L
sa(dp479
g4
I01
sg5
VSO_RCVLOWAT
p480
sg7
L5L
sa(dp481
g4
I01
sg5
VSO_RCVTIMEO
p482
sg7
L5L
sa(dp483
g4
I01
sg5
VSO_REUSEADDR
p484
sg7
L5L
sa(dp485
g4
I01
sg5
VSO_REUSEPORT
p486
sg7
L5L
sa(dp487
g4
I01
sg5
VSO_SNDBUF
p488
sg7
L5L
sa(dp489
g4
I01
sg5
VSO_SNDLOWAT
p490
sg7
L5L
sa(dp491
g4
I01
sg5
VSO_SNDTIMEO
p492
sg7
L5L
sa(dp493
g4
I01
sg5
VSO_TYPE
p494
sg7
L5L
sa(dp495
g1
(lp496
(dp497
g4
I01
sg5
V__delattr__
p498
sg7
L5L
sa(dp499
g4
I01
sg5
V__dir__
p500
sg7
L2L
sg148
V__dir__() -> list\u000adefault dir() implementation
p501
sa(dp502
g4
I01
sg5
V__doc__
p503
sg7
L5L
sa(dp504
g4
I01
sg5
V__eq__
p505
sg7
L5L
sa(dp506
g4
I01
sg5
V__format__
p507
sg7
L2L
sg148
Vdefault object formatter
p508
sa(dp509
g4
I01
sg5
V__ge__
p510
sg7
L5L
sa(dp511
g4
I01
sg5
V__getattribute__
p512
sg7
L5L
sa(dp513
g4
I01
sg5
V__gt__
p514
sg7
L5L
sa(dp515
g4
I01
sg5
V__hash__
p516
sg7
L5L
sa(dp517
g4
I01
sg5
V__init__
p518
sg7
L5L
sa(dp519
g4
I01
sg5
V__le__
p520
sg7
L5L
sa(dp521
g4
I01
sg5
V__lt__
p522
sg7
L5L
sa(dp523
g4
I01
sg5
V__ne__
p524
sg7
L5L
sa(dp525
g4
I01
sg5
V__new__
p526
sg7
L2L
sg148
VCreate and return a new object.  See help(type) for accurate signature.
p527
sa(dp528
g4
I01
sg5
V__reduce__
p529
sg7
L2L
sg148
Vhelper for pickle
p530
sa(dp531
g4
I01
sg5
V__reduce_ex__
p532
sg7
L2L
sg148
Vhelper for pickle
p533
sa(dp534
g4
I01
sg5
V__repr__
p535
sg7
L5L
sa(dp536
g4
I01
sg5
V__setattr__
p537
sg7
L5L
sa(dp538
g4
I01
sg5
V__sizeof__
p539
sg7
L2L
sg148
V__sizeof__() -> int\u000asize of object in memory, in bytes
p540
sa(dp541
g4
I01
sg5
V__str__
p542
sg7
L5L
sa(dp543
g4
I01
sg5
V__subclasshook__
p544
sg7
L2L
sg148
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p545
sa(dp546
g4
I01
sg5
V_accept
p547
sg7
L2L
sg148
V_accept() -> (integer, address info)\u000a\u000aWait for an incoming connection.  Return a new socket file descriptor\u000arepresenting the connection, and the address of the client.\u000aFor IP sockets, the address info is a pair (hostaddr, port).
p548
sa(dp549
g4
I01
sg5
Vbind
p550
sg7
L2L
sg148
Vbind(address)\u000a\u000aBind the socket to a local address.  For IP sockets, the address is a\u000apair (host, port); the host must refer to the local host. For raw packet\u000asockets the address is a tuple (ifname, proto [,pkttype [,hatype]])
p551
sa(dp552
g4
I01
sg5
Vclose
p553
sg7
L2L
sg148
Vclose()\u000a\u000aClose the socket.  It cannot be used after this call.
p554
sa(dp555
g4
I01
sg5
Vconnect
p556
sg7
L2L
sg148
Vconnect(address)\u000a\u000aConnect the socket to a remote address.  For IP sockets, the address\u000ais a pair (host, port).
p557
sa(dp558
g4
I01
sg5
Vconnect_ex
p559
sg7
L2L
sg148
Vconnect_ex(address) -> errno\u000a\u000aThis is like connect(address), but returns an error code (the errno value)\u000ainstead of raising an exception when an error occurs.
p560
sa(dp561
g4
I01
sg5
Vdetach
p562
sg7
L2L
sg148
Vdetach()\u000a\u000aClose the socket object without closing the underlying file descriptor.\u000aThe object cannot be used after this call, but the file descriptor\u000acan be reused for other purposes.  The file descriptor is returned.
p563
sa(dp564
g4
I01
sg5
Vfamily
p565
sg7
L5L
sa(dp566
g4
I01
sg5
Vfileno
p567
sg7
L2L
sg148
Vfileno() -> integer\u000a\u000aReturn the integer file descriptor of the socket.
p568
sa(dp569
g4
I01
sg5
Vgetpeername
p570
sg7
L2L
sg148
Vgetpeername() -> address info\u000a\u000aReturn the address of the remote endpoint.  For IP sockets, the address\u000ainfo is a pair (hostaddr, port).
p571
sa(dp572
g4
I01
sg5
Vgetsockname
p573
sg7
L2L
sg148
Vgetsockname() -> address info\u000a\u000aReturn the address of the local endpoint.  For IP sockets, the address\u000ainfo is a pair (hostaddr, port).
p574
sa(dp575
g4
I01
sg5
Vgetsockopt
p576
sg7
L2L
sg148
Vgetsockopt(level, option[, buffersize]) -> value\u000a\u000aGet a socket option.  See the Unix manual for level and option.\u000aIf a nonzero buffersize argument is given, the return value is a\u000astring of that length; otherwise it is an integer.
p577
sa(dp578
g4
I01
sg5
Vgettimeout
p579
sg7
L2L
sg148
Vgettimeout() -> timeout\u000a\u000aReturns the timeout in seconds (float) associated with socket \u000aoperations. A timeout of None indicates that timeouts on socket \u000aoperations are disabled.
p580
sa(dp581
g4
I01
sg5
Vlisten
p582
sg7
L2L
sg148
Vlisten([backlog])\u000a\u000aEnable a server to accept connections.  If backlog is specified, it must be\u000aat least 0 (if it is lower, it is set to 0); it specifies the number of\u000aunaccepted connections that the system will allow before refusing new\u000aconnections. If not specified, a default reasonable value is chosen.
p583
sa(dp584
g4
I01
sg5
Vproto
p585
sg7
L5L
sa(dp586
g4
I01
sg5
Vrecv
p587
sg7
L2L
sg148
Vrecv(buffersize[, flags]) -> data\u000a\u000aReceive up to buffersize bytes from the socket.  For the optional flags\u000aargument, see the Unix manual.  When no data is available, block until\u000aat least one byte is available or until the remote end is closed.  When\u000athe remote end is closed and all data is read, return the empty string.
p588
sa(dp589
g4
I01
sg5
Vrecv_into
p590
sg7
L2L
sg148
Vrecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating \u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize \u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.
p591
sa(dp592
g4
I01
sg5
Vrecvfrom
p593
sg7
L2L
sg148
Vrecvfrom(buffersize[, flags]) -> (data, address info)\u000a\u000aLike recv(buffersize, flags) but also return the sender's address info.
p594
sa(dp595
g4
I01
sg5
Vrecvfrom_into
p596
sg7
L2L
sg148
Vrecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.
p597
sa(dp598
g4
I01
sg5
Vrecvmsg
p599
sg7
L2L
sg148
Vrecvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)\u000a\u000aReceive normal data (up to bufsize bytes) and ancillary data from the\u000asocket.  The ancbufsize argument sets the size in bytes of the\u000ainternal buffer used to receive the ancillary data; it defaults to 0,\u000ameaning that no ancillary data will be received.  Appropriate buffer\u000asizes for ancillary data can be calculated using CMSG_SPACE() or\u000aCMSG_LEN(), and items which do not fit into the buffer might be\u000atruncated or discarded.  The flags argument defaults to 0 and has the\u000asame meaning as for recv().\u000a\u000aThe return value is a 4-tuple: (data, ancdata, msg_flags, address).\u000aThe data item is a bytes object holding the non-ancillary data\u000areceived.  The ancdata item is a list of zero or more tuples\u000a(cmsg_level, cmsg_type, cmsg_data) representing the ancillary data\u000a(control messages) received: cmsg_level and cmsg_type are integers\u000aspecifying the protocol level and protocol-specific type respectively,\u000aand cmsg_data is a bytes object holding the associated data.  The\u000amsg_flags item is the bitwise OR of various flags indicating\u000aconditions on the received message; see your system documentation for\u000adetails.  If the receiving socket is unconnected, address is the\u000aaddress of the sending socket, if available; otherwise, its value is\u000aunspecified.\u000a\u000aIf recvmsg() raises an exception after the system call returns, it\u000awill first attempt to close any file descriptors received via the\u000aSCM_RIGHTS mechanism.
p600
sa(dp601
g4
I01
sg5
Vrecvmsg_into
p602
sg7
L2L
sg148
Vrecvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)\u000a\u000aReceive normal data and ancillary data from the socket, scattering the\u000anon-ancillary data into a series of buffers.  The buffers argument\u000amust be an iterable of objects that export writable buffers\u000a(e.g. bytearray objects); these will be filled with successive chunks\u000aof the non-ancillary data until it has all been written or there are\u000ano more buffers.  The ancbufsize argument sets the size in bytes of\u000athe internal buffer used to receive the ancillary data; it defaults to\u000a0, meaning that no ancillary data will be received.  Appropriate\u000abuffer sizes for ancillary data can be calculated using CMSG_SPACE()\u000aor CMSG_LEN(), and items which do not fit into the buffer might be\u000atruncated or discarded.  The flags argument defaults to 0 and has the\u000asame meaning as for recv().\u000a\u000aThe return value is a 4-tuple: (nbytes, ancdata, msg_flags, address).\u000aThe nbytes item is the total number of bytes of non-ancillary data\u000awritten into the buffers.  The ancdata item is a list of zero or more\u000atuples (cmsg_level, cmsg_type, cmsg_data) representing the ancillary\u000adata (control messages) received: cmsg_level and cmsg_type are\u000aintegers specifying the protocol level and protocol-specific type\u000arespectively, and cmsg_data is a bytes object holding the associated\u000adata.  The msg_flags item is the bitwise OR of various flags\u000aindicating conditions on the received message; see your system\u000adocumentation for details.  If the receiving socket is unconnected,\u000aaddress is the address of the sending socket, if available; otherwise,\u000aits value is unspecified.\u000a\u000aIf recvmsg_into() raises an exception after the system call returns,\u000ait will first attempt to close any file descriptors received via the\u000aSCM_RIGHTS mechanism.
p603
sa(dp604
g4
I01
sg5
Vsend
p605
sg7
L2L
sg148
Vsend(data[, flags]) -> count\u000a\u000aSend a data string to the socket.  For the optional flags\u000aargument, see the Unix manual.  Return the number of bytes\u000asent; this may be less than len(data) if the network is busy.
p606
sa(dp607
g4
I01
sg5
Vsendall
p608
sg7
L2L
sg148
Vsendall(data[, flags])\u000a\u000aSend a data string to the socket.  For the optional flags\u000aargument, see the Unix manual.  This calls send() repeatedly\u000auntil all data is sent.  If an error occurs, it's impossible\u000ato tell how much data has been sent.
p609
sa(dp610
g4
I01
sg5
Vsendmsg
p611
sg7
L2L
sg148
Vsendmsg(buffers[, ancdata[, flags[, address]]]) -> count\u000a\u000aSend normal and ancillary data to the socket, gathering the\u000anon-ancillary data from a series of buffers and concatenating it into\u000aa single message.  The buffers argument specifies the non-ancillary\u000adata as an iterable of bytes-like objects (e.g. bytes objects).\u000aThe ancdata argument specifies the ancillary data (control messages)\u000aas an iterable of zero or more tuples (cmsg_level, cmsg_type,\u000acmsg_data), where cmsg_level and cmsg_type are integers specifying the\u000aprotocol level and protocol-specific type respectively, and cmsg_data\u000ais a bytes-like object holding the associated data.  The flags\u000aargument defaults to 0 and has the same meaning as for send().  If\u000aaddress is supplied and not None, it sets a destination address for\u000athe message.  The return value is the number of bytes of non-ancillary\u000adata sent.
p612
sa(dp613
g4
I01
sg5
Vsendto
p614
sg7
L2L
sg148
Vsendto(data[, flags], address) -> count\u000a\u000aLike send(data, flags) but allows specifying the destination address.\u000aFor IP sockets, the address is a pair (hostaddr, port).
p615
sa(dp616
g4
I01
sg5
Vsetblocking
p617
sg7
L2L
sg148
Vsetblocking(flag)\u000a\u000aSet the socket to blocking (flag is true) or non-blocking (false).\u000asetblocking(True) is equivalent to settimeout(None);\u000asetblocking(False) is equivalent to settimeout(0.0).
p618
sa(dp619
g4
I01
sg5
Vsetsockopt
p620
sg7
L2L
sg148
Vsetsockopt(level, option, value)\u000a\u000aSet a socket option.  See the Unix manual for level and option.\u000aThe value argument can either be an integer or a string.
p621
sa(dp622
g4
I01
sg5
Vsettimeout
p623
sg7
L2L
sg148
Vsettimeout(timeout)\u000a\u000aSet a timeout on socket operations.  'timeout' can be a float,\u000agiving in seconds, or None.  Setting a timeout of None disables\u000athe timeout feature and is equivalent to setblocking(1).\u000aSetting a timeout of zero is the same as setblocking(0).
p624
sa(dp625
g4
I01
sg5
Vshutdown
p626
sg7
L2L
sg148
Vshutdown(flag)\u000a\u000aShut down the reading side of the socket (flag == SHUT_RD), the writing side\u000aof the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).
p627
sa(dp628
g4
I01
sg5
Vtimeout
p629
sg7
L5L
sa(dp630
g4
I01
sg5
g7
sg7
L5L
sasg4
I01
sg5
VSocketType
p631
sg7
L3L
sg148
Vsocket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None) -> socket object\u000a\u000aOpen a socket of the given type.  The family argument specifies the\u000aaddress family; it defaults to AF_INET.  The type argument specifies\u000awhether this is a stream (SOCK_STREAM, this is the default)\u000aor datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,\u000aspecifying the default protocol.  Keyword arguments are accepted.\u000aThe socket is created as non-inheritable.\u000a\u000aA socket object represents one endpoint of a network connection.\u000a\u000aMethods of socket objects (keyword arguments not allowed):\u000a\u000a_accept() -- accept connection, returning new socket fd and client address\u000abind(addr) -- bind the socket to a local address\u000aclose() -- close the socket\u000aconnect(addr) -- connect the socket to a remote address\u000aconnect_ex(addr) -- connect, return an error code instead of an exception\u000adup() -- return a new socket fd duplicated from fileno()\u000afileno() -- return underlying file descriptor\u000agetpeername() -- return remote address [*]\u000agetsockname() -- return local address\u000agetsockopt(level, optname[, buflen]) -- get socket options\u000agettimeout() -- return timeout or None\u000alisten([n]) -- start listening for incoming connections\u000arecv(buflen[, flags]) -- receive data\u000arecv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)\u000arecvfrom(buflen[, flags]) -- receive data and sender's address\u000arecvfrom_into(buffer[, nbytes, [, flags])\u000a  -- receive data and sender's address (into a buffer)\u000asendall(data[, flags]) -- send all data\u000asend(data[, flags]) -- send data, may not send all of it\u000asendto(data[, flags], addr) -- send data to a given address\u000asetblocking(0 | 1) -- set or clear the blocking I/O flag\u000asetsockopt(level, optname, value) -- set socket options\u000asettimeout(None | float) -- set or clear the timeout\u000ashutdown(how) -- shut down traffic in one or both directions\u000aif_nameindex() -- return all network interface indices and names\u000aif_nametoindex(name) -- return the corresponding interface index\u000aif_indextoname(index) -- return the corresponding interface name\u000a\u000a [*] not available on all platforms!
p632
sa(dp633
g4
I01
sg5
VTCP_CORK
p634
sg7
L5L
sa(dp635
g4
I01
sg5
VTCP_DEFER_ACCEPT
p636
sg7
L5L
sa(dp637
g4
I01
sg5
VTCP_FASTOPEN
p638
sg7
L5L
sa(dp639
g4
I01
sg5
VTCP_INFO
p640
sg7
L5L
sa(dp641
g4
I01
sg5
VTCP_KEEPCNT
p642
sg7
L5L
sa(dp643
g4
I01
sg5
VTCP_KEEPIDLE
p644
sg7
L5L
sa(dp645
g4
I01
sg5
VTCP_KEEPINTVL
p646
sg7
L5L
sa(dp647
g4
I01
sg5
VTCP_LINGER2
p648
sg7
L5L
sa(dp649
g4
I01
sg5
VTCP_MAXSEG
p650
sg7
L5L
sa(dp651
g4
I01
sg5
VTCP_NODELAY
p652
sg7
L5L
sa(dp653
g4
I01
sg5
VTCP_QUICKACK
p654
sg7
L5L
sa(dp655
g4
I01
sg5
VTCP_SYNCNT
p656
sg7
L5L
sa(dp657
g4
I01
sg5
VTCP_WINDOW_CLAMP
p658
sg7
L5L
sa(dp659
g4
I01
sg5
VTIPC_ADDR_ID
p660
sg7
L5L
sa(dp661
g4
I01
sg5
VTIPC_ADDR_NAME
p662
sg7
L5L
sa(dp663
g4
I01
sg5
VTIPC_ADDR_NAMESEQ
p664
sg7
L5L
sa(dp665
g4
I01
sg5
VTIPC_CFG_SRV
p666
sg7
L5L
sa(dp667
g4
I01
sg5
VTIPC_CLUSTER_SCOPE
p668
sg7
L5L
sa(dp669
g4
I01
sg5
VTIPC_CONN_TIMEOUT
p670
sg7
L5L
sa(dp671
g4
I01
sg5
VTIPC_CRITICAL_IMPORTANCE
p672
sg7
L5L
sa(dp673
g4
I01
sg5
VTIPC_DEST_DROPPABLE
p674
sg7
L5L
sa(dp675
g4
I01
sg5
VTIPC_HIGH_IMPORTANCE
p676
sg7
L5L
sa(dp677
g4
I01
sg5
VTIPC_IMPORTANCE
p678
sg7
L5L
sa(dp679
g4
I01
sg5
VTIPC_LOW_IMPORTANCE
p680
sg7
L5L
sa(dp681
g4
I01
sg5
VTIPC_MEDIUM_IMPORTANCE
p682
sg7
L5L
sa(dp683
g4
I01
sg5
VTIPC_NODE_SCOPE
p684
sg7
L5L
sa(dp685
g4
I01
sg5
VTIPC_PUBLISHED
p686
sg7
L5L
sa(dp687
g4
I01
sg5
VTIPC_SRC_DROPPABLE
p688
sg7
L5L
sa(dp689
g4
I01
sg5
VTIPC_SUBSCR_TIMEOUT
p690
sg7
L5L
sa(dp691
g4
I01
sg5
VTIPC_SUB_CANCEL
p692
sg7
L5L
sa(dp693
g4
I01
sg5
VTIPC_SUB_PORTS
p694
sg7
L5L
sa(dp695
g4
I01
sg5
VTIPC_SUB_SERVICE
p696
sg7
L5L
sa(dp697
g4
I01
sg5
VTIPC_TOP_SRV
p698
sg7
L5L
sa(dp699
g4
I01
sg5
VTIPC_WAIT_FOREVER
p700
sg7
L5L
sa(dp701
g4
I01
sg5
VTIPC_WITHDRAWN
p702
sg7
L5L
sa(dp703
g4
I01
sg5
VTIPC_ZONE_SCOPE
p704
sg7
L5L
sa(dp705
g4
I01
sg5
g503
sg7
L5L
sa(dp706
g1
(lp707
(dp708
g4
I01
sg5
g498
sg7
L5L
sa(dp709
g4
I01
sg5
V__dict__
p710
sg7
L5L
sa(dp711
g4
I01
sg5
g500
sg7
L2L
sg148
V__dir__() -> list\u000adefault dir() implementation
p712
sa(dp713
g4
I01
sg5
g503
sg7
L5L
sa(dp714
g4
I01
sg5
g505
sg7
L5L
sa(dp715
g4
I01
sg5
g507
sg7
L2L
sg148
Vdefault object formatter
p716
sa(dp717
g4
I01
sg5
g510
sg7
L5L
sa(dp718
g4
I01
sg5
g512
sg7
L5L
sa(dp719
g4
I01
sg5
g514
sg7
L5L
sa(dp720
g4
I01
sg5
g516
sg7
L5L
sa(dp721
g4
I01
sg5
g518
sg7
L5L
sa(dp722
g4
I01
sg5
g520
sg7
L5L
sa(dp723
g4
I01
sg5
g522
sg7
L5L
sa(dp724
g4
I01
sg5
V__module__
p725
sg7
L5L
sa(dp726
g4
I01
sg5
g524
sg7
L5L
sa(dp727
g4
I01
sg5
g526
sg7
L2L
sg148
VCreate and return a new object.  See help(type) for accurate signature.
p728
sa(dp729
g4
I01
sg5
g529
sg7
L2L
sg148
Vhelper for pickle
p730
sa(dp731
g4
I01
sg5
g532
sg7
L2L
sg148
Vhelper for pickle
p732
sa(dp733
g4
I01
sg5
g535
sg7
L5L
sa(dp734
g4
I01
sg5
g537
sg7
L5L
sa(dp735
g4
I01
sg5
g539
sg7
L2L
sg148
V__sizeof__() -> int\u000asize of object in memory, in bytes
p736
sa(dp737
g4
I01
sg5
g542
sg7
L5L
sa(dp738
g4
I01
sg5
g544
sg7
L2L
sg148
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p739
sa(dp740
g4
I01
sg5
V__weakref__
p741
sg7
L5L
sa(dp742
g4
I01
sg5
Vcreate_module
p743
sg7
L5L
sa(dp744
g4
I01
sg5
Vexec_module
p745
sg7
L5L
sa(dp746
g4
I01
sg5
Vfind_module
p747
sg7
L5L
sa(dp748
g4
I01
sg5
Vfind_spec
p749
sg7
L5L
sa(dp750
g4
I01
sg5
Vget_code
p751
sg7
L5L
sa(dp752
g4
I01
sg5
Vget_source
p753
sg7
L5L
sa(dp754
g4
I01
sg5
Vis_package
p755
sg7
L5L
sa(dp756
g4
I01
sg5
Vload_module
p757
sg7
L5L
sa(dp758
g4
I01
sg5
Vmodule_repr
p759
sg7
L5L
sasg4
I01
sg5
V__loader__
p760
sg7
L3L
sg148
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p761
sa(dp762
g4
I01
sg5
V__name__
p763
sg7
L5L
sa(dp764
g4
I01
sg5
V__package__
p765
sg7
L5L
sa(dp766
g4
I01
sg5
V__spec__
p767
sg7
L5L
sa(dp768
g4
I01
sg5
Vdup
p769
sg7
L2L
sg148
Vdup(integer) -> integer\u000a\u000aDuplicate an integer socket file descriptor.  This is like os.dup(), but for\u000asockets; on some platforms os.dup() won't work for socket file descriptors.
p770
sa(dp771
g1
(lp772
(dp773
g4
I01
sg5
V__cause__
p774
sg7
L5L
sa(dp775
g4
I01
sg5
V__context__
p776
sg7
L5L
sa(dp777
g4
I01
sg5
g498
sg7
L5L
sa(dp778
g4
I01
sg5
g710
sg7
L5L
sa(dp779
g4
I01
sg5
g500
sg7
L2L
sg148
V__dir__() -> list\u000adefault dir() implementation
p780
sa(dp781
g4
I01
sg5
g503
sg7
L5L
sa(dp782
g4
I01
sg5
g505
sg7
L5L
sa(dp783
g4
I01
sg5
g507
sg7
L2L
sg148
Vdefault object formatter
p784
sa(dp785
g4
I01
sg5
g510
sg7
L5L
sa(dp786
g4
I01
sg5
g512
sg7
L5L
sa(dp787
g4
I01
sg5
g514
sg7
L5L
sa(dp788
g4
I01
sg5
g516
sg7
L5L
sa(dp789
g4
I01
sg5
g518
sg7
L5L
sa(dp790
g4
I01
sg5
g520
sg7
L5L
sa(dp791
g4
I01
sg5
g522
sg7
L5L
sa(dp792
g4
I01
sg5
g524
sg7
L5L
sa(dp793
g4
I01
sg5
g526
sg7
L2L
sg148
VCreate and return a new object.  See help(type) for accurate signature.
p794
sa(dp795
g4
I01
sg5
g529
sg7
L2L
sg148
Nsa(dp796
g4
I01
sg5
g532
sg7
L2L
sg148
Vhelper for pickle
p797
sa(dp798
g4
I01
sg5
g535
sg7
L5L
sa(dp799
g4
I01
sg5
g537
sg7
L5L
sa(dp800
g4
I01
sg5
V__setstate__
p801
sg7
L2L
sg148
Nsa(dp802
g4
I01
sg5
g539
sg7
L2L
sg148
V__sizeof__() -> int\u000asize of object in memory, in bytes
p803
sa(dp804
g4
I01
sg5
g542
sg7
L5L
sa(dp805
g4
I01
sg5
g544
sg7
L2L
sg148
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p806
sa(dp807
g4
I01
sg5
V__suppress_context__
p808
sg7
L5L
sa(dp809
g4
I01
sg5
V__traceback__
p810
sg7
L5L
sa(dp811
g4
I01
sg5
Vargs
p812
sg7
L5L
sa(dp813
g4
I01
sg5
Vcharacters_written
p814
sg7
L5L
sa(dp815
g4
I01
sg5
Verrno
p816
sg7
L5L
sa(dp817
g4
I01
sg5
Vfilename
p818
sg7
L5L
sa(dp819
g4
I01
sg5
Vfilename2
p820
sg7
L5L
sa(dp821
g4
I01
sg5
Vstrerror
p822
sg7
L5L
sa(dp823
g4
I01
sg5
Vwith_traceback
p824
sg7
L2L
sg148
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p825
sasg4
I01
sg5
Verror
p826
sg7
L3L
sg148
VBase class for I/O related errors.
p827
sa(dp828
g1
(lp829
(dp830
g4
I01
sg5
g774
sg7
L5L
sa(dp831
g4
I01
sg5
g776
sg7
L5L
sa(dp832
g4
I01
sg5
g498
sg7
L5L
sa(dp833
g4
I01
sg5
g710
sg7
L5L
sa(dp834
g4
I01
sg5
g500
sg7
L2L
sg148
V__dir__() -> list\u000adefault dir() implementation
p835
sa(dp836
g4
I01
sg5
g503
sg7
L5L
sa(dp837
g4
I01
sg5
g505
sg7
L5L
sa(dp838
g4
I01
sg5
g507
sg7
L2L
sg148
Vdefault object formatter
p839
sa(dp840
g4
I01
sg5
g510
sg7
L5L
sa(dp841
g4
I01
sg5
g512
sg7
L5L
sa(dp842
g4
I01
sg5
g514
sg7
L5L
sa(dp843
g4
I01
sg5
g516
sg7
L5L
sa(dp844
g4
I01
sg5
g518
sg7
L5L
sa(dp845
g4
I01
sg5
g520
sg7
L5L
sa(dp846
g4
I01
sg5
g522
sg7
L5L
sa(dp847
g4
I01
sg5
g725
sg7
L5L
sa(dp848
g4
I01
sg5
g524
sg7
L5L
sa(dp849
g4
I01
sg5
g526
sg7
L2L
sg148
VCreate and return a new object.  See help(type) for accurate signature.
p850
sa(dp851
g4
I01
sg5
g529
sg7
L2L
sg148
Nsa(dp852
g4
I01
sg5
g532
sg7
L2L
sg148
Vhelper for pickle
p853
sa(dp854
g4
I01
sg5
g535
sg7
L5L
sa(dp855
g4
I01
sg5
g537
sg7
L5L
sa(dp856
g4
I01
sg5
g801
sg7
L2L
sg148
Nsa(dp857
g4
I01
sg5
g539
sg7
L2L
sg148
V__sizeof__() -> int\u000asize of object in memory, in bytes
p858
sa(dp859
g4
I01
sg5
g542
sg7
L5L
sa(dp860
g4
I01
sg5
g544
sg7
L2L
sg148
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p861
sa(dp862
g4
I01
sg5
g808
sg7
L5L
sa(dp863
g4
I01
sg5
g810
sg7
L5L
sa(dp864
g4
I01
sg5
g741
sg7
L5L
sa(dp865
g4
I01
sg5
g812
sg7
L5L
sa(dp866
g4
I01
sg5
g814
sg7
L5L
sa(dp867
g4
I01
sg5
g816
sg7
L5L
sa(dp868
g4
I01
sg5
g818
sg7
L5L
sa(dp869
g4
I01
sg5
g820
sg7
L5L
sa(dp870
g4
I01
sg5
g822
sg7
L5L
sa(dp871
g4
I01
sg5
g824
sg7
L2L
sg148
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p872
sasg4
I01
sg5
Vgaierror
p873
sg7
L3L
sg148
Nsa(dp874
g4
I01
sg5
Vgetaddrinfo
p875
sg7
L2L
sg148
Vgetaddrinfo(host, port [, family, type, proto, flags])\u000a    -> list of (family, type, proto, canonname, sockaddr)\u000a\u000aResolve host and port into addrinfo struct.
p876
sa(dp877
g4
I01
sg5
Vgetdefaulttimeout
p878
sg7
L2L
sg148
Vgetdefaulttimeout() -> timeout\u000a\u000aReturns the default timeout in seconds (float) for new socket objects.\u000aA value of None indicates that new socket objects have no timeout.\u000aWhen the socket module is first imported, the default is None.
p879
sa(dp880
g4
I01
sg5
Vgethostbyaddr
p881
sg7
L2L
sg148
Vgethostbyaddr(host) -> (name, aliaslist, addresslist)\u000a\u000aReturn the true host name, a list of aliases, and a list of IP addresses,\u000afor a host.  The host argument is a string giving a host name or IP number.
p882
sa(dp883
g4
I01
sg5
Vgethostbyname
p884
sg7
L2L
sg148
Vgethostbyname(host) -> address\u000a\u000aReturn the IP address (a string of the form '255.255.255.255') for a host.
p885
sa(dp886
g4
I01
sg5
Vgethostbyname_ex
p887
sg7
L2L
sg148
Vgethostbyname_ex(host) -> (name, aliaslist, addresslist)\u000a\u000aReturn the true host name, a list of aliases, and a list of IP addresses,\u000afor a host.  The host argument is a string giving a host name or IP number.
p888
sa(dp889
g4
I01
sg5
Vgethostname
p890
sg7
L2L
sg148
Vgethostname() -> string\u000a\u000aReturn the current host name.
p891
sa(dp892
g4
I01
sg5
Vgetnameinfo
p893
sg7
L2L
sg148
Vgetnameinfo(sockaddr, flags) --> (host, port)\u000a\u000aGet host and port for a sockaddr.
p894
sa(dp895
g4
I01
sg5
Vgetprotobyname
p896
sg7
L2L
sg148
Vgetprotobyname(name) -> integer\u000a\u000aReturn the protocol number for the named protocol.  (Rarely used.)
p897
sa(dp898
g4
I01
sg5
Vgetservbyname
p899
sg7
L2L
sg148
Vgetservbyname(servicename[, protocolname]) -> integer\u000a\u000aReturn a port number from a service name and protocol name.\u000aThe optional protocol name, if given, should be 'tcp' or 'udp',\u000aotherwise any protocol will match.
p900
sa(dp901
g4
I01
sg5
Vgetservbyport
p902
sg7
L2L
sg148
Vgetservbyport(port[, protocolname]) -> string\u000a\u000aReturn the service name from a port number and protocol name.\u000aThe optional protocol name, if given, should be 'tcp' or 'udp',\u000aotherwise any protocol will match.
p903
sa(dp904
g4
I01
sg5
Vhas_ipv6
p905
sg7
L5L
sa(dp906
g1
(lp907
(dp908
g4
I01
sg5
g774
sg7
L5L
sa(dp909
g4
I01
sg5
g776
sg7
L5L
sa(dp910
g4
I01
sg5
g498
sg7
L5L
sa(dp911
g4
I01
sg5
g710
sg7
L5L
sa(dp912
g4
I01
sg5
g500
sg7
L2L
sg148
V__dir__() -> list\u000adefault dir() implementation
p913
sa(dp914
g4
I01
sg5
g503
sg7
L5L
sa(dp915
g4
I01
sg5
g505
sg7
L5L
sa(dp916
g4
I01
sg5
g507
sg7
L2L
sg148
Vdefault object formatter
p917
sa(dp918
g4
I01
sg5
g510
sg7
L5L
sa(dp919
g4
I01
sg5
g512
sg7
L5L
sa(dp920
g4
I01
sg5
g514
sg7
L5L
sa(dp921
g4
I01
sg5
g516
sg7
L5L
sa(dp922
g4
I01
sg5
g518
sg7
L5L
sa(dp923
g4
I01
sg5
g520
sg7
L5L
sa(dp924
g4
I01
sg5
g522
sg7
L5L
sa(dp925
g4
I01
sg5
g725
sg7
L5L
sa(dp926
g4
I01
sg5
g524
sg7
L5L
sa(dp927
g4
I01
sg5
g526
sg7
L2L
sg148
VCreate and return a new object.  See help(type) for accurate signature.
p928
sa(dp929
g4
I01
sg5
g529
sg7
L2L
sg148
Nsa(dp930
g4
I01
sg5
g532
sg7
L2L
sg148
Vhelper for pickle
p931
sa(dp932
g4
I01
sg5
g535
sg7
L5L
sa(dp933
g4
I01
sg5
g537
sg7
L5L
sa(dp934
g4
I01
sg5
g801
sg7
L2L
sg148
Nsa(dp935
g4
I01
sg5
g539
sg7
L2L
sg148
V__sizeof__() -> int\u000asize of object in memory, in bytes
p936
sa(dp937
g4
I01
sg5
g542
sg7
L5L
sa(dp938
g4
I01
sg5
g544
sg7
L2L
sg148
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p939
sa(dp940
g4
I01
sg5
g808
sg7
L5L
sa(dp941
g4
I01
sg5
g810
sg7
L5L
sa(dp942
g4
I01
sg5
g741
sg7
L5L
sa(dp943
g4
I01
sg5
g812
sg7
L5L
sa(dp944
g4
I01
sg5
g814
sg7
L5L
sa(dp945
g4
I01
sg5
g816
sg7
L5L
sa(dp946
g4
I01
sg5
g818
sg7
L5L
sa(dp947
g4
I01
sg5
g820
sg7
L5L
sa(dp948
g4
I01
sg5
g822
sg7
L5L
sa(dp949
g4
I01
sg5
g824
sg7
L2L
sg148
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p950
sasg4
I01
sg5
Vherror
p951
sg7
L3L
sg148
Nsa(dp952
g4
I01
sg5
Vhtonl
p953
sg7
L2L
sg148
Vhtonl(integer) -> integer\u000a\u000aConvert a 32-bit integer from host to network byte order.
p954
sa(dp955
g4
I01
sg5
Vhtons
p956
sg7
L2L
sg148
Vhtons(integer) -> integer\u000a\u000aConvert a 16-bit integer from host to network byte order.
p957
sa(dp958
g4
I01
sg5
Vif_indextoname
p959
sg7
L2L
sg148
Vif_indextoname(if_index)\u000a\u000aReturns the interface name corresponding to the interface index if_index.
p960
sa(dp961
g4
I01
sg5
Vif_nameindex
p962
sg7
L2L
sg148
Vif_nameindex()\u000a\u000aReturns a list of network interface information (index, name) tuples.
p963
sa(dp964
g4
I01
sg5
Vif_nametoindex
p965
sg7
L2L
sg148
Vif_nametoindex(if_name)\u000a\u000aReturns the interface index corresponding to the interface name if_name.
p966
sa(dp967
g4
I01
sg5
Vinet_aton
p968
sg7
L2L
sg148
Vinet_aton(string) -> bytes giving packed 32-bit IP representation\u000a\u000aConvert an IP address in string format (123.45.67.89) to the 32-bit packed\u000abinary format used in low-level network functions.
p969
sa(dp970
g4
I01
sg5
Vinet_ntoa
p971
sg7
L2L
sg148
Vinet_ntoa(packed_ip) -> ip_address_string\u000a\u000aConvert an IP address from 32-bit packed binary format to string format
p972
sa(dp973
g4
I01
sg5
Vinet_ntop
p974
sg7
L2L
sg148
Vinet_ntop(af, packed_ip) -> string formatted IP address\u000a\u000aConvert a packed IP address of the given family to string format.
p975
sa(dp976
g4
I01
sg5
Vinet_pton
p977
sg7
L2L
sg148
Vinet_pton(af, ip) -> packed IP address string\u000a\u000aConvert an IP address from string format to a packed string suitable\u000afor use with low-level network functions.
p978
sa(dp979
g4
I01
sg5
Vntohl
p980
sg7
L2L
sg148
Vntohl(integer) -> integer\u000a\u000aConvert a 32-bit integer from network to host byte order.
p981
sa(dp982
g4
I01
sg5
Vntohs
p983
sg7
L2L
sg148
Vntohs(integer) -> integer\u000a\u000aConvert a 16-bit integer from network to host byte order.
p984
sa(dp985
g4
I01
sg5
Vsetdefaulttimeout
p986
sg7
L2L
sg148
Vsetdefaulttimeout(timeout)\u000a\u000aSet the default timeout in seconds (float) for new socket objects.\u000aA value of None indicates that new socket objects have no timeout.\u000aWhen the socket module is first imported, the default is None.
p987
sa(dp988
g4
I01
sg5
Vsethostname
p989
sg7
L2L
sg148
Vsethostname(name)\u000a\u000aSets the hostname to name.
p990
sa(dp991
g1
(lp992
(dp993
g4
I01
sg5
g498
sg7
L5L
sa(dp994
g4
I01
sg5
g500
sg7
L2L
sg148
V__dir__() -> list\u000adefault dir() implementation
p995
sa(dp996
g4
I01
sg5
g503
sg7
L5L
sa(dp997
g4
I01
sg5
g505
sg7
L5L
sa(dp998
g4
I01
sg5
g507
sg7
L2L
sg148
Vdefault object formatter
p999
sa(dp1000
g4
I01
sg5
g510
sg7
L5L
sa(dp1001
g4
I01
sg5
g512
sg7
L5L
sa(dp1002
g4
I01
sg5
g514
sg7
L5L
sa(dp1003
g4
I01
sg5
g516
sg7
L5L
sa(dp1004
g4
I01
sg5
g518
sg7
L5L
sa(dp1005
g4
I01
sg5
g520
sg7
L5L
sa(dp1006
g4
I01
sg5
g522
sg7
L5L
sa(dp1007
g4
I01
sg5
g524
sg7
L5L
sa(dp1008
g4
I01
sg5
g526
sg7
L2L
sg148
VCreate and return a new object.  See help(type) for accurate signature.
p1009
sa(dp1010
g4
I01
sg5
g529
sg7
L2L
sg148
Vhelper for pickle
p1011
sa(dp1012
g4
I01
sg5
g532
sg7
L2L
sg148
Vhelper for pickle
p1013
sa(dp1014
g4
I01
sg5
g535
sg7
L5L
sa(dp1015
g4
I01
sg5
g537
sg7
L5L
sa(dp1016
g4
I01
sg5
g539
sg7
L2L
sg148
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1017
sa(dp1018
g4
I01
sg5
g542
sg7
L5L
sa(dp1019
g4
I01
sg5
g544
sg7
L2L
sg148
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1020
sa(dp1021
g4
I01
sg5
g547
sg7
L2L
sg148
V_accept() -> (integer, address info)\u000a\u000aWait for an incoming connection.  Return a new socket file descriptor\u000arepresenting the connection, and the address of the client.\u000aFor IP sockets, the address info is a pair (hostaddr, port).
p1022
sa(dp1023
g4
I01
sg5
g550
sg7
L2L
sg148
Vbind(address)\u000a\u000aBind the socket to a local address.  For IP sockets, the address is a\u000apair (host, port); the host must refer to the local host. For raw packet\u000asockets the address is a tuple (ifname, proto [,pkttype [,hatype]])
p1024
sa(dp1025
g4
I01
sg5
g553
sg7
L2L
sg148
Vclose()\u000a\u000aClose the socket.  It cannot be used after this call.
p1026
sa(dp1027
g4
I01
sg5
g556
sg7
L2L
sg148
Vconnect(address)\u000a\u000aConnect the socket to a remote address.  For IP sockets, the address\u000ais a pair (host, port).
p1028
sa(dp1029
g4
I01
sg5
g559
sg7
L2L
sg148
Vconnect_ex(address) -> errno\u000a\u000aThis is like connect(address), but returns an error code (the errno value)\u000ainstead of raising an exception when an error occurs.
p1030
sa(dp1031
g4
I01
sg5
g562
sg7
L2L
sg148
Vdetach()\u000a\u000aClose the socket object without closing the underlying file descriptor.\u000aThe object cannot be used after this call, but the file descriptor\u000acan be reused for other purposes.  The file descriptor is returned.
p1032
sa(dp1033
g4
I01
sg5
g565
sg7
L5L
sa(dp1034
g4
I01
sg5
g567
sg7
L2L
sg148
Vfileno() -> integer\u000a\u000aReturn the integer file descriptor of the socket.
p1035
sa(dp1036
g4
I01
sg5
g570
sg7
L2L
sg148
Vgetpeername() -> address info\u000a\u000aReturn the address of the remote endpoint.  For IP sockets, the address\u000ainfo is a pair (hostaddr, port).
p1037
sa(dp1038
g4
I01
sg5
g573
sg7
L2L
sg148
Vgetsockname() -> address info\u000a\u000aReturn the address of the local endpoint.  For IP sockets, the address\u000ainfo is a pair (hostaddr, port).
p1039
sa(dp1040
g4
I01
sg5
g576
sg7
L2L
sg148
Vgetsockopt(level, option[, buffersize]) -> value\u000a\u000aGet a socket option.  See the Unix manual for level and option.\u000aIf a nonzero buffersize argument is given, the return value is a\u000astring of that length; otherwise it is an integer.
p1041
sa(dp1042
g4
I01
sg5
g579
sg7
L2L
sg148
Vgettimeout() -> timeout\u000a\u000aReturns the timeout in seconds (float) associated with socket \u000aoperations. A timeout of None indicates that timeouts on socket \u000aoperations are disabled.
p1043
sa(dp1044
g4
I01
sg5
g582
sg7
L2L
sg148
Vlisten([backlog])\u000a\u000aEnable a server to accept connections.  If backlog is specified, it must be\u000aat least 0 (if it is lower, it is set to 0); it specifies the number of\u000aunaccepted connections that the system will allow before refusing new\u000aconnections. If not specified, a default reasonable value is chosen.
p1045
sa(dp1046
g4
I01
sg5
g585
sg7
L5L
sa(dp1047
g4
I01
sg5
g587
sg7
L2L
sg148
Vrecv(buffersize[, flags]) -> data\u000a\u000aReceive up to buffersize bytes from the socket.  For the optional flags\u000aargument, see the Unix manual.  When no data is available, block until\u000aat least one byte is available or until the remote end is closed.  When\u000athe remote end is closed and all data is read, return the empty string.
p1048
sa(dp1049
g4
I01
sg5
g590
sg7
L2L
sg148
Vrecv_into(buffer, [nbytes[, flags]]) -> nbytes_read\u000a\u000aA version of recv() that stores its data into a buffer rather than creating \u000aa new string.  Receive up to buffersize bytes from the socket.  If buffersize \u000ais not specified (or 0), receive up to the size available in the given buffer.\u000a\u000aSee recv() for documentation about the flags.
p1050
sa(dp1051
g4
I01
sg5
g593
sg7
L2L
sg148
Vrecvfrom(buffersize[, flags]) -> (data, address info)\u000a\u000aLike recv(buffersize, flags) but also return the sender's address info.
p1052
sa(dp1053
g4
I01
sg5
g596
sg7
L2L
sg148
Vrecvfrom_into(buffer[, nbytes[, flags]]) -> (nbytes, address info)\u000a\u000aLike recv_into(buffer[, nbytes[, flags]]) but also return the sender's address info.
p1054
sa(dp1055
g4
I01
sg5
g599
sg7
L2L
sg148
Vrecvmsg(bufsize[, ancbufsize[, flags]]) -> (data, ancdata, msg_flags, address)\u000a\u000aReceive normal data (up to bufsize bytes) and ancillary data from the\u000asocket.  The ancbufsize argument sets the size in bytes of the\u000ainternal buffer used to receive the ancillary data; it defaults to 0,\u000ameaning that no ancillary data will be received.  Appropriate buffer\u000asizes for ancillary data can be calculated using CMSG_SPACE() or\u000aCMSG_LEN(), and items which do not fit into the buffer might be\u000atruncated or discarded.  The flags argument defaults to 0 and has the\u000asame meaning as for recv().\u000a\u000aThe return value is a 4-tuple: (data, ancdata, msg_flags, address).\u000aThe data item is a bytes object holding the non-ancillary data\u000areceived.  The ancdata item is a list of zero or more tuples\u000a(cmsg_level, cmsg_type, cmsg_data) representing the ancillary data\u000a(control messages) received: cmsg_level and cmsg_type are integers\u000aspecifying the protocol level and protocol-specific type respectively,\u000aand cmsg_data is a bytes object holding the associated data.  The\u000amsg_flags item is the bitwise OR of various flags indicating\u000aconditions on the received message; see your system documentation for\u000adetails.  If the receiving socket is unconnected, address is the\u000aaddress of the sending socket, if available; otherwise, its value is\u000aunspecified.\u000a\u000aIf recvmsg() raises an exception after the system call returns, it\u000awill first attempt to close any file descriptors received via the\u000aSCM_RIGHTS mechanism.
p1056
sa(dp1057
g4
I01
sg5
g602
sg7
L2L
sg148
Vrecvmsg_into(buffers[, ancbufsize[, flags]]) -> (nbytes, ancdata, msg_flags, address)\u000a\u000aReceive normal data and ancillary data from the socket, scattering the\u000anon-ancillary data into a series of buffers.  The buffers argument\u000amust be an iterable of objects that export writable buffers\u000a(e.g. bytearray objects); these will be filled with successive chunks\u000aof the non-ancillary data until it has all been written or there are\u000ano more buffers.  The ancbufsize argument sets the size in bytes of\u000athe internal buffer used to receive the ancillary data; it defaults to\u000a0, meaning that no ancillary data will be received.  Appropriate\u000abuffer sizes for ancillary data can be calculated using CMSG_SPACE()\u000aor CMSG_LEN(), and items which do not fit into the buffer might be\u000atruncated or discarded.  The flags argument defaults to 0 and has the\u000asame meaning as for recv().\u000a\u000aThe return value is a 4-tuple: (nbytes, ancdata, msg_flags, address).\u000aThe nbytes item is the total number of bytes of non-ancillary data\u000awritten into the buffers.  The ancdata item is a list of zero or more\u000atuples (cmsg_level, cmsg_type, cmsg_data) representing the ancillary\u000adata (control messages) received: cmsg_level and cmsg_type are\u000aintegers specifying the protocol level and protocol-specific type\u000arespectively, and cmsg_data is a bytes object holding the associated\u000adata.  The msg_flags item is the bitwise OR of various flags\u000aindicating conditions on the received message; see your system\u000adocumentation for details.  If the receiving socket is unconnected,\u000aaddress is the address of the sending socket, if available; otherwise,\u000aits value is unspecified.\u000a\u000aIf recvmsg_into() raises an exception after the system call returns,\u000ait will first attempt to close any file descriptors received via the\u000aSCM_RIGHTS mechanism.
p1058
sa(dp1059
g4
I01
sg5
g605
sg7
L2L
sg148
Vsend(data[, flags]) -> count\u000a\u000aSend a data string to the socket.  For the optional flags\u000aargument, see the Unix manual.  Return the number of bytes\u000asent; this may be less than len(data) if the network is busy.
p1060
sa(dp1061
g4
I01
sg5
g608
sg7
L2L
sg148
Vsendall(data[, flags])\u000a\u000aSend a data string to the socket.  For the optional flags\u000aargument, see the Unix manual.  This calls send() repeatedly\u000auntil all data is sent.  If an error occurs, it's impossible\u000ato tell how much data has been sent.
p1062
sa(dp1063
g4
I01
sg5
g611
sg7
L2L
sg148
Vsendmsg(buffers[, ancdata[, flags[, address]]]) -> count\u000a\u000aSend normal and ancillary data to the socket, gathering the\u000anon-ancillary data from a series of buffers and concatenating it into\u000aa single message.  The buffers argument specifies the non-ancillary\u000adata as an iterable of bytes-like objects (e.g. bytes objects).\u000aThe ancdata argument specifies the ancillary data (control messages)\u000aas an iterable of zero or more tuples (cmsg_level, cmsg_type,\u000acmsg_data), where cmsg_level and cmsg_type are integers specifying the\u000aprotocol level and protocol-specific type respectively, and cmsg_data\u000ais a bytes-like object holding the associated data.  The flags\u000aargument defaults to 0 and has the same meaning as for send().  If\u000aaddress is supplied and not None, it sets a destination address for\u000athe message.  The return value is the number of bytes of non-ancillary\u000adata sent.
p1064
sa(dp1065
g4
I01
sg5
g614
sg7
L2L
sg148
Vsendto(data[, flags], address) -> count\u000a\u000aLike send(data, flags) but allows specifying the destination address.\u000aFor IP sockets, the address is a pair (hostaddr, port).
p1066
sa(dp1067
g4
I01
sg5
g617
sg7
L2L
sg148
Vsetblocking(flag)\u000a\u000aSet the socket to blocking (flag is true) or non-blocking (false).\u000asetblocking(True) is equivalent to settimeout(None);\u000asetblocking(False) is equivalent to settimeout(0.0).
p1068
sa(dp1069
g4
I01
sg5
g620
sg7
L2L
sg148
Vsetsockopt(level, option, value)\u000a\u000aSet a socket option.  See the Unix manual for level and option.\u000aThe value argument can either be an integer or a string.
p1070
sa(dp1071
g4
I01
sg5
g623
sg7
L2L
sg148
Vsettimeout(timeout)\u000a\u000aSet a timeout on socket operations.  'timeout' can be a float,\u000agiving in seconds, or None.  Setting a timeout of None disables\u000athe timeout feature and is equivalent to setblocking(1).\u000aSetting a timeout of zero is the same as setblocking(0).
p1072
sa(dp1073
g4
I01
sg5
g626
sg7
L2L
sg148
Vshutdown(flag)\u000a\u000aShut down the reading side of the socket (flag == SHUT_RD), the writing side\u000aof the socket (flag == SHUT_WR), or both ends (flag == SHUT_RDWR).
p1074
sa(dp1075
g4
I01
sg5
g629
sg7
L5L
sa(dp1076
g4
I01
sg5
g7
sg7
L5L
sasg4
I01
sg5
Vsocket
p1077
sg7
L3L
sg148
Vsocket(family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None) -> socket object\u000a\u000aOpen a socket of the given type.  The family argument specifies the\u000aaddress family; it defaults to AF_INET.  The type argument specifies\u000awhether this is a stream (SOCK_STREAM, this is the default)\u000aor datagram (SOCK_DGRAM) socket.  The protocol argument defaults to 0,\u000aspecifying the default protocol.  Keyword arguments are accepted.\u000aThe socket is created as non-inheritable.\u000a\u000aA socket object represents one endpoint of a network connection.\u000a\u000aMethods of socket objects (keyword arguments not allowed):\u000a\u000a_accept() -- accept connection, returning new socket fd and client address\u000abind(addr) -- bind the socket to a local address\u000aclose() -- close the socket\u000aconnect(addr) -- connect the socket to a remote address\u000aconnect_ex(addr) -- connect, return an error code instead of an exception\u000adup() -- return a new socket fd duplicated from fileno()\u000afileno() -- return underlying file descriptor\u000agetpeername() -- return remote address [*]\u000agetsockname() -- return local address\u000agetsockopt(level, optname[, buflen]) -- get socket options\u000agettimeout() -- return timeout or None\u000alisten([n]) -- start listening for incoming connections\u000arecv(buflen[, flags]) -- receive data\u000arecv_into(buffer[, nbytes[, flags]]) -- receive data (into a buffer)\u000arecvfrom(buflen[, flags]) -- receive data and sender's address\u000arecvfrom_into(buffer[, nbytes, [, flags])\u000a  -- receive data and sender's address (into a buffer)\u000asendall(data[, flags]) -- send all data\u000asend(data[, flags]) -- send data, may not send all of it\u000asendto(data[, flags], addr) -- send data to a given address\u000asetblocking(0 | 1) -- set or clear the blocking I/O flag\u000asetsockopt(level, optname, value) -- set socket options\u000asettimeout(None | float) -- set or clear the timeout\u000ashutdown(how) -- shut down traffic in one or both directions\u000aif_nameindex() -- return all network interface indices and names\u000aif_nametoindex(name) -- return the corresponding interface index\u000aif_indextoname(index) -- return the corresponding interface name\u000a\u000a [*] not available on all platforms!
p1078
sa(dp1079
g4
I01
sg5
Vsocketpair
p1080
sg7
L2L
sg148
Vsocketpair([family[, type [, proto]]]) -> (socket object, socket object)\u000a\u000aCreate a pair of socket objects from the sockets returned by the platform\u000asocketpair() function.\u000aThe arguments are the same as for socket() except the default family is\u000aAF_UNIX if defined on the platform; otherwise, the default is AF_INET.
p1081
sa(dp1082
g1
(lp1083
(dp1084
g4
I01
sg5
g774
sg7
L5L
sa(dp1085
g4
I01
sg5
g776
sg7
L5L
sa(dp1086
g4
I01
sg5
g498
sg7
L5L
sa(dp1087
g4
I01
sg5
g710
sg7
L5L
sa(dp1088
g4
I01
sg5
g500
sg7
L2L
sg148
V__dir__() -> list\u000adefault dir() implementation
p1089
sa(dp1090
g4
I01
sg5
g503
sg7
L5L
sa(dp1091
g4
I01
sg5
g505
sg7
L5L
sa(dp1092
g4
I01
sg5
g507
sg7
L2L
sg148
Vdefault object formatter
p1093
sa(dp1094
g4
I01
sg5
g510
sg7
L5L
sa(dp1095
g4
I01
sg5
g512
sg7
L5L
sa(dp1096
g4
I01
sg5
g514
sg7
L5L
sa(dp1097
g4
I01
sg5
g516
sg7
L5L
sa(dp1098
g4
I01
sg5
g518
sg7
L5L
sa(dp1099
g4
I01
sg5
g520
sg7
L5L
sa(dp1100
g4
I01
sg5
g522
sg7
L5L
sa(dp1101
g4
I01
sg5
g725
sg7
L5L
sa(dp1102
g4
I01
sg5
g524
sg7
L5L
sa(dp1103
g4
I01
sg5
g526
sg7
L2L
sg148
VCreate and return a new object.  See help(type) for accurate signature.
p1104
sa(dp1105
g4
I01
sg5
g529
sg7
L2L
sg148
Nsa(dp1106
g4
I01
sg5
g532
sg7
L2L
sg148
Vhelper for pickle
p1107
sa(dp1108
g4
I01
sg5
g535
sg7
L5L
sa(dp1109
g4
I01
sg5
g537
sg7
L5L
sa(dp1110
g4
I01
sg5
g801
sg7
L2L
sg148
Nsa(dp1111
g4
I01
sg5
g539
sg7
L2L
sg148
V__sizeof__() -> int\u000asize of object in memory, in bytes
p1112
sa(dp1113
g4
I01
sg5
g542
sg7
L5L
sa(dp1114
g4
I01
sg5
g544
sg7
L2L
sg148
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p1115
sa(dp1116
g4
I01
sg5
g808
sg7
L5L
sa(dp1117
g4
I01
sg5
g810
sg7
L5L
sa(dp1118
g4
I01
sg5
g741
sg7
L5L
sa(dp1119
g4
I01
sg5
g812
sg7
L5L
sa(dp1120
g4
I01
sg5
g814
sg7
L5L
sa(dp1121
g4
I01
sg5
g816
sg7
L5L
sa(dp1122
g4
I01
sg5
g818
sg7
L5L
sa(dp1123
g4
I01
sg5
g820
sg7
L5L
sa(dp1124
g4
I01
sg5
g822
sg7
L5L
sa(dp1125
g4
I01
sg5
g824
sg7
L2L
sg148
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p1126
sasg4
I01
sg5
g629
sg7
L3L
sg148
Nsasg4
I01
sg5
V_socket
p1127
sg148
VImplementation module for socket operations.\u000a\u000aSee the socket module for documentation.
p1128
s.