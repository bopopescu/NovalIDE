(dp0
S'doc'
p1
NsS'is_builtin'
p2
I01
sS'childs'
p3
(lp4
(dp5
g1
S'logreader(filename) --> log-iterator\nCreate a log-reader for the timing information file.'
p6
sg2
I01
sg3
(lp7
(dp8
g2
I01
sS'type'
p9
I5
sS'name'
p10
S'__delattr__'
p11
sa(dp12
g2
I01
sg9
I5
sg10
S'__doc__'
p13
sa(dp14
g1
S'default object formatter'
p15
sg2
I01
sg9
I2
sg10
S'__format__'
p16
sa(dp17
g2
I01
sg9
I5
sg10
S'__getattribute__'
p18
sa(dp19
g2
I01
sg9
I5
sg10
S'__getitem__'
p20
sa(dp21
g2
I01
sg9
I5
sg10
S'__hash__'
p22
sa(dp23
g2
I01
sg9
I5
sg10
S'__init__'
p24
sa(dp25
g2
I01
sg9
I5
sg10
S'__iter__'
p26
sa(dp27
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p28
sg2
I01
sg9
I2
sg10
S'__new__'
p29
sa(dp30
g1
S'helper for pickle'
p31
sg2
I01
sg9
I2
sg10
S'__reduce__'
p32
sa(dp33
g1
S'helper for pickle'
p34
sg2
I01
sg9
I2
sg10
S'__reduce_ex__'
p35
sa(dp36
g2
I01
sg9
I5
sg10
S'__repr__'
p37
sa(dp38
g2
I01
sg9
I5
sg10
S'__setattr__'
p39
sa(dp40
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p41
sg2
I01
sg9
I2
sg10
S'__sizeof__'
p42
sa(dp43
g2
I01
sg9
I5
sg10
S'__str__'
p44
sa(dp45
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p46
sg2
I01
sg9
I2
sg10
S'__subclasshook__'
p47
sa(dp48
g1
S'close()\nClose the log file, preventing additional records from being read.'
p49
sg2
I01
sg9
I2
sg10
S'close'
p50
sa(dp51
g2
I01
sg9
I5
sg10
S'closed'
p52
sa(dp53
g1
S'fileno() -> file descriptor\nReturns the file descriptor for the log file, if open.\nRaises ValueError if the log file is closed.'
p54
sg2
I01
sg9
I2
sg10
S'fileno'
p55
sa(dp56
g2
I01
sg9
I5
sg10
S'info'
p57
sa(dp58
g2
I01
sg9
I5
sg10
S'next'
p59
sasg9
I3
sg10
S'LogReaderType'
p60
sa(dp61
g1
Nsg2
I01
sg3
(lp62
(dp63
g2
I01
sg9
I5
sg10
g11
sa(dp64
g2
I01
sg9
I5
sg10
S'__dict__'
p65
sa(dp66
g2
I01
sg9
I5
sg10
g13
sa(dp67
g1
S'default object formatter'
p68
sg2
I01
sg9
I2
sg10
g16
sa(dp69
g2
I01
sg9
I5
sg10
g18
sa(dp70
g2
I01
sg9
I5
sg10
g20
sa(dp71
g2
I01
sg9
I5
sg10
S'__getslice__'
p72
sa(dp73
g2
I01
sg9
I5
sg10
g22
sa(dp74
g2
I01
sg9
I5
sg10
g24
sa(dp75
g2
I01
sg9
I5
sg10
S'__module__'
p76
sa(dp77
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p78
sg2
I01
sg9
I2
sg10
g29
sa(dp79
g1
Nsg2
I01
sg9
I2
sg10
g32
sa(dp80
g1
S'helper for pickle'
p81
sg2
I01
sg9
I2
sg10
g35
sa(dp82
g2
I01
sg9
I5
sg10
g37
sa(dp83
g2
I01
sg9
I5
sg10
g39
sa(dp84
g1
Nsg2
I01
sg9
I2
sg10
S'__setstate__'
p85
sa(dp86
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p87
sg2
I01
sg9
I2
sg10
g42
sa(dp88
g2
I01
sg9
I5
sg10
g44
sa(dp89
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p90
sg2
I01
sg9
I2
sg10
g47
sa(dp91
g1
Nsg2
I01
sg9
I2
sg10
S'__unicode__'
p92
sa(dp93
g2
I01
sg9
I5
sg10
S'__weakref__'
p94
sa(dp95
g2
I01
sg9
I5
sg10
S'args'
p96
sa(dp97
g2
I01
sg9
I5
sg10
S'message'
p98
sasg9
I3
sg10
S'ProfilerError'
p99
sa(dp100
g1
S'High-performance profiler object.\n\nMethods:\n\nclose():      Stop the profiler and close the log files.\nfileno():     Returns the file descriptor of the log file.\nruncall():    Run a single function call with profiling enabled.\nruncode():    Execute a code object with profiling enabled.\nstart():      Install the profiler and return.\nstop():       Remove the profiler.\n\nAttributes (read-only):\n\nclosed:       True if the profiler has already been closed.\nframetimings: True if ENTER/EXIT events collect timing information.\nlineevents:   True if line events are reported to the profiler.\nlinetimings:  True if line events collect timing information.'
p101
sg2
I01
sg3
(lp102
(dp103
g2
I01
sg9
I5
sg10
g11
sa(dp104
g2
I01
sg9
I5
sg10
g13
sa(dp105
g1
S'default object formatter'
p106
sg2
I01
sg9
I2
sg10
g16
sa(dp107
g2
I01
sg9
I5
sg10
g18
sa(dp108
g2
I01
sg9
I5
sg10
g22
sa(dp109
g2
I01
sg9
I5
sg10
g24
sa(dp110
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p111
sg2
I01
sg9
I2
sg10
g29
sa(dp112
g1
S'helper for pickle'
p113
sg2
I01
sg9
I2
sg10
g32
sa(dp114
g1
S'helper for pickle'
p115
sg2
I01
sg9
I2
sg10
g35
sa(dp116
g2
I01
sg9
I5
sg10
g37
sa(dp117
g2
I01
sg9
I5
sg10
g39
sa(dp118
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p119
sg2
I01
sg9
I2
sg10
g42
sa(dp120
g2
I01
sg9
I5
sg10
g44
sa(dp121
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p122
sg2
I01
sg9
I2
sg10
g47
sa(dp123
g1
S'addinfo(key, value)\nInsert an ADD_INFO record into the log.'
p124
sg2
I01
sg9
I2
sg10
S'addinfo'
p125
sa(dp126
g1
S'close()\nShut down this profiler and close the log files, even if its active.'
p127
sg2
I01
sg9
I2
sg10
g50
sa(dp128
g2
I01
sg9
I5
sg10
g52
sa(dp129
g1
S'fileno() -> file descriptor\nReturns the file descriptor for the log file, if open.\nRaises ValueError if the log file is closed.'
p130
sg2
I01
sg9
I2
sg10
g55
sa(dp131
g2
I01
sg9
I5
sg10
S'frametimings'
p132
sa(dp133
g2
I01
sg9
I5
sg10
S'lineevents'
p134
sa(dp135
g2
I01
sg9
I5
sg10
S'linetimings'
p136
sa(dp137
g1
S'runcall(callable[, args[, kw]]) -> callable()\nProfile a specific function call, returning the result of that call.'
p138
sg2
I01
sg9
I2
sg10
S'runcall'
p139
sa(dp140
g1
S'runcode(code, globals[, locals])\nExecute a code object while collecting profile data.  If locals is\nomitted, globals is used for the locals as well.'
p141
sg2
I01
sg9
I2
sg10
S'runcode'
p142
sa(dp143
g1
S'start()\nInstall this profiler for the current thread.'
p144
sg2
I01
sg9
I2
sg10
S'start'
p145
sa(dp146
g1
S'stop()\nRemove this profiler from the current thread.'
p147
sg2
I01
sg9
I2
sg10
S'stop'
p148
sasg9
I3
sg10
S'ProfilerType'
p149
sa(dp150
g2
I01
sg9
I5
sg10
S'WHAT_ADD_INFO'
p151
sa(dp152
g2
I01
sg9
I5
sg10
S'WHAT_DEFINE_FILE'
p153
sa(dp154
g2
I01
sg9
I5
sg10
S'WHAT_DEFINE_FUNC'
p155
sa(dp156
g2
I01
sg9
I5
sg10
S'WHAT_ENTER'
p157
sa(dp158
g2
I01
sg9
I5
sg10
S'WHAT_EXIT'
p159
sa(dp160
g2
I01
sg9
I5
sg10
S'WHAT_LINENO'
p161
sa(dp162
g2
I01
sg9
I5
sg10
S'WHAT_LINE_TIMES'
p163
sa(dp164
g2
I01
sg9
I5
sg10
S'WHAT_OTHER'
p165
sa(dp166
g2
I01
sg9
I5
sg10
g13
sa(dp167
g2
I01
sg9
I5
sg10
S'__name__'
p168
sa(dp169
g2
I01
sg9
I5
sg10
S'__package__'
p170
sa(dp171
g2
I01
sg9
I5
sg10
S'__version__'
p172
sa(dp173
g1
S"coverage(logfilename) -> profiler\nReturns a profiler that doesn't collect any timing information, which is\nuseful in building a coverage analysis tool."
p174
sg2
I01
sg9
I2
sg10
S'coverage'
p175
sa(dp176
g1
S'logreader(filename) --> log-iterator\nCreate a log-reader for the timing information file.'
p177
sg2
I01
sg9
I2
sg10
S'logreader'
p178
sa(dp179
g1
S'profiler(logfilename[, lineevents[, linetimes]]) -> profiler\nCreate a new profiler object.'
p180
sg2
I01
sg9
I2
sg10
S'profiler'
p181
sa(dp182
g1
S'resolution() -> (performance-counter-ticks, update-frequency)\nReturn the resolution of the timer provided by the QueryPerformanceCounter()\nfunction.  The first value is the smallest observed change, and the second\nis the result of QueryPerformanceFrequency().'
p183
sg2
I01
sg9
I2
sg10
S'resolution'
p184
sasg9
I1
sg10
S'_hotshot'
p185
s.