(dp0
S'doc'
p1
S"Built-in functions, exceptions, and other objects.\n\nNoteworthy: None is the `nil' object; Ellipsis represents `...' in slices."
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'Base class for arithmetic errors.'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__delattr__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__dict__'
p14
sa(dp15
g3
I01
sg10
I5
sg11
S'__doc__'
p16
sa(dp17
g1
S'default object formatter'
p18
sg3
I01
sg10
I2
sg11
S'__format__'
p19
sa(dp20
g3
I01
sg10
I5
sg11
S'__getattribute__'
p21
sa(dp22
g3
I01
sg10
I5
sg11
S'__getitem__'
p23
sa(dp24
g3
I01
sg10
I5
sg11
S'__getslice__'
p25
sa(dp26
g3
I01
sg10
I5
sg11
S'__hash__'
p27
sa(dp28
g3
I01
sg10
I5
sg11
S'__init__'
p29
sa(dp30
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p31
sg3
I01
sg10
I2
sg11
S'__new__'
p32
sa(dp33
g1
Nsg3
I01
sg10
I2
sg11
S'__reduce__'
p34
sa(dp35
g1
S'helper for pickle'
p36
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p37
sa(dp38
g3
I01
sg10
I5
sg11
S'__repr__'
p39
sa(dp40
g3
I01
sg10
I5
sg11
S'__setattr__'
p41
sa(dp42
g1
Nsg3
I01
sg10
I2
sg11
S'__setstate__'
p43
sa(dp44
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p45
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p46
sa(dp47
g3
I01
sg10
I5
sg11
S'__str__'
p48
sa(dp49
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p50
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p51
sa(dp52
g1
Nsg3
I01
sg10
I2
sg11
S'__unicode__'
p53
sa(dp54
g3
I01
sg10
I5
sg11
S'args'
p55
sa(dp56
g3
I01
sg10
I5
sg11
S'message'
p57
sasg10
I3
sg11
S'ArithmeticError'
p58
sa(dp59
g1
S'Assertion failed.'
p60
sg3
I01
sg4
(lp61
(dp62
g3
I01
sg10
I5
sg11
g12
sa(dp63
g3
I01
sg10
I5
sg11
g14
sa(dp64
g3
I01
sg10
I5
sg11
g16
sa(dp65
g1
S'default object formatter'
p66
sg3
I01
sg10
I2
sg11
g19
sa(dp67
g3
I01
sg10
I5
sg11
g21
sa(dp68
g3
I01
sg10
I5
sg11
g23
sa(dp69
g3
I01
sg10
I5
sg11
g25
sa(dp70
g3
I01
sg10
I5
sg11
g27
sa(dp71
g3
I01
sg10
I5
sg11
g29
sa(dp72
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p73
sg3
I01
sg10
I2
sg11
g32
sa(dp74
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp75
g1
S'helper for pickle'
p76
sg3
I01
sg10
I2
sg11
g37
sa(dp77
g3
I01
sg10
I5
sg11
g39
sa(dp78
g3
I01
sg10
I5
sg11
g41
sa(dp79
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp80
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p81
sg3
I01
sg10
I2
sg11
g46
sa(dp82
g3
I01
sg10
I5
sg11
g48
sa(dp83
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p84
sg3
I01
sg10
I2
sg11
g51
sa(dp85
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp86
g3
I01
sg10
I5
sg11
g55
sa(dp87
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'AssertionError'
p88
sa(dp89
g1
S'Attribute not found.'
p90
sg3
I01
sg4
(lp91
(dp92
g3
I01
sg10
I5
sg11
g12
sa(dp93
g3
I01
sg10
I5
sg11
g14
sa(dp94
g3
I01
sg10
I5
sg11
g16
sa(dp95
g1
S'default object formatter'
p96
sg3
I01
sg10
I2
sg11
g19
sa(dp97
g3
I01
sg10
I5
sg11
g21
sa(dp98
g3
I01
sg10
I5
sg11
g23
sa(dp99
g3
I01
sg10
I5
sg11
g25
sa(dp100
g3
I01
sg10
I5
sg11
g27
sa(dp101
g3
I01
sg10
I5
sg11
g29
sa(dp102
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p103
sg3
I01
sg10
I2
sg11
g32
sa(dp104
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp105
g1
S'helper for pickle'
p106
sg3
I01
sg10
I2
sg11
g37
sa(dp107
g3
I01
sg10
I5
sg11
g39
sa(dp108
g3
I01
sg10
I5
sg11
g41
sa(dp109
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp110
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p111
sg3
I01
sg10
I2
sg11
g46
sa(dp112
g3
I01
sg10
I5
sg11
g48
sa(dp113
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p114
sg3
I01
sg10
I2
sg11
g51
sa(dp115
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp116
g3
I01
sg10
I5
sg11
g55
sa(dp117
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'AttributeError'
p118
sa(dp119
g1
S'Common base class for all exceptions'
p120
sg3
I01
sg4
(lp121
(dp122
g3
I01
sg10
I5
sg11
g12
sa(dp123
g3
I01
sg10
I5
sg11
g14
sa(dp124
g3
I01
sg10
I5
sg11
g16
sa(dp125
g1
S'default object formatter'
p126
sg3
I01
sg10
I2
sg11
g19
sa(dp127
g3
I01
sg10
I5
sg11
g21
sa(dp128
g3
I01
sg10
I5
sg11
g23
sa(dp129
g3
I01
sg10
I5
sg11
g25
sa(dp130
g3
I01
sg10
I5
sg11
g27
sa(dp131
g3
I01
sg10
I5
sg11
g29
sa(dp132
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p133
sg3
I01
sg10
I2
sg11
g32
sa(dp134
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp135
g1
S'helper for pickle'
p136
sg3
I01
sg10
I2
sg11
g37
sa(dp137
g3
I01
sg10
I5
sg11
g39
sa(dp138
g3
I01
sg10
I5
sg11
g41
sa(dp139
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp140
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p141
sg3
I01
sg10
I2
sg11
g46
sa(dp142
g3
I01
sg10
I5
sg11
g48
sa(dp143
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p144
sg3
I01
sg10
I2
sg11
g51
sa(dp145
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp146
g3
I01
sg10
I5
sg11
g55
sa(dp147
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'BaseException'
p148
sa(dp149
g1
S'Buffer error.'
p150
sg3
I01
sg4
(lp151
(dp152
g3
I01
sg10
I5
sg11
g12
sa(dp153
g3
I01
sg10
I5
sg11
g14
sa(dp154
g3
I01
sg10
I5
sg11
g16
sa(dp155
g1
S'default object formatter'
p156
sg3
I01
sg10
I2
sg11
g19
sa(dp157
g3
I01
sg10
I5
sg11
g21
sa(dp158
g3
I01
sg10
I5
sg11
g23
sa(dp159
g3
I01
sg10
I5
sg11
g25
sa(dp160
g3
I01
sg10
I5
sg11
g27
sa(dp161
g3
I01
sg10
I5
sg11
g29
sa(dp162
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p163
sg3
I01
sg10
I2
sg11
g32
sa(dp164
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp165
g1
S'helper for pickle'
p166
sg3
I01
sg10
I2
sg11
g37
sa(dp167
g3
I01
sg10
I5
sg11
g39
sa(dp168
g3
I01
sg10
I5
sg11
g41
sa(dp169
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp170
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p171
sg3
I01
sg10
I2
sg11
g46
sa(dp172
g3
I01
sg10
I5
sg11
g48
sa(dp173
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p174
sg3
I01
sg10
I2
sg11
g51
sa(dp175
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp176
g3
I01
sg10
I5
sg11
g55
sa(dp177
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'BufferError'
p178
sa(dp179
g1
S'Base class for warnings about bytes and buffer related problems, mostly\nrelated to conversion from str or comparing to str.'
p180
sg3
I01
sg4
(lp181
(dp182
g3
I01
sg10
I5
sg11
g12
sa(dp183
g3
I01
sg10
I5
sg11
g14
sa(dp184
g3
I01
sg10
I5
sg11
g16
sa(dp185
g1
S'default object formatter'
p186
sg3
I01
sg10
I2
sg11
g19
sa(dp187
g3
I01
sg10
I5
sg11
g21
sa(dp188
g3
I01
sg10
I5
sg11
g23
sa(dp189
g3
I01
sg10
I5
sg11
g25
sa(dp190
g3
I01
sg10
I5
sg11
g27
sa(dp191
g3
I01
sg10
I5
sg11
g29
sa(dp192
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p193
sg3
I01
sg10
I2
sg11
g32
sa(dp194
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp195
g1
S'helper for pickle'
p196
sg3
I01
sg10
I2
sg11
g37
sa(dp197
g3
I01
sg10
I5
sg11
g39
sa(dp198
g3
I01
sg10
I5
sg11
g41
sa(dp199
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp200
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p201
sg3
I01
sg10
I2
sg11
g46
sa(dp202
g3
I01
sg10
I5
sg11
g48
sa(dp203
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p204
sg3
I01
sg10
I2
sg11
g51
sa(dp205
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp206
g3
I01
sg10
I5
sg11
g55
sa(dp207
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'BytesWarning'
p208
sa(dp209
g1
S'Base class for warnings about deprecated features.'
p210
sg3
I01
sg4
(lp211
(dp212
g3
I01
sg10
I5
sg11
g12
sa(dp213
g3
I01
sg10
I5
sg11
g14
sa(dp214
g3
I01
sg10
I5
sg11
g16
sa(dp215
g1
S'default object formatter'
p216
sg3
I01
sg10
I2
sg11
g19
sa(dp217
g3
I01
sg10
I5
sg11
g21
sa(dp218
g3
I01
sg10
I5
sg11
g23
sa(dp219
g3
I01
sg10
I5
sg11
g25
sa(dp220
g3
I01
sg10
I5
sg11
g27
sa(dp221
g3
I01
sg10
I5
sg11
g29
sa(dp222
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p223
sg3
I01
sg10
I2
sg11
g32
sa(dp224
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp225
g1
S'helper for pickle'
p226
sg3
I01
sg10
I2
sg11
g37
sa(dp227
g3
I01
sg10
I5
sg11
g39
sa(dp228
g3
I01
sg10
I5
sg11
g41
sa(dp229
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp230
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p231
sg3
I01
sg10
I2
sg11
g46
sa(dp232
g3
I01
sg10
I5
sg11
g48
sa(dp233
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p234
sg3
I01
sg10
I2
sg11
g51
sa(dp235
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp236
g3
I01
sg10
I5
sg11
g55
sa(dp237
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'DeprecationWarning'
p238
sa(dp239
g1
S'Read beyond end of file.'
p240
sg3
I01
sg4
(lp241
(dp242
g3
I01
sg10
I5
sg11
g12
sa(dp243
g3
I01
sg10
I5
sg11
g14
sa(dp244
g3
I01
sg10
I5
sg11
g16
sa(dp245
g1
S'default object formatter'
p246
sg3
I01
sg10
I2
sg11
g19
sa(dp247
g3
I01
sg10
I5
sg11
g21
sa(dp248
g3
I01
sg10
I5
sg11
g23
sa(dp249
g3
I01
sg10
I5
sg11
g25
sa(dp250
g3
I01
sg10
I5
sg11
g27
sa(dp251
g3
I01
sg10
I5
sg11
g29
sa(dp252
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p253
sg3
I01
sg10
I2
sg11
g32
sa(dp254
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp255
g1
S'helper for pickle'
p256
sg3
I01
sg10
I2
sg11
g37
sa(dp257
g3
I01
sg10
I5
sg11
g39
sa(dp258
g3
I01
sg10
I5
sg11
g41
sa(dp259
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp260
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p261
sg3
I01
sg10
I2
sg11
g46
sa(dp262
g3
I01
sg10
I5
sg11
g48
sa(dp263
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p264
sg3
I01
sg10
I2
sg11
g51
sa(dp265
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp266
g3
I01
sg10
I5
sg11
g55
sa(dp267
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'EOFError'
p268
sa(dp269
g3
I01
sg10
I5
sg11
S'Ellipsis'
p270
sa(dp271
g1
S'Base class for I/O related errors.'
p272
sg3
I01
sg4
(lp273
(dp274
g3
I01
sg10
I5
sg11
g12
sa(dp275
g3
I01
sg10
I5
sg11
g14
sa(dp276
g3
I01
sg10
I5
sg11
g16
sa(dp277
g1
S'default object formatter'
p278
sg3
I01
sg10
I2
sg11
g19
sa(dp279
g3
I01
sg10
I5
sg11
g21
sa(dp280
g3
I01
sg10
I5
sg11
g23
sa(dp281
g3
I01
sg10
I5
sg11
g25
sa(dp282
g3
I01
sg10
I5
sg11
g27
sa(dp283
g3
I01
sg10
I5
sg11
g29
sa(dp284
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p285
sg3
I01
sg10
I2
sg11
g32
sa(dp286
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp287
g1
S'helper for pickle'
p288
sg3
I01
sg10
I2
sg11
g37
sa(dp289
g3
I01
sg10
I5
sg11
g39
sa(dp290
g3
I01
sg10
I5
sg11
g41
sa(dp291
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp292
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p293
sg3
I01
sg10
I2
sg11
g46
sa(dp294
g3
I01
sg10
I5
sg11
g48
sa(dp295
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p296
sg3
I01
sg10
I2
sg11
g51
sa(dp297
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp298
g3
I01
sg10
I5
sg11
g55
sa(dp299
g3
I01
sg10
I5
sg11
S'errno'
p300
sa(dp301
g3
I01
sg10
I5
sg11
S'filename'
p302
sa(dp303
g3
I01
sg10
I5
sg11
g57
sa(dp304
g3
I01
sg10
I5
sg11
S'strerror'
p305
sasg10
I3
sg11
S'EnvironmentError'
p306
sa(dp307
g1
S'Common base class for all non-exit exceptions.'
p308
sg3
I01
sg4
(lp309
(dp310
g3
I01
sg10
I5
sg11
g12
sa(dp311
g3
I01
sg10
I5
sg11
g14
sa(dp312
g3
I01
sg10
I5
sg11
g16
sa(dp313
g1
S'default object formatter'
p314
sg3
I01
sg10
I2
sg11
g19
sa(dp315
g3
I01
sg10
I5
sg11
g21
sa(dp316
g3
I01
sg10
I5
sg11
g23
sa(dp317
g3
I01
sg10
I5
sg11
g25
sa(dp318
g3
I01
sg10
I5
sg11
g27
sa(dp319
g3
I01
sg10
I5
sg11
g29
sa(dp320
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p321
sg3
I01
sg10
I2
sg11
g32
sa(dp322
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp323
g1
S'helper for pickle'
p324
sg3
I01
sg10
I2
sg11
g37
sa(dp325
g3
I01
sg10
I5
sg11
g39
sa(dp326
g3
I01
sg10
I5
sg11
g41
sa(dp327
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp328
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p329
sg3
I01
sg10
I2
sg11
g46
sa(dp330
g3
I01
sg10
I5
sg11
g48
sa(dp331
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p332
sg3
I01
sg10
I2
sg11
g51
sa(dp333
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp334
g3
I01
sg10
I5
sg11
g55
sa(dp335
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'Exception'
p336
sa(dp337
g3
I01
sg10
I5
sg11
S'False'
p338
sa(dp339
g1
S'Floating point operation failed.'
p340
sg3
I01
sg4
(lp341
(dp342
g3
I01
sg10
I5
sg11
g12
sa(dp343
g3
I01
sg10
I5
sg11
g14
sa(dp344
g3
I01
sg10
I5
sg11
g16
sa(dp345
g1
S'default object formatter'
p346
sg3
I01
sg10
I2
sg11
g19
sa(dp347
g3
I01
sg10
I5
sg11
g21
sa(dp348
g3
I01
sg10
I5
sg11
g23
sa(dp349
g3
I01
sg10
I5
sg11
g25
sa(dp350
g3
I01
sg10
I5
sg11
g27
sa(dp351
g3
I01
sg10
I5
sg11
g29
sa(dp352
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p353
sg3
I01
sg10
I2
sg11
g32
sa(dp354
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp355
g1
S'helper for pickle'
p356
sg3
I01
sg10
I2
sg11
g37
sa(dp357
g3
I01
sg10
I5
sg11
g39
sa(dp358
g3
I01
sg10
I5
sg11
g41
sa(dp359
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp360
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p361
sg3
I01
sg10
I2
sg11
g46
sa(dp362
g3
I01
sg10
I5
sg11
g48
sa(dp363
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p364
sg3
I01
sg10
I2
sg11
g51
sa(dp365
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp366
g3
I01
sg10
I5
sg11
g55
sa(dp367
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'FloatingPointError'
p368
sa(dp369
g1
S'Base class for warnings about constructs that will change semantically\nin the future.'
p370
sg3
I01
sg4
(lp371
(dp372
g3
I01
sg10
I5
sg11
g12
sa(dp373
g3
I01
sg10
I5
sg11
g14
sa(dp374
g3
I01
sg10
I5
sg11
g16
sa(dp375
g1
S'default object formatter'
p376
sg3
I01
sg10
I2
sg11
g19
sa(dp377
g3
I01
sg10
I5
sg11
g21
sa(dp378
g3
I01
sg10
I5
sg11
g23
sa(dp379
g3
I01
sg10
I5
sg11
g25
sa(dp380
g3
I01
sg10
I5
sg11
g27
sa(dp381
g3
I01
sg10
I5
sg11
g29
sa(dp382
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p383
sg3
I01
sg10
I2
sg11
g32
sa(dp384
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp385
g1
S'helper for pickle'
p386
sg3
I01
sg10
I2
sg11
g37
sa(dp387
g3
I01
sg10
I5
sg11
g39
sa(dp388
g3
I01
sg10
I5
sg11
g41
sa(dp389
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp390
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p391
sg3
I01
sg10
I2
sg11
g46
sa(dp392
g3
I01
sg10
I5
sg11
g48
sa(dp393
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p394
sg3
I01
sg10
I2
sg11
g51
sa(dp395
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp396
g3
I01
sg10
I5
sg11
g55
sa(dp397
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'FutureWarning'
p398
sa(dp399
g1
S'Request that a generator exit.'
p400
sg3
I01
sg4
(lp401
(dp402
g3
I01
sg10
I5
sg11
g12
sa(dp403
g3
I01
sg10
I5
sg11
g14
sa(dp404
g3
I01
sg10
I5
sg11
g16
sa(dp405
g1
S'default object formatter'
p406
sg3
I01
sg10
I2
sg11
g19
sa(dp407
g3
I01
sg10
I5
sg11
g21
sa(dp408
g3
I01
sg10
I5
sg11
g23
sa(dp409
g3
I01
sg10
I5
sg11
g25
sa(dp410
g3
I01
sg10
I5
sg11
g27
sa(dp411
g3
I01
sg10
I5
sg11
g29
sa(dp412
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p413
sg3
I01
sg10
I2
sg11
g32
sa(dp414
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp415
g1
S'helper for pickle'
p416
sg3
I01
sg10
I2
sg11
g37
sa(dp417
g3
I01
sg10
I5
sg11
g39
sa(dp418
g3
I01
sg10
I5
sg11
g41
sa(dp419
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp420
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p421
sg3
I01
sg10
I2
sg11
g46
sa(dp422
g3
I01
sg10
I5
sg11
g48
sa(dp423
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p424
sg3
I01
sg10
I2
sg11
g51
sa(dp425
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp426
g3
I01
sg10
I5
sg11
g55
sa(dp427
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'GeneratorExit'
p428
sa(dp429
g1
S'I/O operation failed.'
p430
sg3
I01
sg4
(lp431
(dp432
g3
I01
sg10
I5
sg11
g12
sa(dp433
g3
I01
sg10
I5
sg11
g14
sa(dp434
g3
I01
sg10
I5
sg11
g16
sa(dp435
g1
S'default object formatter'
p436
sg3
I01
sg10
I2
sg11
g19
sa(dp437
g3
I01
sg10
I5
sg11
g21
sa(dp438
g3
I01
sg10
I5
sg11
g23
sa(dp439
g3
I01
sg10
I5
sg11
g25
sa(dp440
g3
I01
sg10
I5
sg11
g27
sa(dp441
g3
I01
sg10
I5
sg11
g29
sa(dp442
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p443
sg3
I01
sg10
I2
sg11
g32
sa(dp444
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp445
g1
S'helper for pickle'
p446
sg3
I01
sg10
I2
sg11
g37
sa(dp447
g3
I01
sg10
I5
sg11
g39
sa(dp448
g3
I01
sg10
I5
sg11
g41
sa(dp449
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp450
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p451
sg3
I01
sg10
I2
sg11
g46
sa(dp452
g3
I01
sg10
I5
sg11
g48
sa(dp453
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p454
sg3
I01
sg10
I2
sg11
g51
sa(dp455
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp456
g3
I01
sg10
I5
sg11
g55
sa(dp457
g3
I01
sg10
I5
sg11
g300
sa(dp458
g3
I01
sg10
I5
sg11
g302
sa(dp459
g3
I01
sg10
I5
sg11
g57
sa(dp460
g3
I01
sg10
I5
sg11
g305
sasg10
I3
sg11
S'IOError'
p461
sa(dp462
g1
S"Import can't find module, or can't find name in module."
p463
sg3
I01
sg4
(lp464
(dp465
g3
I01
sg10
I5
sg11
g12
sa(dp466
g3
I01
sg10
I5
sg11
g14
sa(dp467
g3
I01
sg10
I5
sg11
g16
sa(dp468
g1
S'default object formatter'
p469
sg3
I01
sg10
I2
sg11
g19
sa(dp470
g3
I01
sg10
I5
sg11
g21
sa(dp471
g3
I01
sg10
I5
sg11
g23
sa(dp472
g3
I01
sg10
I5
sg11
g25
sa(dp473
g3
I01
sg10
I5
sg11
g27
sa(dp474
g3
I01
sg10
I5
sg11
g29
sa(dp475
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p476
sg3
I01
sg10
I2
sg11
g32
sa(dp477
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp478
g1
S'helper for pickle'
p479
sg3
I01
sg10
I2
sg11
g37
sa(dp480
g3
I01
sg10
I5
sg11
g39
sa(dp481
g3
I01
sg10
I5
sg11
g41
sa(dp482
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp483
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p484
sg3
I01
sg10
I2
sg11
g46
sa(dp485
g3
I01
sg10
I5
sg11
g48
sa(dp486
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p487
sg3
I01
sg10
I2
sg11
g51
sa(dp488
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp489
g3
I01
sg10
I5
sg11
g55
sa(dp490
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'ImportError'
p491
sa(dp492
g1
S'Base class for warnings about probable mistakes in module imports'
p493
sg3
I01
sg4
(lp494
(dp495
g3
I01
sg10
I5
sg11
g12
sa(dp496
g3
I01
sg10
I5
sg11
g14
sa(dp497
g3
I01
sg10
I5
sg11
g16
sa(dp498
g1
S'default object formatter'
p499
sg3
I01
sg10
I2
sg11
g19
sa(dp500
g3
I01
sg10
I5
sg11
g21
sa(dp501
g3
I01
sg10
I5
sg11
g23
sa(dp502
g3
I01
sg10
I5
sg11
g25
sa(dp503
g3
I01
sg10
I5
sg11
g27
sa(dp504
g3
I01
sg10
I5
sg11
g29
sa(dp505
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p506
sg3
I01
sg10
I2
sg11
g32
sa(dp507
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp508
g1
S'helper for pickle'
p509
sg3
I01
sg10
I2
sg11
g37
sa(dp510
g3
I01
sg10
I5
sg11
g39
sa(dp511
g3
I01
sg10
I5
sg11
g41
sa(dp512
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp513
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p514
sg3
I01
sg10
I2
sg11
g46
sa(dp515
g3
I01
sg10
I5
sg11
g48
sa(dp516
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p517
sg3
I01
sg10
I2
sg11
g51
sa(dp518
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp519
g3
I01
sg10
I5
sg11
g55
sa(dp520
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'ImportWarning'
p521
sa(dp522
g1
S'Improper indentation.'
p523
sg3
I01
sg4
(lp524
(dp525
g3
I01
sg10
I5
sg11
g12
sa(dp526
g3
I01
sg10
I5
sg11
g14
sa(dp527
g3
I01
sg10
I5
sg11
g16
sa(dp528
g1
S'default object formatter'
p529
sg3
I01
sg10
I2
sg11
g19
sa(dp530
g3
I01
sg10
I5
sg11
g21
sa(dp531
g3
I01
sg10
I5
sg11
g23
sa(dp532
g3
I01
sg10
I5
sg11
g25
sa(dp533
g3
I01
sg10
I5
sg11
g27
sa(dp534
g3
I01
sg10
I5
sg11
g29
sa(dp535
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p536
sg3
I01
sg10
I2
sg11
g32
sa(dp537
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp538
g1
S'helper for pickle'
p539
sg3
I01
sg10
I2
sg11
g37
sa(dp540
g3
I01
sg10
I5
sg11
g39
sa(dp541
g3
I01
sg10
I5
sg11
g41
sa(dp542
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp543
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p544
sg3
I01
sg10
I2
sg11
g46
sa(dp545
g3
I01
sg10
I5
sg11
g48
sa(dp546
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p547
sg3
I01
sg10
I2
sg11
g51
sa(dp548
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp549
g3
I01
sg10
I5
sg11
g55
sa(dp550
g3
I01
sg10
I5
sg11
g302
sa(dp551
g3
I01
sg10
I5
sg11
S'lineno'
p552
sa(dp553
g3
I01
sg10
I5
sg11
g57
sa(dp554
g3
I01
sg10
I5
sg11
S'msg'
p555
sa(dp556
g3
I01
sg10
I5
sg11
S'offset'
p557
sa(dp558
g3
I01
sg10
I5
sg11
S'print_file_and_line'
p559
sa(dp560
g3
I01
sg10
I5
sg11
S'text'
p561
sasg10
I3
sg11
S'IndentationError'
p562
sa(dp563
g1
S'Sequence index out of range.'
p564
sg3
I01
sg4
(lp565
(dp566
g3
I01
sg10
I5
sg11
g12
sa(dp567
g3
I01
sg10
I5
sg11
g14
sa(dp568
g3
I01
sg10
I5
sg11
g16
sa(dp569
g1
S'default object formatter'
p570
sg3
I01
sg10
I2
sg11
g19
sa(dp571
g3
I01
sg10
I5
sg11
g21
sa(dp572
g3
I01
sg10
I5
sg11
g23
sa(dp573
g3
I01
sg10
I5
sg11
g25
sa(dp574
g3
I01
sg10
I5
sg11
g27
sa(dp575
g3
I01
sg10
I5
sg11
g29
sa(dp576
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p577
sg3
I01
sg10
I2
sg11
g32
sa(dp578
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp579
g1
S'helper for pickle'
p580
sg3
I01
sg10
I2
sg11
g37
sa(dp581
g3
I01
sg10
I5
sg11
g39
sa(dp582
g3
I01
sg10
I5
sg11
g41
sa(dp583
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp584
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p585
sg3
I01
sg10
I2
sg11
g46
sa(dp586
g3
I01
sg10
I5
sg11
g48
sa(dp587
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p588
sg3
I01
sg10
I2
sg11
g51
sa(dp589
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp590
g3
I01
sg10
I5
sg11
g55
sa(dp591
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'IndexError'
p592
sa(dp593
g1
S'Mapping key not found.'
p594
sg3
I01
sg4
(lp595
(dp596
g3
I01
sg10
I5
sg11
g12
sa(dp597
g3
I01
sg10
I5
sg11
g14
sa(dp598
g3
I01
sg10
I5
sg11
g16
sa(dp599
g1
S'default object formatter'
p600
sg3
I01
sg10
I2
sg11
g19
sa(dp601
g3
I01
sg10
I5
sg11
g21
sa(dp602
g3
I01
sg10
I5
sg11
g23
sa(dp603
g3
I01
sg10
I5
sg11
g25
sa(dp604
g3
I01
sg10
I5
sg11
g27
sa(dp605
g3
I01
sg10
I5
sg11
g29
sa(dp606
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p607
sg3
I01
sg10
I2
sg11
g32
sa(dp608
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp609
g1
S'helper for pickle'
p610
sg3
I01
sg10
I2
sg11
g37
sa(dp611
g3
I01
sg10
I5
sg11
g39
sa(dp612
g3
I01
sg10
I5
sg11
g41
sa(dp613
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp614
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p615
sg3
I01
sg10
I2
sg11
g46
sa(dp616
g3
I01
sg10
I5
sg11
g48
sa(dp617
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p618
sg3
I01
sg10
I2
sg11
g51
sa(dp619
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp620
g3
I01
sg10
I5
sg11
g55
sa(dp621
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'KeyError'
p622
sa(dp623
g1
S'Program interrupted by user.'
p624
sg3
I01
sg4
(lp625
(dp626
g3
I01
sg10
I5
sg11
g12
sa(dp627
g3
I01
sg10
I5
sg11
g14
sa(dp628
g3
I01
sg10
I5
sg11
g16
sa(dp629
g1
S'default object formatter'
p630
sg3
I01
sg10
I2
sg11
g19
sa(dp631
g3
I01
sg10
I5
sg11
g21
sa(dp632
g3
I01
sg10
I5
sg11
g23
sa(dp633
g3
I01
sg10
I5
sg11
g25
sa(dp634
g3
I01
sg10
I5
sg11
g27
sa(dp635
g3
I01
sg10
I5
sg11
g29
sa(dp636
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p637
sg3
I01
sg10
I2
sg11
g32
sa(dp638
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp639
g1
S'helper for pickle'
p640
sg3
I01
sg10
I2
sg11
g37
sa(dp641
g3
I01
sg10
I5
sg11
g39
sa(dp642
g3
I01
sg10
I5
sg11
g41
sa(dp643
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp644
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p645
sg3
I01
sg10
I2
sg11
g46
sa(dp646
g3
I01
sg10
I5
sg11
g48
sa(dp647
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p648
sg3
I01
sg10
I2
sg11
g51
sa(dp649
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp650
g3
I01
sg10
I5
sg11
g55
sa(dp651
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'KeyboardInterrupt'
p652
sa(dp653
g1
S'Base class for lookup errors.'
p654
sg3
I01
sg4
(lp655
(dp656
g3
I01
sg10
I5
sg11
g12
sa(dp657
g3
I01
sg10
I5
sg11
g14
sa(dp658
g3
I01
sg10
I5
sg11
g16
sa(dp659
g1
S'default object formatter'
p660
sg3
I01
sg10
I2
sg11
g19
sa(dp661
g3
I01
sg10
I5
sg11
g21
sa(dp662
g3
I01
sg10
I5
sg11
g23
sa(dp663
g3
I01
sg10
I5
sg11
g25
sa(dp664
g3
I01
sg10
I5
sg11
g27
sa(dp665
g3
I01
sg10
I5
sg11
g29
sa(dp666
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p667
sg3
I01
sg10
I2
sg11
g32
sa(dp668
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp669
g1
S'helper for pickle'
p670
sg3
I01
sg10
I2
sg11
g37
sa(dp671
g3
I01
sg10
I5
sg11
g39
sa(dp672
g3
I01
sg10
I5
sg11
g41
sa(dp673
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp674
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p675
sg3
I01
sg10
I2
sg11
g46
sa(dp676
g3
I01
sg10
I5
sg11
g48
sa(dp677
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p678
sg3
I01
sg10
I2
sg11
g51
sa(dp679
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp680
g3
I01
sg10
I5
sg11
g55
sa(dp681
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'LookupError'
p682
sa(dp683
g1
S'Out of memory.'
p684
sg3
I01
sg4
(lp685
(dp686
g3
I01
sg10
I5
sg11
g12
sa(dp687
g3
I01
sg10
I5
sg11
g14
sa(dp688
g3
I01
sg10
I5
sg11
g16
sa(dp689
g1
S'default object formatter'
p690
sg3
I01
sg10
I2
sg11
g19
sa(dp691
g3
I01
sg10
I5
sg11
g21
sa(dp692
g3
I01
sg10
I5
sg11
g23
sa(dp693
g3
I01
sg10
I5
sg11
g25
sa(dp694
g3
I01
sg10
I5
sg11
g27
sa(dp695
g3
I01
sg10
I5
sg11
g29
sa(dp696
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p697
sg3
I01
sg10
I2
sg11
g32
sa(dp698
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp699
g1
S'helper for pickle'
p700
sg3
I01
sg10
I2
sg11
g37
sa(dp701
g3
I01
sg10
I5
sg11
g39
sa(dp702
g3
I01
sg10
I5
sg11
g41
sa(dp703
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp704
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p705
sg3
I01
sg10
I2
sg11
g46
sa(dp706
g3
I01
sg10
I5
sg11
g48
sa(dp707
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p708
sg3
I01
sg10
I2
sg11
g51
sa(dp709
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp710
g3
I01
sg10
I5
sg11
g55
sa(dp711
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'MemoryError'
p712
sa(dp713
g1
S'Name not found globally.'
p714
sg3
I01
sg4
(lp715
(dp716
g3
I01
sg10
I5
sg11
g12
sa(dp717
g3
I01
sg10
I5
sg11
g14
sa(dp718
g3
I01
sg10
I5
sg11
g16
sa(dp719
g1
S'default object formatter'
p720
sg3
I01
sg10
I2
sg11
g19
sa(dp721
g3
I01
sg10
I5
sg11
g21
sa(dp722
g3
I01
sg10
I5
sg11
g23
sa(dp723
g3
I01
sg10
I5
sg11
g25
sa(dp724
g3
I01
sg10
I5
sg11
g27
sa(dp725
g3
I01
sg10
I5
sg11
g29
sa(dp726
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p727
sg3
I01
sg10
I2
sg11
g32
sa(dp728
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp729
g1
S'helper for pickle'
p730
sg3
I01
sg10
I2
sg11
g37
sa(dp731
g3
I01
sg10
I5
sg11
g39
sa(dp732
g3
I01
sg10
I5
sg11
g41
sa(dp733
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp734
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p735
sg3
I01
sg10
I2
sg11
g46
sa(dp736
g3
I01
sg10
I5
sg11
g48
sa(dp737
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p738
sg3
I01
sg10
I2
sg11
g51
sa(dp739
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp740
g3
I01
sg10
I5
sg11
g55
sa(dp741
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'NameError'
p742
sa(dp743
g3
I01
sg10
I5
sg11
S'None'
p744
sa(dp745
g3
I01
sg10
I5
sg11
S'NotImplemented'
p746
sa(dp747
g1
S"Method or function hasn't been implemented yet."
p748
sg3
I01
sg4
(lp749
(dp750
g3
I01
sg10
I5
sg11
g12
sa(dp751
g3
I01
sg10
I5
sg11
g14
sa(dp752
g3
I01
sg10
I5
sg11
g16
sa(dp753
g1
S'default object formatter'
p754
sg3
I01
sg10
I2
sg11
g19
sa(dp755
g3
I01
sg10
I5
sg11
g21
sa(dp756
g3
I01
sg10
I5
sg11
g23
sa(dp757
g3
I01
sg10
I5
sg11
g25
sa(dp758
g3
I01
sg10
I5
sg11
g27
sa(dp759
g3
I01
sg10
I5
sg11
g29
sa(dp760
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p761
sg3
I01
sg10
I2
sg11
g32
sa(dp762
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp763
g1
S'helper for pickle'
p764
sg3
I01
sg10
I2
sg11
g37
sa(dp765
g3
I01
sg10
I5
sg11
g39
sa(dp766
g3
I01
sg10
I5
sg11
g41
sa(dp767
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp768
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p769
sg3
I01
sg10
I2
sg11
g46
sa(dp770
g3
I01
sg10
I5
sg11
g48
sa(dp771
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p772
sg3
I01
sg10
I2
sg11
g51
sa(dp773
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp774
g3
I01
sg10
I5
sg11
g55
sa(dp775
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'NotImplementedError'
p776
sa(dp777
g1
S'OS system call failed.'
p778
sg3
I01
sg4
(lp779
(dp780
g3
I01
sg10
I5
sg11
g12
sa(dp781
g3
I01
sg10
I5
sg11
g14
sa(dp782
g3
I01
sg10
I5
sg11
g16
sa(dp783
g1
S'default object formatter'
p784
sg3
I01
sg10
I2
sg11
g19
sa(dp785
g3
I01
sg10
I5
sg11
g21
sa(dp786
g3
I01
sg10
I5
sg11
g23
sa(dp787
g3
I01
sg10
I5
sg11
g25
sa(dp788
g3
I01
sg10
I5
sg11
g27
sa(dp789
g3
I01
sg10
I5
sg11
g29
sa(dp790
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p791
sg3
I01
sg10
I2
sg11
g32
sa(dp792
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp793
g1
S'helper for pickle'
p794
sg3
I01
sg10
I2
sg11
g37
sa(dp795
g3
I01
sg10
I5
sg11
g39
sa(dp796
g3
I01
sg10
I5
sg11
g41
sa(dp797
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp798
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p799
sg3
I01
sg10
I2
sg11
g46
sa(dp800
g3
I01
sg10
I5
sg11
g48
sa(dp801
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p802
sg3
I01
sg10
I2
sg11
g51
sa(dp803
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp804
g3
I01
sg10
I5
sg11
g55
sa(dp805
g3
I01
sg10
I5
sg11
g300
sa(dp806
g3
I01
sg10
I5
sg11
g302
sa(dp807
g3
I01
sg10
I5
sg11
g57
sa(dp808
g3
I01
sg10
I5
sg11
g305
sasg10
I3
sg11
S'OSError'
p809
sa(dp810
g1
S'Result too large to be represented.'
p811
sg3
I01
sg4
(lp812
(dp813
g3
I01
sg10
I5
sg11
g12
sa(dp814
g3
I01
sg10
I5
sg11
g14
sa(dp815
g3
I01
sg10
I5
sg11
g16
sa(dp816
g1
S'default object formatter'
p817
sg3
I01
sg10
I2
sg11
g19
sa(dp818
g3
I01
sg10
I5
sg11
g21
sa(dp819
g3
I01
sg10
I5
sg11
g23
sa(dp820
g3
I01
sg10
I5
sg11
g25
sa(dp821
g3
I01
sg10
I5
sg11
g27
sa(dp822
g3
I01
sg10
I5
sg11
g29
sa(dp823
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p824
sg3
I01
sg10
I2
sg11
g32
sa(dp825
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp826
g1
S'helper for pickle'
p827
sg3
I01
sg10
I2
sg11
g37
sa(dp828
g3
I01
sg10
I5
sg11
g39
sa(dp829
g3
I01
sg10
I5
sg11
g41
sa(dp830
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp831
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p832
sg3
I01
sg10
I2
sg11
g46
sa(dp833
g3
I01
sg10
I5
sg11
g48
sa(dp834
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p835
sg3
I01
sg10
I2
sg11
g51
sa(dp836
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp837
g3
I01
sg10
I5
sg11
g55
sa(dp838
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'OverflowError'
p839
sa(dp840
g1
S'Base class for warnings about features which will be deprecated\nin the future.'
p841
sg3
I01
sg4
(lp842
(dp843
g3
I01
sg10
I5
sg11
g12
sa(dp844
g3
I01
sg10
I5
sg11
g14
sa(dp845
g3
I01
sg10
I5
sg11
g16
sa(dp846
g1
S'default object formatter'
p847
sg3
I01
sg10
I2
sg11
g19
sa(dp848
g3
I01
sg10
I5
sg11
g21
sa(dp849
g3
I01
sg10
I5
sg11
g23
sa(dp850
g3
I01
sg10
I5
sg11
g25
sa(dp851
g3
I01
sg10
I5
sg11
g27
sa(dp852
g3
I01
sg10
I5
sg11
g29
sa(dp853
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p854
sg3
I01
sg10
I2
sg11
g32
sa(dp855
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp856
g1
S'helper for pickle'
p857
sg3
I01
sg10
I2
sg11
g37
sa(dp858
g3
I01
sg10
I5
sg11
g39
sa(dp859
g3
I01
sg10
I5
sg11
g41
sa(dp860
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp861
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p862
sg3
I01
sg10
I2
sg11
g46
sa(dp863
g3
I01
sg10
I5
sg11
g48
sa(dp864
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p865
sg3
I01
sg10
I2
sg11
g51
sa(dp866
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp867
g3
I01
sg10
I5
sg11
g55
sa(dp868
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'PendingDeprecationWarning'
p869
sa(dp870
g1
S'Weak ref proxy used after referent went away.'
p871
sg3
I01
sg4
(lp872
(dp873
g3
I01
sg10
I5
sg11
g12
sa(dp874
g3
I01
sg10
I5
sg11
g14
sa(dp875
g3
I01
sg10
I5
sg11
g16
sa(dp876
g1
S'default object formatter'
p877
sg3
I01
sg10
I2
sg11
g19
sa(dp878
g3
I01
sg10
I5
sg11
g21
sa(dp879
g3
I01
sg10
I5
sg11
g23
sa(dp880
g3
I01
sg10
I5
sg11
g25
sa(dp881
g3
I01
sg10
I5
sg11
g27
sa(dp882
g3
I01
sg10
I5
sg11
g29
sa(dp883
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p884
sg3
I01
sg10
I2
sg11
g32
sa(dp885
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp886
g1
S'helper for pickle'
p887
sg3
I01
sg10
I2
sg11
g37
sa(dp888
g3
I01
sg10
I5
sg11
g39
sa(dp889
g3
I01
sg10
I5
sg11
g41
sa(dp890
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp891
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p892
sg3
I01
sg10
I2
sg11
g46
sa(dp893
g3
I01
sg10
I5
sg11
g48
sa(dp894
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p895
sg3
I01
sg10
I2
sg11
g51
sa(dp896
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp897
g3
I01
sg10
I5
sg11
g55
sa(dp898
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'ReferenceError'
p899
sa(dp900
g1
S'Unspecified run-time error.'
p901
sg3
I01
sg4
(lp902
(dp903
g3
I01
sg10
I5
sg11
g12
sa(dp904
g3
I01
sg10
I5
sg11
g14
sa(dp905
g3
I01
sg10
I5
sg11
g16
sa(dp906
g1
S'default object formatter'
p907
sg3
I01
sg10
I2
sg11
g19
sa(dp908
g3
I01
sg10
I5
sg11
g21
sa(dp909
g3
I01
sg10
I5
sg11
g23
sa(dp910
g3
I01
sg10
I5
sg11
g25
sa(dp911
g3
I01
sg10
I5
sg11
g27
sa(dp912
g3
I01
sg10
I5
sg11
g29
sa(dp913
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p914
sg3
I01
sg10
I2
sg11
g32
sa(dp915
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp916
g1
S'helper for pickle'
p917
sg3
I01
sg10
I2
sg11
g37
sa(dp918
g3
I01
sg10
I5
sg11
g39
sa(dp919
g3
I01
sg10
I5
sg11
g41
sa(dp920
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp921
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p922
sg3
I01
sg10
I2
sg11
g46
sa(dp923
g3
I01
sg10
I5
sg11
g48
sa(dp924
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p925
sg3
I01
sg10
I2
sg11
g51
sa(dp926
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp927
g3
I01
sg10
I5
sg11
g55
sa(dp928
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'RuntimeError'
p929
sa(dp930
g1
S'Base class for warnings about dubious runtime behavior.'
p931
sg3
I01
sg4
(lp932
(dp933
g3
I01
sg10
I5
sg11
g12
sa(dp934
g3
I01
sg10
I5
sg11
g14
sa(dp935
g3
I01
sg10
I5
sg11
g16
sa(dp936
g1
S'default object formatter'
p937
sg3
I01
sg10
I2
sg11
g19
sa(dp938
g3
I01
sg10
I5
sg11
g21
sa(dp939
g3
I01
sg10
I5
sg11
g23
sa(dp940
g3
I01
sg10
I5
sg11
g25
sa(dp941
g3
I01
sg10
I5
sg11
g27
sa(dp942
g3
I01
sg10
I5
sg11
g29
sa(dp943
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p944
sg3
I01
sg10
I2
sg11
g32
sa(dp945
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp946
g1
S'helper for pickle'
p947
sg3
I01
sg10
I2
sg11
g37
sa(dp948
g3
I01
sg10
I5
sg11
g39
sa(dp949
g3
I01
sg10
I5
sg11
g41
sa(dp950
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp951
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p952
sg3
I01
sg10
I2
sg11
g46
sa(dp953
g3
I01
sg10
I5
sg11
g48
sa(dp954
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p955
sg3
I01
sg10
I2
sg11
g51
sa(dp956
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp957
g3
I01
sg10
I5
sg11
g55
sa(dp958
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'RuntimeWarning'
p959
sa(dp960
g1
S'Base class for all standard Python exceptions that do not represent\ninterpreter exiting.'
p961
sg3
I01
sg4
(lp962
(dp963
g3
I01
sg10
I5
sg11
g12
sa(dp964
g3
I01
sg10
I5
sg11
g14
sa(dp965
g3
I01
sg10
I5
sg11
g16
sa(dp966
g1
S'default object formatter'
p967
sg3
I01
sg10
I2
sg11
g19
sa(dp968
g3
I01
sg10
I5
sg11
g21
sa(dp969
g3
I01
sg10
I5
sg11
g23
sa(dp970
g3
I01
sg10
I5
sg11
g25
sa(dp971
g3
I01
sg10
I5
sg11
g27
sa(dp972
g3
I01
sg10
I5
sg11
g29
sa(dp973
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p974
sg3
I01
sg10
I2
sg11
g32
sa(dp975
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp976
g1
S'helper for pickle'
p977
sg3
I01
sg10
I2
sg11
g37
sa(dp978
g3
I01
sg10
I5
sg11
g39
sa(dp979
g3
I01
sg10
I5
sg11
g41
sa(dp980
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp981
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p982
sg3
I01
sg10
I2
sg11
g46
sa(dp983
g3
I01
sg10
I5
sg11
g48
sa(dp984
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p985
sg3
I01
sg10
I2
sg11
g51
sa(dp986
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp987
g3
I01
sg10
I5
sg11
g55
sa(dp988
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'StandardError'
p989
sa(dp990
g1
S'Signal the end from iterator.next().'
p991
sg3
I01
sg4
(lp992
(dp993
g3
I01
sg10
I5
sg11
g12
sa(dp994
g3
I01
sg10
I5
sg11
g14
sa(dp995
g3
I01
sg10
I5
sg11
g16
sa(dp996
g1
S'default object formatter'
p997
sg3
I01
sg10
I2
sg11
g19
sa(dp998
g3
I01
sg10
I5
sg11
g21
sa(dp999
g3
I01
sg10
I5
sg11
g23
sa(dp1000
g3
I01
sg10
I5
sg11
g25
sa(dp1001
g3
I01
sg10
I5
sg11
g27
sa(dp1002
g3
I01
sg10
I5
sg11
g29
sa(dp1003
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1004
sg3
I01
sg10
I2
sg11
g32
sa(dp1005
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1006
g1
S'helper for pickle'
p1007
sg3
I01
sg10
I2
sg11
g37
sa(dp1008
g3
I01
sg10
I5
sg11
g39
sa(dp1009
g3
I01
sg10
I5
sg11
g41
sa(dp1010
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1011
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1012
sg3
I01
sg10
I2
sg11
g46
sa(dp1013
g3
I01
sg10
I5
sg11
g48
sa(dp1014
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1015
sg3
I01
sg10
I2
sg11
g51
sa(dp1016
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1017
g3
I01
sg10
I5
sg11
g55
sa(dp1018
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'StopIteration'
p1019
sa(dp1020
g1
S'Invalid syntax.'
p1021
sg3
I01
sg4
(lp1022
(dp1023
g3
I01
sg10
I5
sg11
g12
sa(dp1024
g3
I01
sg10
I5
sg11
g14
sa(dp1025
g3
I01
sg10
I5
sg11
g16
sa(dp1026
g1
S'default object formatter'
p1027
sg3
I01
sg10
I2
sg11
g19
sa(dp1028
g3
I01
sg10
I5
sg11
g21
sa(dp1029
g3
I01
sg10
I5
sg11
g23
sa(dp1030
g3
I01
sg10
I5
sg11
g25
sa(dp1031
g3
I01
sg10
I5
sg11
g27
sa(dp1032
g3
I01
sg10
I5
sg11
g29
sa(dp1033
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1034
sg3
I01
sg10
I2
sg11
g32
sa(dp1035
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1036
g1
S'helper for pickle'
p1037
sg3
I01
sg10
I2
sg11
g37
sa(dp1038
g3
I01
sg10
I5
sg11
g39
sa(dp1039
g3
I01
sg10
I5
sg11
g41
sa(dp1040
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1041
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1042
sg3
I01
sg10
I2
sg11
g46
sa(dp1043
g3
I01
sg10
I5
sg11
g48
sa(dp1044
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1045
sg3
I01
sg10
I2
sg11
g51
sa(dp1046
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1047
g3
I01
sg10
I5
sg11
g55
sa(dp1048
g3
I01
sg10
I5
sg11
g302
sa(dp1049
g3
I01
sg10
I5
sg11
g552
sa(dp1050
g3
I01
sg10
I5
sg11
g57
sa(dp1051
g3
I01
sg10
I5
sg11
g555
sa(dp1052
g3
I01
sg10
I5
sg11
g557
sa(dp1053
g3
I01
sg10
I5
sg11
g559
sa(dp1054
g3
I01
sg10
I5
sg11
g561
sasg10
I3
sg11
S'SyntaxError'
p1055
sa(dp1056
g1
S'Base class for warnings about dubious syntax.'
p1057
sg3
I01
sg4
(lp1058
(dp1059
g3
I01
sg10
I5
sg11
g12
sa(dp1060
g3
I01
sg10
I5
sg11
g14
sa(dp1061
g3
I01
sg10
I5
sg11
g16
sa(dp1062
g1
S'default object formatter'
p1063
sg3
I01
sg10
I2
sg11
g19
sa(dp1064
g3
I01
sg10
I5
sg11
g21
sa(dp1065
g3
I01
sg10
I5
sg11
g23
sa(dp1066
g3
I01
sg10
I5
sg11
g25
sa(dp1067
g3
I01
sg10
I5
sg11
g27
sa(dp1068
g3
I01
sg10
I5
sg11
g29
sa(dp1069
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1070
sg3
I01
sg10
I2
sg11
g32
sa(dp1071
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1072
g1
S'helper for pickle'
p1073
sg3
I01
sg10
I2
sg11
g37
sa(dp1074
g3
I01
sg10
I5
sg11
g39
sa(dp1075
g3
I01
sg10
I5
sg11
g41
sa(dp1076
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1077
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1078
sg3
I01
sg10
I2
sg11
g46
sa(dp1079
g3
I01
sg10
I5
sg11
g48
sa(dp1080
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1081
sg3
I01
sg10
I2
sg11
g51
sa(dp1082
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1083
g3
I01
sg10
I5
sg11
g55
sa(dp1084
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'SyntaxWarning'
p1085
sa(dp1086
g1
S'Internal error in the Python interpreter.\n\nPlease report this to the Python maintainer, along with the traceback,\nthe Python version, and the hardware/OS platform and version.'
p1087
sg3
I01
sg4
(lp1088
(dp1089
g3
I01
sg10
I5
sg11
g12
sa(dp1090
g3
I01
sg10
I5
sg11
g14
sa(dp1091
g3
I01
sg10
I5
sg11
g16
sa(dp1092
g1
S'default object formatter'
p1093
sg3
I01
sg10
I2
sg11
g19
sa(dp1094
g3
I01
sg10
I5
sg11
g21
sa(dp1095
g3
I01
sg10
I5
sg11
g23
sa(dp1096
g3
I01
sg10
I5
sg11
g25
sa(dp1097
g3
I01
sg10
I5
sg11
g27
sa(dp1098
g3
I01
sg10
I5
sg11
g29
sa(dp1099
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1100
sg3
I01
sg10
I2
sg11
g32
sa(dp1101
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1102
g1
S'helper for pickle'
p1103
sg3
I01
sg10
I2
sg11
g37
sa(dp1104
g3
I01
sg10
I5
sg11
g39
sa(dp1105
g3
I01
sg10
I5
sg11
g41
sa(dp1106
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1107
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1108
sg3
I01
sg10
I2
sg11
g46
sa(dp1109
g3
I01
sg10
I5
sg11
g48
sa(dp1110
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1111
sg3
I01
sg10
I2
sg11
g51
sa(dp1112
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1113
g3
I01
sg10
I5
sg11
g55
sa(dp1114
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'SystemError'
p1115
sa(dp1116
g1
S'Request to exit from the interpreter.'
p1117
sg3
I01
sg4
(lp1118
(dp1119
g3
I01
sg10
I5
sg11
g12
sa(dp1120
g3
I01
sg10
I5
sg11
g14
sa(dp1121
g3
I01
sg10
I5
sg11
g16
sa(dp1122
g1
S'default object formatter'
p1123
sg3
I01
sg10
I2
sg11
g19
sa(dp1124
g3
I01
sg10
I5
sg11
g21
sa(dp1125
g3
I01
sg10
I5
sg11
g23
sa(dp1126
g3
I01
sg10
I5
sg11
g25
sa(dp1127
g3
I01
sg10
I5
sg11
g27
sa(dp1128
g3
I01
sg10
I5
sg11
g29
sa(dp1129
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1130
sg3
I01
sg10
I2
sg11
g32
sa(dp1131
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1132
g1
S'helper for pickle'
p1133
sg3
I01
sg10
I2
sg11
g37
sa(dp1134
g3
I01
sg10
I5
sg11
g39
sa(dp1135
g3
I01
sg10
I5
sg11
g41
sa(dp1136
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1137
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1138
sg3
I01
sg10
I2
sg11
g46
sa(dp1139
g3
I01
sg10
I5
sg11
g48
sa(dp1140
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1141
sg3
I01
sg10
I2
sg11
g51
sa(dp1142
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1143
g3
I01
sg10
I5
sg11
g55
sa(dp1144
g3
I01
sg10
I5
sg11
S'code'
p1145
sa(dp1146
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'SystemExit'
p1147
sa(dp1148
g1
S'Improper mixture of spaces and tabs.'
p1149
sg3
I01
sg4
(lp1150
(dp1151
g3
I01
sg10
I5
sg11
g12
sa(dp1152
g3
I01
sg10
I5
sg11
g14
sa(dp1153
g3
I01
sg10
I5
sg11
g16
sa(dp1154
g1
S'default object formatter'
p1155
sg3
I01
sg10
I2
sg11
g19
sa(dp1156
g3
I01
sg10
I5
sg11
g21
sa(dp1157
g3
I01
sg10
I5
sg11
g23
sa(dp1158
g3
I01
sg10
I5
sg11
g25
sa(dp1159
g3
I01
sg10
I5
sg11
g27
sa(dp1160
g3
I01
sg10
I5
sg11
g29
sa(dp1161
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1162
sg3
I01
sg10
I2
sg11
g32
sa(dp1163
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1164
g1
S'helper for pickle'
p1165
sg3
I01
sg10
I2
sg11
g37
sa(dp1166
g3
I01
sg10
I5
sg11
g39
sa(dp1167
g3
I01
sg10
I5
sg11
g41
sa(dp1168
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1169
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1170
sg3
I01
sg10
I2
sg11
g46
sa(dp1171
g3
I01
sg10
I5
sg11
g48
sa(dp1172
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1173
sg3
I01
sg10
I2
sg11
g51
sa(dp1174
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1175
g3
I01
sg10
I5
sg11
g55
sa(dp1176
g3
I01
sg10
I5
sg11
g302
sa(dp1177
g3
I01
sg10
I5
sg11
g552
sa(dp1178
g3
I01
sg10
I5
sg11
g57
sa(dp1179
g3
I01
sg10
I5
sg11
g555
sa(dp1180
g3
I01
sg10
I5
sg11
g557
sa(dp1181
g3
I01
sg10
I5
sg11
g559
sa(dp1182
g3
I01
sg10
I5
sg11
g561
sasg10
I3
sg11
S'TabError'
p1183
sa(dp1184
g3
I01
sg10
I5
sg11
S'True'
p1185
sa(dp1186
g1
S'Inappropriate argument type.'
p1187
sg3
I01
sg4
(lp1188
(dp1189
g3
I01
sg10
I5
sg11
g12
sa(dp1190
g3
I01
sg10
I5
sg11
g14
sa(dp1191
g3
I01
sg10
I5
sg11
g16
sa(dp1192
g1
S'default object formatter'
p1193
sg3
I01
sg10
I2
sg11
g19
sa(dp1194
g3
I01
sg10
I5
sg11
g21
sa(dp1195
g3
I01
sg10
I5
sg11
g23
sa(dp1196
g3
I01
sg10
I5
sg11
g25
sa(dp1197
g3
I01
sg10
I5
sg11
g27
sa(dp1198
g3
I01
sg10
I5
sg11
g29
sa(dp1199
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1200
sg3
I01
sg10
I2
sg11
g32
sa(dp1201
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1202
g1
S'helper for pickle'
p1203
sg3
I01
sg10
I2
sg11
g37
sa(dp1204
g3
I01
sg10
I5
sg11
g39
sa(dp1205
g3
I01
sg10
I5
sg11
g41
sa(dp1206
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1207
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1208
sg3
I01
sg10
I2
sg11
g46
sa(dp1209
g3
I01
sg10
I5
sg11
g48
sa(dp1210
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1211
sg3
I01
sg10
I2
sg11
g51
sa(dp1212
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1213
g3
I01
sg10
I5
sg11
g55
sa(dp1214
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'TypeError'
p1215
sa(dp1216
g1
S'Local name referenced but not bound to a value.'
p1217
sg3
I01
sg4
(lp1218
(dp1219
g3
I01
sg10
I5
sg11
g12
sa(dp1220
g3
I01
sg10
I5
sg11
g14
sa(dp1221
g3
I01
sg10
I5
sg11
g16
sa(dp1222
g1
S'default object formatter'
p1223
sg3
I01
sg10
I2
sg11
g19
sa(dp1224
g3
I01
sg10
I5
sg11
g21
sa(dp1225
g3
I01
sg10
I5
sg11
g23
sa(dp1226
g3
I01
sg10
I5
sg11
g25
sa(dp1227
g3
I01
sg10
I5
sg11
g27
sa(dp1228
g3
I01
sg10
I5
sg11
g29
sa(dp1229
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1230
sg3
I01
sg10
I2
sg11
g32
sa(dp1231
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1232
g1
S'helper for pickle'
p1233
sg3
I01
sg10
I2
sg11
g37
sa(dp1234
g3
I01
sg10
I5
sg11
g39
sa(dp1235
g3
I01
sg10
I5
sg11
g41
sa(dp1236
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1237
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1238
sg3
I01
sg10
I2
sg11
g46
sa(dp1239
g3
I01
sg10
I5
sg11
g48
sa(dp1240
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1241
sg3
I01
sg10
I2
sg11
g51
sa(dp1242
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1243
g3
I01
sg10
I5
sg11
g55
sa(dp1244
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'UnboundLocalError'
p1245
sa(dp1246
g1
S'Unicode decoding error.'
p1247
sg3
I01
sg4
(lp1248
(dp1249
g3
I01
sg10
I5
sg11
g12
sa(dp1250
g3
I01
sg10
I5
sg11
g14
sa(dp1251
g3
I01
sg10
I5
sg11
g16
sa(dp1252
g1
S'default object formatter'
p1253
sg3
I01
sg10
I2
sg11
g19
sa(dp1254
g3
I01
sg10
I5
sg11
g21
sa(dp1255
g3
I01
sg10
I5
sg11
g23
sa(dp1256
g3
I01
sg10
I5
sg11
g25
sa(dp1257
g3
I01
sg10
I5
sg11
g27
sa(dp1258
g3
I01
sg10
I5
sg11
g29
sa(dp1259
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1260
sg3
I01
sg10
I2
sg11
g32
sa(dp1261
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1262
g1
S'helper for pickle'
p1263
sg3
I01
sg10
I2
sg11
g37
sa(dp1264
g3
I01
sg10
I5
sg11
g39
sa(dp1265
g3
I01
sg10
I5
sg11
g41
sa(dp1266
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1267
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1268
sg3
I01
sg10
I2
sg11
g46
sa(dp1269
g3
I01
sg10
I5
sg11
g48
sa(dp1270
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1271
sg3
I01
sg10
I2
sg11
g51
sa(dp1272
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1273
g3
I01
sg10
I5
sg11
g55
sa(dp1274
g3
I01
sg10
I5
sg11
S'encoding'
p1275
sa(dp1276
g3
I01
sg10
I5
sg11
S'end'
p1277
sa(dp1278
g3
I01
sg10
I5
sg11
g57
sa(dp1279
g3
I01
sg10
I5
sg11
S'object'
p1280
sa(dp1281
g3
I01
sg10
I5
sg11
S'reason'
p1282
sa(dp1283
g3
I01
sg10
I5
sg11
S'start'
p1284
sasg10
I3
sg11
S'UnicodeDecodeError'
p1285
sa(dp1286
g1
S'Unicode encoding error.'
p1287
sg3
I01
sg4
(lp1288
(dp1289
g3
I01
sg10
I5
sg11
g12
sa(dp1290
g3
I01
sg10
I5
sg11
g14
sa(dp1291
g3
I01
sg10
I5
sg11
g16
sa(dp1292
g1
S'default object formatter'
p1293
sg3
I01
sg10
I2
sg11
g19
sa(dp1294
g3
I01
sg10
I5
sg11
g21
sa(dp1295
g3
I01
sg10
I5
sg11
g23
sa(dp1296
g3
I01
sg10
I5
sg11
g25
sa(dp1297
g3
I01
sg10
I5
sg11
g27
sa(dp1298
g3
I01
sg10
I5
sg11
g29
sa(dp1299
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1300
sg3
I01
sg10
I2
sg11
g32
sa(dp1301
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1302
g1
S'helper for pickle'
p1303
sg3
I01
sg10
I2
sg11
g37
sa(dp1304
g3
I01
sg10
I5
sg11
g39
sa(dp1305
g3
I01
sg10
I5
sg11
g41
sa(dp1306
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1307
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1308
sg3
I01
sg10
I2
sg11
g46
sa(dp1309
g3
I01
sg10
I5
sg11
g48
sa(dp1310
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1311
sg3
I01
sg10
I2
sg11
g51
sa(dp1312
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1313
g3
I01
sg10
I5
sg11
g55
sa(dp1314
g3
I01
sg10
I5
sg11
g1275
sa(dp1315
g3
I01
sg10
I5
sg11
g1277
sa(dp1316
g3
I01
sg10
I5
sg11
g57
sa(dp1317
g3
I01
sg10
I5
sg11
g1280
sa(dp1318
g3
I01
sg10
I5
sg11
g1282
sa(dp1319
g3
I01
sg10
I5
sg11
g1284
sasg10
I3
sg11
S'UnicodeEncodeError'
p1320
sa(dp1321
g1
S'Unicode related error.'
p1322
sg3
I01
sg4
(lp1323
(dp1324
g3
I01
sg10
I5
sg11
g12
sa(dp1325
g3
I01
sg10
I5
sg11
g14
sa(dp1326
g3
I01
sg10
I5
sg11
g16
sa(dp1327
g1
S'default object formatter'
p1328
sg3
I01
sg10
I2
sg11
g19
sa(dp1329
g3
I01
sg10
I5
sg11
g21
sa(dp1330
g3
I01
sg10
I5
sg11
g23
sa(dp1331
g3
I01
sg10
I5
sg11
g25
sa(dp1332
g3
I01
sg10
I5
sg11
g27
sa(dp1333
g3
I01
sg10
I5
sg11
g29
sa(dp1334
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1335
sg3
I01
sg10
I2
sg11
g32
sa(dp1336
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1337
g1
S'helper for pickle'
p1338
sg3
I01
sg10
I2
sg11
g37
sa(dp1339
g3
I01
sg10
I5
sg11
g39
sa(dp1340
g3
I01
sg10
I5
sg11
g41
sa(dp1341
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1342
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1343
sg3
I01
sg10
I2
sg11
g46
sa(dp1344
g3
I01
sg10
I5
sg11
g48
sa(dp1345
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1346
sg3
I01
sg10
I2
sg11
g51
sa(dp1347
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1348
g3
I01
sg10
I5
sg11
g55
sa(dp1349
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'UnicodeError'
p1350
sa(dp1351
g1
S'Unicode translation error.'
p1352
sg3
I01
sg4
(lp1353
(dp1354
g3
I01
sg10
I5
sg11
g12
sa(dp1355
g3
I01
sg10
I5
sg11
g14
sa(dp1356
g3
I01
sg10
I5
sg11
g16
sa(dp1357
g1
S'default object formatter'
p1358
sg3
I01
sg10
I2
sg11
g19
sa(dp1359
g3
I01
sg10
I5
sg11
g21
sa(dp1360
g3
I01
sg10
I5
sg11
g23
sa(dp1361
g3
I01
sg10
I5
sg11
g25
sa(dp1362
g3
I01
sg10
I5
sg11
g27
sa(dp1363
g3
I01
sg10
I5
sg11
g29
sa(dp1364
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1365
sg3
I01
sg10
I2
sg11
g32
sa(dp1366
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1367
g1
S'helper for pickle'
p1368
sg3
I01
sg10
I2
sg11
g37
sa(dp1369
g3
I01
sg10
I5
sg11
g39
sa(dp1370
g3
I01
sg10
I5
sg11
g41
sa(dp1371
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1372
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1373
sg3
I01
sg10
I2
sg11
g46
sa(dp1374
g3
I01
sg10
I5
sg11
g48
sa(dp1375
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1376
sg3
I01
sg10
I2
sg11
g51
sa(dp1377
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1378
g3
I01
sg10
I5
sg11
g55
sa(dp1379
g3
I01
sg10
I5
sg11
g1275
sa(dp1380
g3
I01
sg10
I5
sg11
g1277
sa(dp1381
g3
I01
sg10
I5
sg11
g57
sa(dp1382
g3
I01
sg10
I5
sg11
g1280
sa(dp1383
g3
I01
sg10
I5
sg11
g1282
sa(dp1384
g3
I01
sg10
I5
sg11
g1284
sasg10
I3
sg11
S'UnicodeTranslateError'
p1385
sa(dp1386
g1
S'Base class for warnings about Unicode related problems, mostly\nrelated to conversion problems.'
p1387
sg3
I01
sg4
(lp1388
(dp1389
g3
I01
sg10
I5
sg11
g12
sa(dp1390
g3
I01
sg10
I5
sg11
g14
sa(dp1391
g3
I01
sg10
I5
sg11
g16
sa(dp1392
g1
S'default object formatter'
p1393
sg3
I01
sg10
I2
sg11
g19
sa(dp1394
g3
I01
sg10
I5
sg11
g21
sa(dp1395
g3
I01
sg10
I5
sg11
g23
sa(dp1396
g3
I01
sg10
I5
sg11
g25
sa(dp1397
g3
I01
sg10
I5
sg11
g27
sa(dp1398
g3
I01
sg10
I5
sg11
g29
sa(dp1399
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1400
sg3
I01
sg10
I2
sg11
g32
sa(dp1401
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1402
g1
S'helper for pickle'
p1403
sg3
I01
sg10
I2
sg11
g37
sa(dp1404
g3
I01
sg10
I5
sg11
g39
sa(dp1405
g3
I01
sg10
I5
sg11
g41
sa(dp1406
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1407
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1408
sg3
I01
sg10
I2
sg11
g46
sa(dp1409
g3
I01
sg10
I5
sg11
g48
sa(dp1410
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1411
sg3
I01
sg10
I2
sg11
g51
sa(dp1412
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1413
g3
I01
sg10
I5
sg11
g55
sa(dp1414
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'UnicodeWarning'
p1415
sa(dp1416
g1
S'Base class for warnings generated by user code.'
p1417
sg3
I01
sg4
(lp1418
(dp1419
g3
I01
sg10
I5
sg11
g12
sa(dp1420
g3
I01
sg10
I5
sg11
g14
sa(dp1421
g3
I01
sg10
I5
sg11
g16
sa(dp1422
g1
S'default object formatter'
p1423
sg3
I01
sg10
I2
sg11
g19
sa(dp1424
g3
I01
sg10
I5
sg11
g21
sa(dp1425
g3
I01
sg10
I5
sg11
g23
sa(dp1426
g3
I01
sg10
I5
sg11
g25
sa(dp1427
g3
I01
sg10
I5
sg11
g27
sa(dp1428
g3
I01
sg10
I5
sg11
g29
sa(dp1429
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1430
sg3
I01
sg10
I2
sg11
g32
sa(dp1431
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1432
g1
S'helper for pickle'
p1433
sg3
I01
sg10
I2
sg11
g37
sa(dp1434
g3
I01
sg10
I5
sg11
g39
sa(dp1435
g3
I01
sg10
I5
sg11
g41
sa(dp1436
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1437
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1438
sg3
I01
sg10
I2
sg11
g46
sa(dp1439
g3
I01
sg10
I5
sg11
g48
sa(dp1440
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1441
sg3
I01
sg10
I2
sg11
g51
sa(dp1442
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1443
g3
I01
sg10
I5
sg11
g55
sa(dp1444
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'UserWarning'
p1445
sa(dp1446
g1
S'Inappropriate argument value (of correct type).'
p1447
sg3
I01
sg4
(lp1448
(dp1449
g3
I01
sg10
I5
sg11
g12
sa(dp1450
g3
I01
sg10
I5
sg11
g14
sa(dp1451
g3
I01
sg10
I5
sg11
g16
sa(dp1452
g1
S'default object formatter'
p1453
sg3
I01
sg10
I2
sg11
g19
sa(dp1454
g3
I01
sg10
I5
sg11
g21
sa(dp1455
g3
I01
sg10
I5
sg11
g23
sa(dp1456
g3
I01
sg10
I5
sg11
g25
sa(dp1457
g3
I01
sg10
I5
sg11
g27
sa(dp1458
g3
I01
sg10
I5
sg11
g29
sa(dp1459
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1460
sg3
I01
sg10
I2
sg11
g32
sa(dp1461
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1462
g1
S'helper for pickle'
p1463
sg3
I01
sg10
I2
sg11
g37
sa(dp1464
g3
I01
sg10
I5
sg11
g39
sa(dp1465
g3
I01
sg10
I5
sg11
g41
sa(dp1466
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1467
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1468
sg3
I01
sg10
I2
sg11
g46
sa(dp1469
g3
I01
sg10
I5
sg11
g48
sa(dp1470
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1471
sg3
I01
sg10
I2
sg11
g51
sa(dp1472
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1473
g3
I01
sg10
I5
sg11
g55
sa(dp1474
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'ValueError'
p1475
sa(dp1476
g1
S'Base class for warning categories.'
p1477
sg3
I01
sg4
(lp1478
(dp1479
g3
I01
sg10
I5
sg11
g12
sa(dp1480
g3
I01
sg10
I5
sg11
g14
sa(dp1481
g3
I01
sg10
I5
sg11
g16
sa(dp1482
g1
S'default object formatter'
p1483
sg3
I01
sg10
I2
sg11
g19
sa(dp1484
g3
I01
sg10
I5
sg11
g21
sa(dp1485
g3
I01
sg10
I5
sg11
g23
sa(dp1486
g3
I01
sg10
I5
sg11
g25
sa(dp1487
g3
I01
sg10
I5
sg11
g27
sa(dp1488
g3
I01
sg10
I5
sg11
g29
sa(dp1489
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1490
sg3
I01
sg10
I2
sg11
g32
sa(dp1491
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1492
g1
S'helper for pickle'
p1493
sg3
I01
sg10
I2
sg11
g37
sa(dp1494
g3
I01
sg10
I5
sg11
g39
sa(dp1495
g3
I01
sg10
I5
sg11
g41
sa(dp1496
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1497
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1498
sg3
I01
sg10
I2
sg11
g46
sa(dp1499
g3
I01
sg10
I5
sg11
g48
sa(dp1500
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1501
sg3
I01
sg10
I2
sg11
g51
sa(dp1502
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1503
g3
I01
sg10
I5
sg11
g55
sa(dp1504
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'Warning'
p1505
sa(dp1506
g1
S'MS-Windows OS system call failed.'
p1507
sg3
I01
sg4
(lp1508
(dp1509
g3
I01
sg10
I5
sg11
g12
sa(dp1510
g3
I01
sg10
I5
sg11
g14
sa(dp1511
g3
I01
sg10
I5
sg11
g16
sa(dp1512
g1
S'default object formatter'
p1513
sg3
I01
sg10
I2
sg11
g19
sa(dp1514
g3
I01
sg10
I5
sg11
g21
sa(dp1515
g3
I01
sg10
I5
sg11
g23
sa(dp1516
g3
I01
sg10
I5
sg11
g25
sa(dp1517
g3
I01
sg10
I5
sg11
g27
sa(dp1518
g3
I01
sg10
I5
sg11
g29
sa(dp1519
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1520
sg3
I01
sg10
I2
sg11
g32
sa(dp1521
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1522
g1
S'helper for pickle'
p1523
sg3
I01
sg10
I2
sg11
g37
sa(dp1524
g3
I01
sg10
I5
sg11
g39
sa(dp1525
g3
I01
sg10
I5
sg11
g41
sa(dp1526
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1527
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1528
sg3
I01
sg10
I2
sg11
g46
sa(dp1529
g3
I01
sg10
I5
sg11
g48
sa(dp1530
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1531
sg3
I01
sg10
I2
sg11
g51
sa(dp1532
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1533
g3
I01
sg10
I5
sg11
g55
sa(dp1534
g3
I01
sg10
I5
sg11
g300
sa(dp1535
g3
I01
sg10
I5
sg11
g302
sa(dp1536
g3
I01
sg10
I5
sg11
g57
sa(dp1537
g3
I01
sg10
I5
sg11
g305
sa(dp1538
g3
I01
sg10
I5
sg11
S'winerror'
p1539
sasg10
I3
sg11
S'WindowsError'
p1540
sa(dp1541
g1
S'Second argument to a division or modulo operation was zero.'
p1542
sg3
I01
sg4
(lp1543
(dp1544
g3
I01
sg10
I5
sg11
g12
sa(dp1545
g3
I01
sg10
I5
sg11
g14
sa(dp1546
g3
I01
sg10
I5
sg11
g16
sa(dp1547
g1
S'default object formatter'
p1548
sg3
I01
sg10
I2
sg11
g19
sa(dp1549
g3
I01
sg10
I5
sg11
g21
sa(dp1550
g3
I01
sg10
I5
sg11
g23
sa(dp1551
g3
I01
sg10
I5
sg11
g25
sa(dp1552
g3
I01
sg10
I5
sg11
g27
sa(dp1553
g3
I01
sg10
I5
sg11
g29
sa(dp1554
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1555
sg3
I01
sg10
I2
sg11
g32
sa(dp1556
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp1557
g1
S'helper for pickle'
p1558
sg3
I01
sg10
I2
sg11
g37
sa(dp1559
g3
I01
sg10
I5
sg11
g39
sa(dp1560
g3
I01
sg10
I5
sg11
g41
sa(dp1561
g1
Nsg3
I01
sg10
I2
sg11
g43
sa(dp1562
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1563
sg3
I01
sg10
I2
sg11
g46
sa(dp1564
g3
I01
sg10
I5
sg11
g48
sa(dp1565
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1566
sg3
I01
sg10
I2
sg11
g51
sa(dp1567
g1
Nsg3
I01
sg10
I2
sg11
g53
sa(dp1568
g3
I01
sg10
I5
sg11
g55
sa(dp1569
g3
I01
sg10
I5
sg11
g57
sasg10
I3
sg11
S'ZeroDivisionError'
p1570
sa(dp1571
g3
I01
sg10
I5
sg11
S'__debug__'
p1572
sa(dp1573
g3
I01
sg10
I5
sg11
g16
sa(dp1574
g1
S"__import__(name, globals={}, locals={}, fromlist=[], level=-1) -> module\n\nImport a module. Because this function is meant for use by the Python\ninterpreter and not for general use it is better to use\nimportlib.import_module() to programmatically import a module.\n\nThe globals argument is only used to determine the context;\nthey are not modified.  The locals argument is unused.  The fromlist\nshould be a list of names to emulate ``from name import ...'', or an\nempty list to emulate ``import name''.\nWhen importing a module from a package, note that __import__('A.B', ...)\nreturns package A when fromlist is empty, but its submodule B when\nfromlist is not empty.  Level is used to determine whether to perform \nabsolute or relative imports.  -1 is the original strategy of attempting\nboth absolute and relative imports, 0 is absolute, a positive number\nis the number of parent directories to search relative to the current module."
p1575
sg3
I01
sg10
I2
sg11
S'__import__'
p1576
sa(dp1577
g3
I01
sg10
I5
sg11
S'__name__'
p1578
sa(dp1579
g3
I01
sg10
I5
sg11
S'__package__'
p1580
sa(dp1581
g1
S'abs(number) -> number\n\nReturn the absolute value of the argument.'
p1582
sg3
I01
sg10
I2
sg11
S'abs'
p1583
sa(dp1584
g1
S'all(iterable) -> bool\n\nReturn True if bool(x) is True for all values x in the iterable.\nIf the iterable is empty, return True.'
p1585
sg3
I01
sg10
I2
sg11
S'all'
p1586
sa(dp1587
g1
S'any(iterable) -> bool\n\nReturn True if bool(x) is True for any x in the iterable.\nIf the iterable is empty, return False.'
p1588
sg3
I01
sg10
I2
sg11
S'any'
p1589
sa(dp1590
g1
S'apply(object[, args[, kwargs]]) -> value\n\nCall a callable object with positional arguments taken from the tuple args,\nand keyword arguments taken from the optional dictionary kwargs.\nNote that classes are callable, as are instances with a __call__() method.\n\nDeprecated since release 2.3. Instead, use the extended call syntax:\n    function(*args, **keywords).'
p1591
sg3
I01
sg10
I2
sg11
S'apply'
p1592
sa(dp1593
g1
S'Type basestring cannot be instantiated; it is the base for str and unicode.'
p1594
sg3
I01
sg4
(lp1595
(dp1596
g3
I01
sg10
I5
sg11
g12
sa(dp1597
g3
I01
sg10
I5
sg11
g16
sa(dp1598
g1
S'default object formatter'
p1599
sg3
I01
sg10
I2
sg11
g19
sa(dp1600
g3
I01
sg10
I5
sg11
g21
sa(dp1601
g3
I01
sg10
I5
sg11
g27
sa(dp1602
g3
I01
sg10
I5
sg11
g29
sa(dp1603
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1604
sg3
I01
sg10
I2
sg11
g32
sa(dp1605
g1
S'helper for pickle'
p1606
sg3
I01
sg10
I2
sg11
g34
sa(dp1607
g1
S'helper for pickle'
p1608
sg3
I01
sg10
I2
sg11
g37
sa(dp1609
g3
I01
sg10
I5
sg11
g39
sa(dp1610
g3
I01
sg10
I5
sg11
g41
sa(dp1611
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1612
sg3
I01
sg10
I2
sg11
g46
sa(dp1613
g3
I01
sg10
I5
sg11
g48
sa(dp1614
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1615
sg3
I01
sg10
I2
sg11
g51
sasg10
I3
sg11
S'basestring'
p1616
sa(dp1617
g1
S'bin(number) -> string\n\nReturn the binary representation of an integer or long integer.'
p1618
sg3
I01
sg10
I2
sg11
S'bin'
p1619
sa(dp1620
g1
S'bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.'
p1621
sg3
I01
sg4
(lp1622
(dp1623
g3
I01
sg10
I5
sg11
S'__abs__'
p1624
sa(dp1625
g3
I01
sg10
I5
sg11
S'__add__'
p1626
sa(dp1627
g3
I01
sg10
I5
sg11
S'__and__'
p1628
sa(dp1629
g3
I01
sg10
I5
sg11
S'__cmp__'
p1630
sa(dp1631
g3
I01
sg10
I5
sg11
S'__coerce__'
p1632
sa(dp1633
g3
I01
sg10
I5
sg11
g12
sa(dp1634
g3
I01
sg10
I5
sg11
S'__div__'
p1635
sa(dp1636
g3
I01
sg10
I5
sg11
S'__divmod__'
p1637
sa(dp1638
g3
I01
sg10
I5
sg11
g16
sa(dp1639
g3
I01
sg10
I5
sg11
S'__float__'
p1640
sa(dp1641
g3
I01
sg10
I5
sg11
S'__floordiv__'
p1642
sa(dp1643
g1
Nsg3
I01
sg10
I2
sg11
g19
sa(dp1644
g3
I01
sg10
I5
sg11
g21
sa(dp1645
g1
Nsg3
I01
sg10
I2
sg11
S'__getnewargs__'
p1646
sa(dp1647
g3
I01
sg10
I5
sg11
g27
sa(dp1648
g3
I01
sg10
I5
sg11
S'__hex__'
p1649
sa(dp1650
g3
I01
sg10
I5
sg11
S'__index__'
p1651
sa(dp1652
g3
I01
sg10
I5
sg11
g29
sa(dp1653
g3
I01
sg10
I5
sg11
S'__int__'
p1654
sa(dp1655
g3
I01
sg10
I5
sg11
S'__invert__'
p1656
sa(dp1657
g3
I01
sg10
I5
sg11
S'__long__'
p1658
sa(dp1659
g3
I01
sg10
I5
sg11
S'__lshift__'
p1660
sa(dp1661
g3
I01
sg10
I5
sg11
S'__mod__'
p1662
sa(dp1663
g3
I01
sg10
I5
sg11
S'__mul__'
p1664
sa(dp1665
g3
I01
sg10
I5
sg11
S'__neg__'
p1666
sa(dp1667
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1668
sg3
I01
sg10
I2
sg11
g32
sa(dp1669
g3
I01
sg10
I5
sg11
S'__nonzero__'
p1670
sa(dp1671
g3
I01
sg10
I5
sg11
S'__oct__'
p1672
sa(dp1673
g3
I01
sg10
I5
sg11
S'__or__'
p1674
sa(dp1675
g3
I01
sg10
I5
sg11
S'__pos__'
p1676
sa(dp1677
g3
I01
sg10
I5
sg11
S'__pow__'
p1678
sa(dp1679
g3
I01
sg10
I5
sg11
S'__radd__'
p1680
sa(dp1681
g3
I01
sg10
I5
sg11
S'__rand__'
p1682
sa(dp1683
g3
I01
sg10
I5
sg11
S'__rdiv__'
p1684
sa(dp1685
g3
I01
sg10
I5
sg11
S'__rdivmod__'
p1686
sa(dp1687
g1
S'helper for pickle'
p1688
sg3
I01
sg10
I2
sg11
g34
sa(dp1689
g1
S'helper for pickle'
p1690
sg3
I01
sg10
I2
sg11
g37
sa(dp1691
g3
I01
sg10
I5
sg11
g39
sa(dp1692
g3
I01
sg10
I5
sg11
S'__rfloordiv__'
p1693
sa(dp1694
g3
I01
sg10
I5
sg11
S'__rlshift__'
p1695
sa(dp1696
g3
I01
sg10
I5
sg11
S'__rmod__'
p1697
sa(dp1698
g3
I01
sg10
I5
sg11
S'__rmul__'
p1699
sa(dp1700
g3
I01
sg10
I5
sg11
S'__ror__'
p1701
sa(dp1702
g3
I01
sg10
I5
sg11
S'__rpow__'
p1703
sa(dp1704
g3
I01
sg10
I5
sg11
S'__rrshift__'
p1705
sa(dp1706
g3
I01
sg10
I5
sg11
S'__rshift__'
p1707
sa(dp1708
g3
I01
sg10
I5
sg11
S'__rsub__'
p1709
sa(dp1710
g3
I01
sg10
I5
sg11
S'__rtruediv__'
p1711
sa(dp1712
g3
I01
sg10
I5
sg11
S'__rxor__'
p1713
sa(dp1714
g3
I01
sg10
I5
sg11
g41
sa(dp1715
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1716
sg3
I01
sg10
I2
sg11
g46
sa(dp1717
g3
I01
sg10
I5
sg11
g48
sa(dp1718
g3
I01
sg10
I5
sg11
S'__sub__'
p1719
sa(dp1720
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1721
sg3
I01
sg10
I2
sg11
g51
sa(dp1722
g3
I01
sg10
I5
sg11
S'__truediv__'
p1723
sa(dp1724
g1
S'Truncating an Integral returns itself.'
p1725
sg3
I01
sg10
I2
sg11
S'__trunc__'
p1726
sa(dp1727
g3
I01
sg10
I5
sg11
S'__xor__'
p1728
sa(dp1729
g1
S"int.bit_length() -> int\n\nNumber of bits necessary to represent self in binary.\n>>> bin(37)\n'0b100101'\n>>> (37).bit_length()\n6"
p1730
sg3
I01
sg10
I2
sg11
S'bit_length'
p1731
sa(dp1732
g1
S'Returns self, the complex conjugate of any int.'
p1733
sg3
I01
sg10
I2
sg11
S'conjugate'
p1734
sa(dp1735
g3
I01
sg10
I5
sg11
S'denominator'
p1736
sa(dp1737
g3
I01
sg10
I5
sg11
S'imag'
p1738
sa(dp1739
g3
I01
sg10
I5
sg11
S'numerator'
p1740
sa(dp1741
g3
I01
sg10
I5
sg11
S'real'
p1742
sasg10
I3
sg11
S'bool'
p1743
sa(dp1744
g1
S'buffer(object [, offset[, size]])\n\nCreate a new buffer object which references the given object.\nThe buffer will reference a slice of the target object from the\nstart of the object (or at the specified offset). The slice will\nextend to the end of the target object (or with the specified size).'
p1745
sg3
I01
sg4
(lp1746
(dp1747
g3
I01
sg10
I5
sg11
g1626
sa(dp1748
g3
I01
sg10
I5
sg11
g1630
sa(dp1749
g3
I01
sg10
I5
sg11
g12
sa(dp1750
g3
I01
sg10
I5
sg11
S'__delitem__'
p1751
sa(dp1752
g3
I01
sg10
I5
sg11
S'__delslice__'
p1753
sa(dp1754
g3
I01
sg10
I5
sg11
g16
sa(dp1755
g1
S'default object formatter'
p1756
sg3
I01
sg10
I2
sg11
g19
sa(dp1757
g3
I01
sg10
I5
sg11
g21
sa(dp1758
g3
I01
sg10
I5
sg11
g23
sa(dp1759
g3
I01
sg10
I5
sg11
g25
sa(dp1760
g3
I01
sg10
I5
sg11
g27
sa(dp1761
g3
I01
sg10
I5
sg11
g29
sa(dp1762
g3
I01
sg10
I5
sg11
S'__len__'
p1763
sa(dp1764
g3
I01
sg10
I5
sg11
g1664
sa(dp1765
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1766
sg3
I01
sg10
I2
sg11
g32
sa(dp1767
g1
S'helper for pickle'
p1768
sg3
I01
sg10
I2
sg11
g34
sa(dp1769
g1
S'helper for pickle'
p1770
sg3
I01
sg10
I2
sg11
g37
sa(dp1771
g3
I01
sg10
I5
sg11
g39
sa(dp1772
g3
I01
sg10
I5
sg11
g1699
sa(dp1773
g3
I01
sg10
I5
sg11
g41
sa(dp1774
g3
I01
sg10
I5
sg11
S'__setitem__'
p1775
sa(dp1776
g3
I01
sg10
I5
sg11
S'__setslice__'
p1777
sa(dp1778
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p1779
sg3
I01
sg10
I2
sg11
g46
sa(dp1780
g3
I01
sg10
I5
sg11
g48
sa(dp1781
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1782
sg3
I01
sg10
I2
sg11
g51
sasg10
I3
sg11
S'buffer'
p1783
sa(dp1784
g1
S'bytearray(iterable_of_ints) -> bytearray.\nbytearray(string, encoding[, errors]) -> bytearray.\nbytearray(bytes_or_bytearray) -> mutable copy of bytes_or_bytearray.\nbytearray(memory_view) -> bytearray.\n\nConstruct an mutable bytearray object from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - a bytes or a bytearray object\n  - any object implementing the buffer API.\n\nbytearray(int) -> bytearray.\n\nConstruct a zero-initialized bytearray of the given length.'
p1785
sg3
I01
sg4
(lp1786
(dp1787
g3
I01
sg10
I5
sg11
g1626
sa(dp1788
g1
S'B.__alloc__() -> int\n\nReturns the number of bytes actually allocated.'
p1789
sg3
I01
sg10
I2
sg11
S'__alloc__'
p1790
sa(dp1791
g3
I01
sg10
I5
sg11
S'__contains__'
p1792
sa(dp1793
g3
I01
sg10
I5
sg11
g12
sa(dp1794
g3
I01
sg10
I5
sg11
g1751
sa(dp1795
g3
I01
sg10
I5
sg11
g16
sa(dp1796
g3
I01
sg10
I5
sg11
S'__eq__'
p1797
sa(dp1798
g1
S'default object formatter'
p1799
sg3
I01
sg10
I2
sg11
g19
sa(dp1800
g3
I01
sg10
I5
sg11
S'__ge__'
p1801
sa(dp1802
g3
I01
sg10
I5
sg11
g21
sa(dp1803
g3
I01
sg10
I5
sg11
g23
sa(dp1804
g3
I01
sg10
I5
sg11
S'__gt__'
p1805
sa(dp1806
g3
I01
sg10
I5
sg11
g27
sa(dp1807
g3
I01
sg10
I5
sg11
S'__iadd__'
p1808
sa(dp1809
g3
I01
sg10
I5
sg11
S'__imul__'
p1810
sa(dp1811
g3
I01
sg10
I5
sg11
g29
sa(dp1812
g3
I01
sg10
I5
sg11
S'__iter__'
p1813
sa(dp1814
g3
I01
sg10
I5
sg11
S'__le__'
p1815
sa(dp1816
g3
I01
sg10
I5
sg11
g1763
sa(dp1817
g3
I01
sg10
I5
sg11
S'__lt__'
p1818
sa(dp1819
g3
I01
sg10
I5
sg11
g1664
sa(dp1820
g3
I01
sg10
I5
sg11
S'__ne__'
p1821
sa(dp1822
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1823
sg3
I01
sg10
I2
sg11
g32
sa(dp1824
g1
S'Return state information for pickling.'
p1825
sg3
I01
sg10
I2
sg11
g34
sa(dp1826
g1
S'helper for pickle'
p1827
sg3
I01
sg10
I2
sg11
g37
sa(dp1828
g3
I01
sg10
I5
sg11
g39
sa(dp1829
g3
I01
sg10
I5
sg11
g1699
sa(dp1830
g3
I01
sg10
I5
sg11
g41
sa(dp1831
g3
I01
sg10
I5
sg11
g1775
sa(dp1832
g1
S'B.__sizeof__() -> int\n \nReturns the size of B in memory, in bytes'
p1833
sg3
I01
sg10
I2
sg11
g46
sa(dp1834
g3
I01
sg10
I5
sg11
g48
sa(dp1835
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p1836
sg3
I01
sg10
I2
sg11
g51
sa(dp1837
g1
S'B.append(int) -> None\n\nAppend a single item to the end of B.'
p1838
sg3
I01
sg10
I2
sg11
S'append'
p1839
sa(dp1840
g1
S'B.capitalize() -> copy of B\n\nReturn a copy of B with only its first character capitalized (ASCII)\nand the rest lower-cased.'
p1841
sg3
I01
sg10
I2
sg11
S'capitalize'
p1842
sa(dp1843
g1
S'B.center(width[, fillchar]) -> copy of B\n\nReturn B centered in a string of length width.  Padding is\ndone using the specified fill character (default is a space).'
p1844
sg3
I01
sg10
I2
sg11
S'center'
p1845
sa(dp1846
g1
S'B.count(sub [,start [,end]]) -> int\n\nReturn the number of non-overlapping occurrences of subsection sub in\nbytes B[start:end].  Optional arguments start and end are interpreted\nas in slice notation.'
p1847
sg3
I01
sg10
I2
sg11
S'count'
p1848
sa(dp1849
g1
S"B.decode([encoding[, errors]]) -> unicode object.\n\nDecodes B using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme.  Default is 'strict' meaning that encoding errors raise\na UnicodeDecodeError.  Other possible values are 'ignore' and 'replace'\nas well as any other name registered with codecs.register_error that is\nable to handle UnicodeDecodeErrors."
p1850
sg3
I01
sg10
I2
sg11
S'decode'
p1851
sa(dp1852
g1
S'B.endswith(suffix [,start [,end]]) -> bool\n\nReturn True if B ends with the specified suffix, False otherwise.\nWith optional start, test B beginning at that position.\nWith optional end, stop comparing B at that position.\nsuffix can also be a tuple of strings to try.'
p1853
sg3
I01
sg10
I2
sg11
S'endswith'
p1854
sa(dp1855
g1
S'B.expandtabs([tabsize]) -> copy of B\n\nReturn a copy of B where all tab characters are expanded using spaces.\nIf tabsize is not given, a tab size of 8 characters is assumed.'
p1856
sg3
I01
sg10
I2
sg11
S'expandtabs'
p1857
sa(dp1858
g1
S'B.extend(iterable int) -> None\n\nAppend all the elements from the iterator or sequence to the\nend of B.'
p1859
sg3
I01
sg10
I2
sg11
S'extend'
p1860
sa(dp1861
g1
S'B.find(sub [,start [,end]]) -> int\n\nReturn the lowest index in B where subsection sub is found,\nsuch that sub is contained within B[start,end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p1862
sg3
I01
sg10
I2
sg11
S'find'
p1863
sa(dp1864
g1
S"bytearray.fromhex(string) -> bytearray\n\nCreate a bytearray object from a string of hexadecimal numbers.\nSpaces between two numbers are accepted.\nExample: bytearray.fromhex('B9 01EF') -> bytearray(b'\\xb9\\x01\\xef')."
p1865
sg3
I01
sg10
I2
sg11
S'fromhex'
p1866
sa(dp1867
g1
S'B.index(sub [,start [,end]]) -> int\n\nLike B.find() but raise ValueError when the subsection is not found.'
p1868
sg3
I01
sg10
I2
sg11
S'index'
p1869
sa(dp1870
g1
S'B.insert(index, int) -> None\n\nInsert a single item into the bytearray before the given index.'
p1871
sg3
I01
sg10
I2
sg11
S'insert'
p1872
sa(dp1873
g1
S'B.isalnum() -> bool\n\nReturn True if all characters in B are alphanumeric\nand there is at least one character in B, False otherwise.'
p1874
sg3
I01
sg10
I2
sg11
S'isalnum'
p1875
sa(dp1876
g1
S'B.isalpha() -> bool\n\nReturn True if all characters in B are alphabetic\nand there is at least one character in B, False otherwise.'
p1877
sg3
I01
sg10
I2
sg11
S'isalpha'
p1878
sa(dp1879
g1
S'B.isdigit() -> bool\n\nReturn True if all characters in B are digits\nand there is at least one character in B, False otherwise.'
p1880
sg3
I01
sg10
I2
sg11
S'isdigit'
p1881
sa(dp1882
g1
S'B.islower() -> bool\n\nReturn True if all cased characters in B are lowercase and there is\nat least one cased character in B, False otherwise.'
p1883
sg3
I01
sg10
I2
sg11
S'islower'
p1884
sa(dp1885
g1
S'B.isspace() -> bool\n\nReturn True if all characters in B are whitespace\nand there is at least one character in B, False otherwise.'
p1886
sg3
I01
sg10
I2
sg11
S'isspace'
p1887
sa(dp1888
g1
S'B.istitle() -> bool\n\nReturn True if B is a titlecased string and there is at least one\ncharacter in B, i.e. uppercase characters may only follow uncased\ncharacters and lowercase characters only cased ones. Return False\notherwise.'
p1889
sg3
I01
sg10
I2
sg11
S'istitle'
p1890
sa(dp1891
g1
S'B.isupper() -> bool\n\nReturn True if all cased characters in B are uppercase and there is\nat least one cased character in B, False otherwise.'
p1892
sg3
I01
sg10
I2
sg11
S'isupper'
p1893
sa(dp1894
g1
S'B.join(iterable_of_bytes) -> bytes\n\nConcatenates any number of bytearray objects, with B in between each pair.'
p1895
sg3
I01
sg10
I2
sg11
S'join'
p1896
sa(dp1897
g1
S'B.ljust(width[, fillchar]) -> copy of B\n\nReturn B left justified in a string of length width. Padding is\ndone using the specified fill character (default is a space).'
p1898
sg3
I01
sg10
I2
sg11
S'ljust'
p1899
sa(dp1900
g1
S'B.lower() -> copy of B\n\nReturn a copy of B with all ASCII characters converted to lowercase.'
p1901
sg3
I01
sg10
I2
sg11
S'lower'
p1902
sa(dp1903
g1
S'B.lstrip([bytes]) -> bytearray\n\nStrip leading bytes contained in the argument.\nIf the argument is omitted, strip leading ASCII whitespace.'
p1904
sg3
I01
sg10
I2
sg11
S'lstrip'
p1905
sa(dp1906
g1
S'B.partition(sep) -> (head, sep, tail)\n\nSearches for the separator sep in B, and returns the part before it,\nthe separator itself, and the part after it.  If the separator is not\nfound, returns B and two empty bytearray objects.'
p1907
sg3
I01
sg10
I2
sg11
S'partition'
p1908
sa(dp1909
g1
S'B.pop([index]) -> int\n\nRemove and return a single item from B. If no index\nargument is given, will pop the last value.'
p1910
sg3
I01
sg10
I2
sg11
S'pop'
p1911
sa(dp1912
g1
S'B.remove(int) -> None\n\nRemove the first occurance of a value in B.'
p1913
sg3
I01
sg10
I2
sg11
S'remove'
p1914
sa(dp1915
g1
S'B.replace(old, new[, count]) -> bytes\n\nReturn a copy of B with all occurrences of subsection\nold replaced by new.  If the optional argument count is\ngiven, only the first count occurrences are replaced.'
p1916
sg3
I01
sg10
I2
sg11
S'replace'
p1917
sa(dp1918
g1
S'B.reverse() -> None\n\nReverse the order of the values in B in place.'
p1919
sg3
I01
sg10
I2
sg11
S'reverse'
p1920
sa(dp1921
g1
S'B.rfind(sub [,start [,end]]) -> int\n\nReturn the highest index in B where subsection sub is found,\nsuch that sub is contained within B[start,end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p1922
sg3
I01
sg10
I2
sg11
S'rfind'
p1923
sa(dp1924
g1
S'B.rindex(sub [,start [,end]]) -> int\n\nLike B.rfind() but raise ValueError when the subsection is not found.'
p1925
sg3
I01
sg10
I2
sg11
S'rindex'
p1926
sa(dp1927
g1
S'B.rjust(width[, fillchar]) -> copy of B\n\nReturn B right justified in a string of length width. Padding is\ndone using the specified fill character (default is a space)'
p1928
sg3
I01
sg10
I2
sg11
S'rjust'
p1929
sa(dp1930
g1
S'B.rpartition(sep) -> (head, sep, tail)\n\nSearches for the separator sep in B, starting at the end of B,\nand returns the part before it, the separator itself, and the\npart after it.  If the separator is not found, returns two empty\nbytearray objects and B.'
p1931
sg3
I01
sg10
I2
sg11
S'rpartition'
p1932
sa(dp1933
g1
S'B.rsplit(sep[, maxsplit]) -> list of bytearray\n\nReturn a list of the sections in B, using sep as the delimiter,\nstarting at the end of B and working to the front.\nIf sep is not given, B is split on ASCII whitespace characters\n(space, tab, return, newline, formfeed, vertical tab).\nIf maxsplit is given, at most maxsplit splits are done.'
p1934
sg3
I01
sg10
I2
sg11
S'rsplit'
p1935
sa(dp1936
g1
S'B.rstrip([bytes]) -> bytearray\n\nStrip trailing bytes contained in the argument.\nIf the argument is omitted, strip trailing ASCII whitespace.'
p1937
sg3
I01
sg10
I2
sg11
S'rstrip'
p1938
sa(dp1939
g1
S'B.split([sep[, maxsplit]]) -> list of bytearray\n\nReturn a list of the sections in B, using sep as the delimiter.\nIf sep is not given, B is split on ASCII whitespace characters\n(space, tab, return, newline, formfeed, vertical tab).\nIf maxsplit is given, at most maxsplit splits are done.'
p1940
sg3
I01
sg10
I2
sg11
S'split'
p1941
sa(dp1942
g1
S'B.splitlines(keepends=False) -> list of lines\n\nReturn a list of the lines in B, breaking at line boundaries.\nLine breaks are not included in the resulting list unless keepends\nis given and true.'
p1943
sg3
I01
sg10
I2
sg11
S'splitlines'
p1944
sa(dp1945
g1
S'B.startswith(prefix [,start [,end]]) -> bool\n\nReturn True if B starts with the specified prefix, False otherwise.\nWith optional start, test B beginning at that position.\nWith optional end, stop comparing B at that position.\nprefix can also be a tuple of strings to try.'
p1946
sg3
I01
sg10
I2
sg11
S'startswith'
p1947
sa(dp1948
g1
S'B.strip([bytes]) -> bytearray\n\nStrip leading and trailing bytes contained in the argument.\nIf the argument is omitted, strip ASCII whitespace.'
p1949
sg3
I01
sg10
I2
sg11
S'strip'
p1950
sa(dp1951
g1
S'B.swapcase() -> copy of B\n\nReturn a copy of B with uppercase ASCII characters converted\nto lowercase ASCII and vice versa.'
p1952
sg3
I01
sg10
I2
sg11
S'swapcase'
p1953
sa(dp1954
g1
S'B.title() -> copy of B\n\nReturn a titlecased version of B, i.e. ASCII words start with uppercase\ncharacters, all remaining cased characters have lowercase.'
p1955
sg3
I01
sg10
I2
sg11
S'title'
p1956
sa(dp1957
g1
S'B.translate(table[, deletechars]) -> bytearray\n\nReturn a copy of B, where all characters occurring in the\noptional argument deletechars are removed, and the remaining\ncharacters have been mapped through the given translation\ntable, which must be a bytes object of length 256.'
p1958
sg3
I01
sg10
I2
sg11
S'translate'
p1959
sa(dp1960
g1
S'B.upper() -> copy of B\n\nReturn a copy of B with all ASCII characters converted to uppercase.'
p1961
sg3
I01
sg10
I2
sg11
S'upper'
p1962
sa(dp1963
g1
S'B.zfill(width) -> copy of B\n\nPad a numeric string B with zeros on the left, to fill a field\nof the specified width.  B is never truncated.'
p1964
sg3
I01
sg10
I2
sg11
S'zfill'
p1965
sasg10
I3
sg11
S'bytearray'
p1966
sa(dp1967
g1
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p1968
sg3
I01
sg4
(lp1969
(dp1970
g3
I01
sg10
I5
sg11
g1626
sa(dp1971
g3
I01
sg10
I5
sg11
g1792
sa(dp1972
g3
I01
sg10
I5
sg11
g12
sa(dp1973
g3
I01
sg10
I5
sg11
g16
sa(dp1974
g3
I01
sg10
I5
sg11
g1797
sa(dp1975
g1
S'S.__format__(format_spec) -> string\n\nReturn a formatted version of S as described by format_spec.'
p1976
sg3
I01
sg10
I2
sg11
g19
sa(dp1977
g3
I01
sg10
I5
sg11
g1801
sa(dp1978
g3
I01
sg10
I5
sg11
g21
sa(dp1979
g3
I01
sg10
I5
sg11
g23
sa(dp1980
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp1981
g3
I01
sg10
I5
sg11
g25
sa(dp1982
g3
I01
sg10
I5
sg11
g1805
sa(dp1983
g3
I01
sg10
I5
sg11
g27
sa(dp1984
g3
I01
sg10
I5
sg11
g29
sa(dp1985
g3
I01
sg10
I5
sg11
g1815
sa(dp1986
g3
I01
sg10
I5
sg11
g1763
sa(dp1987
g3
I01
sg10
I5
sg11
g1818
sa(dp1988
g3
I01
sg10
I5
sg11
g1662
sa(dp1989
g3
I01
sg10
I5
sg11
g1664
sa(dp1990
g3
I01
sg10
I5
sg11
g1821
sa(dp1991
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p1992
sg3
I01
sg10
I2
sg11
g32
sa(dp1993
g1
S'helper for pickle'
p1994
sg3
I01
sg10
I2
sg11
g34
sa(dp1995
g1
S'helper for pickle'
p1996
sg3
I01
sg10
I2
sg11
g37
sa(dp1997
g3
I01
sg10
I5
sg11
g39
sa(dp1998
g3
I01
sg10
I5
sg11
g1697
sa(dp1999
g3
I01
sg10
I5
sg11
g1699
sa(dp2000
g3
I01
sg10
I5
sg11
g41
sa(dp2001
g1
S'S.__sizeof__() -> size of S in memory, in bytes'
p2002
sg3
I01
sg10
I2
sg11
g46
sa(dp2003
g3
I01
sg10
I5
sg11
g48
sa(dp2004
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2005
sg3
I01
sg10
I2
sg11
g51
sa(dp2006
g1
Nsg3
I01
sg10
I2
sg11
S'_formatter_field_name_split'
p2007
sa(dp2008
g1
Nsg3
I01
sg10
I2
sg11
S'_formatter_parser'
p2009
sa(dp2010
g1
S'S.capitalize() -> string\n\nReturn a copy of the string S with only its first character\ncapitalized.'
p2011
sg3
I01
sg10
I2
sg11
g1842
sa(dp2012
g1
S'S.center(width[, fillchar]) -> string\n\nReturn S centered in a string of length width. Padding is\ndone using the specified fill character (default is a space)'
p2013
sg3
I01
sg10
I2
sg11
g1845
sa(dp2014
g1
S'S.count(sub[, start[, end]]) -> int\n\nReturn the number of non-overlapping occurrences of substring sub in\nstring S[start:end].  Optional arguments start and end are interpreted\nas in slice notation.'
p2015
sg3
I01
sg10
I2
sg11
g1848
sa(dp2016
g1
S"S.decode([encoding[,errors]]) -> object\n\nDecodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\nas well as any other name registered with codecs.register_error that is\nable to handle UnicodeDecodeErrors."
p2017
sg3
I01
sg10
I2
sg11
g1851
sa(dp2018
g1
S"S.encode([encoding[,errors]]) -> object\n\nEncodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n'xmlcharrefreplace' as well as any other name registered with\ncodecs.register_error that is able to handle UnicodeEncodeErrors."
p2019
sg3
I01
sg10
I2
sg11
S'encode'
p2020
sa(dp2021
g1
S'S.endswith(suffix[, start[, end]]) -> bool\n\nReturn True if S ends with the specified suffix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nsuffix can also be a tuple of strings to try.'
p2022
sg3
I01
sg10
I2
sg11
g1854
sa(dp2023
g1
S'S.expandtabs([tabsize]) -> string\n\nReturn a copy of S where all tab characters are expanded using spaces.\nIf tabsize is not given, a tab size of 8 characters is assumed.'
p2024
sg3
I01
sg10
I2
sg11
g1857
sa(dp2025
g1
S'S.find(sub [,start [,end]]) -> int\n\nReturn the lowest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p2026
sg3
I01
sg10
I2
sg11
g1863
sa(dp2027
g1
S"S.format(*args, **kwargs) -> string\n\nReturn a formatted version of S, using substitutions from args and kwargs.\nThe substitutions are identified by braces ('{' and '}')."
p2028
sg3
I01
sg10
I2
sg11
S'format'
p2029
sa(dp2030
g1
S'S.index(sub [,start [,end]]) -> int\n\nLike S.find() but raise ValueError when the substring is not found.'
p2031
sg3
I01
sg10
I2
sg11
g1869
sa(dp2032
g1
S'S.isalnum() -> bool\n\nReturn True if all characters in S are alphanumeric\nand there is at least one character in S, False otherwise.'
p2033
sg3
I01
sg10
I2
sg11
g1875
sa(dp2034
g1
S'S.isalpha() -> bool\n\nReturn True if all characters in S are alphabetic\nand there is at least one character in S, False otherwise.'
p2035
sg3
I01
sg10
I2
sg11
g1878
sa(dp2036
g1
S'S.isdigit() -> bool\n\nReturn True if all characters in S are digits\nand there is at least one character in S, False otherwise.'
p2037
sg3
I01
sg10
I2
sg11
g1881
sa(dp2038
g1
S'S.islower() -> bool\n\nReturn True if all cased characters in S are lowercase and there is\nat least one cased character in S, False otherwise.'
p2039
sg3
I01
sg10
I2
sg11
g1884
sa(dp2040
g1
S'S.isspace() -> bool\n\nReturn True if all characters in S are whitespace\nand there is at least one character in S, False otherwise.'
p2041
sg3
I01
sg10
I2
sg11
g1887
sa(dp2042
g1
S'S.istitle() -> bool\n\nReturn True if S is a titlecased string and there is at least one\ncharacter in S, i.e. uppercase characters may only follow uncased\ncharacters and lowercase characters only cased ones. Return False\notherwise.'
p2043
sg3
I01
sg10
I2
sg11
g1890
sa(dp2044
g1
S'S.isupper() -> bool\n\nReturn True if all cased characters in S are uppercase and there is\nat least one cased character in S, False otherwise.'
p2045
sg3
I01
sg10
I2
sg11
g1893
sa(dp2046
g1
S'S.join(iterable) -> string\n\nReturn a string which is the concatenation of the strings in the\niterable.  The separator between elements is S.'
p2047
sg3
I01
sg10
I2
sg11
g1896
sa(dp2048
g1
S'S.ljust(width[, fillchar]) -> string\n\nReturn S left-justified in a string of length width. Padding is\ndone using the specified fill character (default is a space).'
p2049
sg3
I01
sg10
I2
sg11
g1899
sa(dp2050
g1
S'S.lower() -> string\n\nReturn a copy of the string S converted to lowercase.'
p2051
sg3
I01
sg10
I2
sg11
g1902
sa(dp2052
g1
S'S.lstrip([chars]) -> string or unicode\n\nReturn a copy of the string S with leading whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'
p2053
sg3
I01
sg10
I2
sg11
g1905
sa(dp2054
g1
S'S.partition(sep) -> (head, sep, tail)\n\nSearch for the separator sep in S, and return the part before it,\nthe separator itself, and the part after it.  If the separator is not\nfound, return S and two empty strings.'
p2055
sg3
I01
sg10
I2
sg11
g1908
sa(dp2056
g1
S'S.replace(old, new[, count]) -> string\n\nReturn a copy of string S with all occurrences of substring\nold replaced by new.  If the optional argument count is\ngiven, only the first count occurrences are replaced.'
p2057
sg3
I01
sg10
I2
sg11
g1917
sa(dp2058
g1
S'S.rfind(sub [,start [,end]]) -> int\n\nReturn the highest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p2059
sg3
I01
sg10
I2
sg11
g1923
sa(dp2060
g1
S'S.rindex(sub [,start [,end]]) -> int\n\nLike S.rfind() but raise ValueError when the substring is not found.'
p2061
sg3
I01
sg10
I2
sg11
g1926
sa(dp2062
g1
S'S.rjust(width[, fillchar]) -> string\n\nReturn S right-justified in a string of length width. Padding is\ndone using the specified fill character (default is a space)'
p2063
sg3
I01
sg10
I2
sg11
g1929
sa(dp2064
g1
S'S.rpartition(sep) -> (head, sep, tail)\n\nSearch for the separator sep in S, starting at the end of S, and return\nthe part before it, the separator itself, and the part after it.  If the\nseparator is not found, return two empty strings and S.'
p2065
sg3
I01
sg10
I2
sg11
g1932
sa(dp2066
g1
S'S.rsplit([sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in the string S, using sep as the\ndelimiter string, starting at the end of the string and working\nto the front.  If maxsplit is given, at most maxsplit splits are\ndone. If sep is not specified or is None, any whitespace string\nis a separator.'
p2067
sg3
I01
sg10
I2
sg11
g1935
sa(dp2068
g1
S'S.rstrip([chars]) -> string or unicode\n\nReturn a copy of the string S with trailing whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'
p2069
sg3
I01
sg10
I2
sg11
g1938
sa(dp2070
g1
S'S.split([sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in the string S, using sep as the\ndelimiter string.  If maxsplit is given, at most maxsplit\nsplits are done. If sep is not specified or is None, any\nwhitespace string is a separator and empty strings are removed\nfrom the result.'
p2071
sg3
I01
sg10
I2
sg11
g1941
sa(dp2072
g1
S'S.splitlines(keepends=False) -> list of strings\n\nReturn a list of the lines in S, breaking at line boundaries.\nLine breaks are not included in the resulting list unless keepends\nis given and true.'
p2073
sg3
I01
sg10
I2
sg11
g1944
sa(dp2074
g1
S'S.startswith(prefix[, start[, end]]) -> bool\n\nReturn True if S starts with the specified prefix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nprefix can also be a tuple of strings to try.'
p2075
sg3
I01
sg10
I2
sg11
g1947
sa(dp2076
g1
S'S.strip([chars]) -> string or unicode\n\nReturn a copy of the string S with leading and trailing\nwhitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'
p2077
sg3
I01
sg10
I2
sg11
g1950
sa(dp2078
g1
S'S.swapcase() -> string\n\nReturn a copy of the string S with uppercase characters\nconverted to lowercase and vice versa.'
p2079
sg3
I01
sg10
I2
sg11
g1953
sa(dp2080
g1
S'S.title() -> string\n\nReturn a titlecased version of S, i.e. words start with uppercase\ncharacters, all remaining cased characters have lowercase.'
p2081
sg3
I01
sg10
I2
sg11
g1956
sa(dp2082
g1
S'S.translate(table [,deletechars]) -> string\n\nReturn a copy of the string S, where all characters occurring\nin the optional argument deletechars are removed, and the\nremaining characters have been mapped through the given\ntranslation table, which must be a string of length 256 or None.\nIf the table argument is None, no translation is applied and\nthe operation simply removes the characters in deletechars.'
p2083
sg3
I01
sg10
I2
sg11
g1959
sa(dp2084
g1
S'S.upper() -> string\n\nReturn a copy of the string S converted to uppercase.'
p2085
sg3
I01
sg10
I2
sg11
g1962
sa(dp2086
g1
S'S.zfill(width) -> string\n\nPad a numeric string S with zeros on the left, to fill a field\nof the specified width.  The string S is never truncated.'
p2087
sg3
I01
sg10
I2
sg11
g1965
sasg10
I3
sg11
S'bytes'
p2088
sa(dp2089
g1
S'callable(object) -> bool\n\nReturn whether the object is callable (i.e., some kind of function).\nNote that classes are callable, as are instances with a __call__() method.'
p2090
sg3
I01
sg10
I2
sg11
S'callable'
p2091
sa(dp2092
g1
S'chr(i) -> character\n\nReturn a string of one character with ordinal i; 0 <= i < 256.'
p2093
sg3
I01
sg10
I2
sg11
S'chr'
p2094
sa(dp2095
g1
S'classmethod(function) -> method\n\nConvert a function to be a class method.\n\nA class method receives the class as implicit first argument,\njust like an instance method receives the instance.\nTo declare a class method, use this idiom:\n\n  class C:\n      def f(cls, arg1, arg2, ...): ...\n      f = classmethod(f)\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\nIf a class method is called for a derived class, the derived class\nobject is passed as the implied first argument.\n\nClass methods are different than C++ or Java static methods.\nIf you want those, see the staticmethod builtin.'
p2096
sg3
I01
sg4
(lp2097
(dp2098
g3
I01
sg10
I5
sg11
g12
sa(dp2099
g3
I01
sg10
I5
sg11
g16
sa(dp2100
g1
S'default object formatter'
p2101
sg3
I01
sg10
I2
sg11
g19
sa(dp2102
g3
I01
sg10
I5
sg11
S'__func__'
p2103
sa(dp2104
g3
I01
sg10
I5
sg11
S'__get__'
p2105
sa(dp2106
g3
I01
sg10
I5
sg11
g21
sa(dp2107
g3
I01
sg10
I5
sg11
g27
sa(dp2108
g3
I01
sg10
I5
sg11
g29
sa(dp2109
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2110
sg3
I01
sg10
I2
sg11
g32
sa(dp2111
g1
S'helper for pickle'
p2112
sg3
I01
sg10
I2
sg11
g34
sa(dp2113
g1
S'helper for pickle'
p2114
sg3
I01
sg10
I2
sg11
g37
sa(dp2115
g3
I01
sg10
I5
sg11
g39
sa(dp2116
g3
I01
sg10
I5
sg11
g41
sa(dp2117
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2118
sg3
I01
sg10
I2
sg11
g46
sa(dp2119
g3
I01
sg10
I5
sg11
g48
sa(dp2120
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2121
sg3
I01
sg10
I2
sg11
g51
sasg10
I3
sg11
S'classmethod'
p2122
sa(dp2123
g1
S'cmp(x, y) -> integer\n\nReturn negative if x<y, zero if x==y, positive if x>y.'
p2124
sg3
I01
sg10
I2
sg11
S'cmp'
p2125
sa(dp2126
g1
S'coerce(x, y) -> (x1, y1)\n\nReturn a tuple consisting of the two numeric arguments converted to\na common type, using the same rules as used by arithmetic operations.\nIf coercion is not possible, raise TypeError.'
p2127
sg3
I01
sg10
I2
sg11
S'coerce'
p2128
sa(dp2129
g1
S"compile(source, filename, mode[, flags[, dont_inherit]]) -> code object\n\nCompile the source string (a Python module, statement or expression)\ninto a code object that can be executed by the exec statement or eval().\nThe filename will be used for run-time error messages.\nThe mode must be 'exec' to compile a module, 'single' to compile a\nsingle (interactive) statement, or 'eval' to compile an expression.\nThe flags argument, if present, controls which future statements influence\nthe compilation of the code.\nThe dont_inherit argument, if non-zero, stops the compilation inheriting\nthe effects of any future statements in effect in the code calling\ncompile; if absent or zero these statements do influence the compilation,\nin addition to any features explicitly specified."
p2130
sg3
I01
sg10
I2
sg11
S'compile'
p2131
sa(dp2132
g1
S'complex(real[, imag]) -> complex number\n\nCreate a complex number from a real part and an optional imaginary part.\nThis is equivalent to (real + imag*1j) where imag defaults to 0.'
p2133
sg3
I01
sg4
(lp2134
(dp2135
g3
I01
sg10
I5
sg11
g1624
sa(dp2136
g3
I01
sg10
I5
sg11
g1626
sa(dp2137
g3
I01
sg10
I5
sg11
g1632
sa(dp2138
g3
I01
sg10
I5
sg11
g12
sa(dp2139
g3
I01
sg10
I5
sg11
g1635
sa(dp2140
g3
I01
sg10
I5
sg11
g1637
sa(dp2141
g3
I01
sg10
I5
sg11
g16
sa(dp2142
g3
I01
sg10
I5
sg11
g1797
sa(dp2143
g3
I01
sg10
I5
sg11
g1640
sa(dp2144
g3
I01
sg10
I5
sg11
g1642
sa(dp2145
g1
S'complex.__format__() -> str\n\nConvert to a string according to format_spec.'
p2146
sg3
I01
sg10
I2
sg11
g19
sa(dp2147
g3
I01
sg10
I5
sg11
g1801
sa(dp2148
g3
I01
sg10
I5
sg11
g21
sa(dp2149
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp2150
g3
I01
sg10
I5
sg11
g1805
sa(dp2151
g3
I01
sg10
I5
sg11
g27
sa(dp2152
g3
I01
sg10
I5
sg11
g29
sa(dp2153
g3
I01
sg10
I5
sg11
g1654
sa(dp2154
g3
I01
sg10
I5
sg11
g1815
sa(dp2155
g3
I01
sg10
I5
sg11
g1658
sa(dp2156
g3
I01
sg10
I5
sg11
g1818
sa(dp2157
g3
I01
sg10
I5
sg11
g1662
sa(dp2158
g3
I01
sg10
I5
sg11
g1664
sa(dp2159
g3
I01
sg10
I5
sg11
g1821
sa(dp2160
g3
I01
sg10
I5
sg11
g1666
sa(dp2161
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2162
sg3
I01
sg10
I2
sg11
g32
sa(dp2163
g3
I01
sg10
I5
sg11
g1670
sa(dp2164
g3
I01
sg10
I5
sg11
g1676
sa(dp2165
g3
I01
sg10
I5
sg11
g1678
sa(dp2166
g3
I01
sg10
I5
sg11
g1680
sa(dp2167
g3
I01
sg10
I5
sg11
g1684
sa(dp2168
g3
I01
sg10
I5
sg11
g1686
sa(dp2169
g1
S'helper for pickle'
p2170
sg3
I01
sg10
I2
sg11
g34
sa(dp2171
g1
S'helper for pickle'
p2172
sg3
I01
sg10
I2
sg11
g37
sa(dp2173
g3
I01
sg10
I5
sg11
g39
sa(dp2174
g3
I01
sg10
I5
sg11
g1693
sa(dp2175
g3
I01
sg10
I5
sg11
g1697
sa(dp2176
g3
I01
sg10
I5
sg11
g1699
sa(dp2177
g3
I01
sg10
I5
sg11
g1703
sa(dp2178
g3
I01
sg10
I5
sg11
g1709
sa(dp2179
g3
I01
sg10
I5
sg11
g1711
sa(dp2180
g3
I01
sg10
I5
sg11
g41
sa(dp2181
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2182
sg3
I01
sg10
I2
sg11
g46
sa(dp2183
g3
I01
sg10
I5
sg11
g48
sa(dp2184
g3
I01
sg10
I5
sg11
g1719
sa(dp2185
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2186
sg3
I01
sg10
I2
sg11
g51
sa(dp2187
g3
I01
sg10
I5
sg11
g1723
sa(dp2188
g1
S'complex.conjugate() -> complex\n\nReturn the complex conjugate of its argument. (3-4j).conjugate() == 3+4j.'
p2189
sg3
I01
sg10
I2
sg11
g1734
sa(dp2190
g3
I01
sg10
I5
sg11
g1738
sa(dp2191
g3
I01
sg10
I5
sg11
g1742
sasg10
I3
sg11
S'complex'
p2192
sa(dp2193
g3
I01
sg10
I5
sg11
S'copyright'
p2194
sa(dp2195
g3
I01
sg10
I5
sg11
S'credits'
p2196
sa(dp2197
g1
S"delattr(object, name)\n\nDelete a named attribute on an object; delattr(x, 'y') is equivalent to\n``del x.y''."
p2198
sg3
I01
sg10
I2
sg11
S'delattr'
p2199
sa(dp2200
g1
S"dict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)"
p2201
sg3
I01
sg4
(lp2202
(dp2203
g3
I01
sg10
I5
sg11
g1630
sa(dp2204
g1
S'D.__contains__(k) -> True if D has a key k, else False'
p2205
sg3
I01
sg10
I2
sg11
g1792
sa(dp2206
g3
I01
sg10
I5
sg11
g12
sa(dp2207
g3
I01
sg10
I5
sg11
g1751
sa(dp2208
g3
I01
sg10
I5
sg11
g16
sa(dp2209
g3
I01
sg10
I5
sg11
g1797
sa(dp2210
g1
S'default object formatter'
p2211
sg3
I01
sg10
I2
sg11
g19
sa(dp2212
g3
I01
sg10
I5
sg11
g1801
sa(dp2213
g3
I01
sg10
I5
sg11
g21
sa(dp2214
g1
S'x.__getitem__(y) <==> x[y]'
p2215
sg3
I01
sg10
I2
sg11
g23
sa(dp2216
g3
I01
sg10
I5
sg11
g1805
sa(dp2217
g3
I01
sg10
I5
sg11
g27
sa(dp2218
g3
I01
sg10
I5
sg11
g29
sa(dp2219
g3
I01
sg10
I5
sg11
g1813
sa(dp2220
g3
I01
sg10
I5
sg11
g1815
sa(dp2221
g3
I01
sg10
I5
sg11
g1763
sa(dp2222
g3
I01
sg10
I5
sg11
g1818
sa(dp2223
g3
I01
sg10
I5
sg11
g1821
sa(dp2224
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2225
sg3
I01
sg10
I2
sg11
g32
sa(dp2226
g1
S'helper for pickle'
p2227
sg3
I01
sg10
I2
sg11
g34
sa(dp2228
g1
S'helper for pickle'
p2229
sg3
I01
sg10
I2
sg11
g37
sa(dp2230
g3
I01
sg10
I5
sg11
g39
sa(dp2231
g3
I01
sg10
I5
sg11
g41
sa(dp2232
g3
I01
sg10
I5
sg11
g1775
sa(dp2233
g1
S'D.__sizeof__() -> size of D in memory, in bytes'
p2234
sg3
I01
sg10
I2
sg11
g46
sa(dp2235
g3
I01
sg10
I5
sg11
g48
sa(dp2236
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2237
sg3
I01
sg10
I2
sg11
g51
sa(dp2238
g1
S'D.clear() -> None.  Remove all items from D.'
p2239
sg3
I01
sg10
I2
sg11
S'clear'
p2240
sa(dp2241
g1
S'D.copy() -> a shallow copy of D'
p2242
sg3
I01
sg10
I2
sg11
S'copy'
p2243
sa(dp2244
g1
S'dict.fromkeys(S[,v]) -> New dict with keys from S and values equal to v.\nv defaults to None.'
p2245
sg3
I01
sg10
I2
sg11
S'fromkeys'
p2246
sa(dp2247
g1
S'D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.'
p2248
sg3
I01
sg10
I2
sg11
S'get'
p2249
sa(dp2250
g1
S'D.has_key(k) -> True if D has a key k, else False'
p2251
sg3
I01
sg10
I2
sg11
S'has_key'
p2252
sa(dp2253
g1
S"D.items() -> list of D's (key, value) pairs, as 2-tuples"
p2254
sg3
I01
sg10
I2
sg11
S'items'
p2255
sa(dp2256
g1
S'D.iteritems() -> an iterator over the (key, value) items of D'
p2257
sg3
I01
sg10
I2
sg11
S'iteritems'
p2258
sa(dp2259
g1
S'D.iterkeys() -> an iterator over the keys of D'
p2260
sg3
I01
sg10
I2
sg11
S'iterkeys'
p2261
sa(dp2262
g1
S'D.itervalues() -> an iterator over the values of D'
p2263
sg3
I01
sg10
I2
sg11
S'itervalues'
p2264
sa(dp2265
g1
S"D.keys() -> list of D's keys"
p2266
sg3
I01
sg10
I2
sg11
S'keys'
p2267
sa(dp2268
g1
S'D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\nIf key is not found, d is returned if given, otherwise KeyError is raised'
p2269
sg3
I01
sg10
I2
sg11
g1911
sa(dp2270
g1
S'D.popitem() -> (k, v), remove and return some (key, value) pair as a\n2-tuple; but raise KeyError if D is empty.'
p2271
sg3
I01
sg10
I2
sg11
S'popitem'
p2272
sa(dp2273
g1
S'D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D'
p2274
sg3
I01
sg10
I2
sg11
S'setdefault'
p2275
sa(dp2276
g1
S'D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\nIf E present and has a .keys() method, does:     for k in E: D[k] = E[k]\nIf E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v\nIn either case, this is followed by: for k in F: D[k] = F[k]'
p2277
sg3
I01
sg10
I2
sg11
S'update'
p2278
sa(dp2279
g1
S"D.values() -> list of D's values"
p2280
sg3
I01
sg10
I2
sg11
S'values'
p2281
sa(dp2282
g1
S"D.viewitems() -> a set-like object providing a view on D's items"
p2283
sg3
I01
sg10
I2
sg11
S'viewitems'
p2284
sa(dp2285
g1
S"D.viewkeys() -> a set-like object providing a view on D's keys"
p2286
sg3
I01
sg10
I2
sg11
S'viewkeys'
p2287
sa(dp2288
g1
S"D.viewvalues() -> an object providing a view on D's values"
p2289
sg3
I01
sg10
I2
sg11
S'viewvalues'
p2290
sasg10
I3
sg11
S'dict'
p2291
sa(dp2292
g1
S"dir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes."
p2293
sg3
I01
sg10
I2
sg11
S'dir'
p2294
sa(dp2295
g1
S'divmod(x, y) -> (quotient, remainder)\n\nReturn the tuple ((x-x%y)/y, x%y).  Invariant: div*y + mod == x.'
p2296
sg3
I01
sg10
I2
sg11
S'divmod'
p2297
sa(dp2298
g1
S'enumerate(iterable[, start]) -> iterator for index, value of iterable\n\nReturn an enumerate object.  iterable must be another object that supports\niteration.  The enumerate object yields pairs containing a count (from\nstart, which defaults to zero) and a value yielded by the iterable argument.\nenumerate is useful for obtaining an indexed list:\n    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...'
p2299
sg3
I01
sg4
(lp2300
(dp2301
g3
I01
sg10
I5
sg11
g12
sa(dp2302
g3
I01
sg10
I5
sg11
g16
sa(dp2303
g1
S'default object formatter'
p2304
sg3
I01
sg10
I2
sg11
g19
sa(dp2305
g3
I01
sg10
I5
sg11
g21
sa(dp2306
g3
I01
sg10
I5
sg11
g27
sa(dp2307
g3
I01
sg10
I5
sg11
g29
sa(dp2308
g3
I01
sg10
I5
sg11
g1813
sa(dp2309
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2310
sg3
I01
sg10
I2
sg11
g32
sa(dp2311
g1
S'helper for pickle'
p2312
sg3
I01
sg10
I2
sg11
g34
sa(dp2313
g1
S'helper for pickle'
p2314
sg3
I01
sg10
I2
sg11
g37
sa(dp2315
g3
I01
sg10
I5
sg11
g39
sa(dp2316
g3
I01
sg10
I5
sg11
g41
sa(dp2317
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2318
sg3
I01
sg10
I2
sg11
g46
sa(dp2319
g3
I01
sg10
I5
sg11
g48
sa(dp2320
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2321
sg3
I01
sg10
I2
sg11
g51
sa(dp2322
g3
I01
sg10
I5
sg11
S'next'
p2323
sasg10
I3
sg11
S'enumerate'
p2324
sa(dp2325
g1
S'eval(source[, globals[, locals]]) -> value\n\nEvaluate the source in the context of globals and locals.\nThe source may be a string representing a Python expression\nor a code object as returned by compile().\nThe globals must be a dictionary and locals can be any mapping,\ndefaulting to the current globals and locals.\nIf only globals is given, locals defaults to it.\n'
p2326
sg3
I01
sg10
I2
sg11
S'eval'
p2327
sa(dp2328
g1
S'execfile(filename[, globals[, locals]])\n\nRead and execute a Python script from a file.\nThe globals and locals are dictionaries, defaulting to the current\nglobals and locals.  If only globals is given, locals defaults to it.'
p2329
sg3
I01
sg10
I2
sg11
S'execfile'
p2330
sa(dp2331
g3
I01
sg10
I5
sg11
S'exit'
p2332
sa(dp2333
g1
S"file(name[, mode[, buffering]]) -> file object\n\nOpen a file.  The mode can be 'r', 'w' or 'a' for reading (default),\nwriting or appending.  The file will be created if it doesn't exist\nwhen opened for writing or appending; it will be truncated when\nopened for writing.  Add a 'b' to the mode for binary files.\nAdd a '+' to the mode to allow simultaneous reading and writing.\nIf the buffering argument is given, 0 means unbuffered, 1 means line\nbuffered, and larger numbers specify the buffer size.  The preferred way\nto open a file is with the builtin open() function.\nAdd a 'U' to mode to open the file for input with universal newline\nsupport.  Any line ending in the input file will be seen as a '\\n'\nin Python.  Also, a file so opened gains the attribute 'newlines';\nthe value for this attribute is one of None (no newline read yet),\n'\\r', '\\n', '\\r\\n' or a tuple containing all the newline types seen.\n\n'U' cannot be combined with 'w' or '+' mode.\n"
p2334
sg3
I01
sg4
(lp2335
(dp2336
g3
I01
sg10
I5
sg11
g12
sa(dp2337
g3
I01
sg10
I5
sg11
g16
sa(dp2338
g1
S'__enter__() -> self.'
p2339
sg3
I01
sg10
I2
sg11
S'__enter__'
p2340
sa(dp2341
g1
S'__exit__(*excinfo) -> None.  Closes the file.'
p2342
sg3
I01
sg10
I2
sg11
S'__exit__'
p2343
sa(dp2344
g1
S'default object formatter'
p2345
sg3
I01
sg10
I2
sg11
g19
sa(dp2346
g3
I01
sg10
I5
sg11
g21
sa(dp2347
g3
I01
sg10
I5
sg11
g27
sa(dp2348
g3
I01
sg10
I5
sg11
g29
sa(dp2349
g3
I01
sg10
I5
sg11
g1813
sa(dp2350
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2351
sg3
I01
sg10
I2
sg11
g32
sa(dp2352
g1
S'helper for pickle'
p2353
sg3
I01
sg10
I2
sg11
g34
sa(dp2354
g1
S'helper for pickle'
p2355
sg3
I01
sg10
I2
sg11
g37
sa(dp2356
g3
I01
sg10
I5
sg11
g39
sa(dp2357
g3
I01
sg10
I5
sg11
g41
sa(dp2358
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2359
sg3
I01
sg10
I2
sg11
g46
sa(dp2360
g3
I01
sg10
I5
sg11
g48
sa(dp2361
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2362
sg3
I01
sg10
I2
sg11
g51
sa(dp2363
g1
S'close() -> None or (perhaps) an integer.  Close the file.\n\nSets data attribute .closed to True.  A closed file cannot be used for\nfurther I/O operations.  close() may be called more than once without\nerror.  Some kinds of file objects (for example, opened by popen())\nmay return an exit status upon closing.'
p2364
sg3
I01
sg10
I2
sg11
S'close'
p2365
sa(dp2366
g3
I01
sg10
I5
sg11
S'closed'
p2367
sa(dp2368
g3
I01
sg10
I5
sg11
g1275
sa(dp2369
g3
I01
sg10
I5
sg11
S'errors'
p2370
sa(dp2371
g1
S'fileno() -> integer "file descriptor".\n\nThis is needed for lower-level file interfaces, such os.read().'
p2372
sg3
I01
sg10
I2
sg11
S'fileno'
p2373
sa(dp2374
g1
S'flush() -> None.  Flush the internal I/O buffer.'
p2375
sg3
I01
sg10
I2
sg11
S'flush'
p2376
sa(dp2377
g1
S'isatty() -> true or false.  True if the file is connected to a tty device.'
p2378
sg3
I01
sg10
I2
sg11
S'isatty'
p2379
sa(dp2380
g3
I01
sg10
I5
sg11
S'mode'
p2381
sa(dp2382
g3
I01
sg10
I5
sg11
g11
sa(dp2383
g3
I01
sg10
I5
sg11
S'newlines'
p2384
sa(dp2385
g3
I01
sg10
I5
sg11
g2323
sa(dp2386
g1
S'read([size]) -> read at most size bytes, returned as a string.\n\nIf the size argument is negative or omitted, read until EOF is reached.\nNotice that when in non-blocking mode, less data than what was requested\nmay be returned, even if no size parameter was given.'
p2387
sg3
I01
sg10
I2
sg11
S'read'
p2388
sa(dp2389
g1
S"readinto() -> Undocumented.  Don't use this; it may go away."
p2390
sg3
I01
sg10
I2
sg11
S'readinto'
p2391
sa(dp2392
g1
S'readline([size]) -> next line from the file, as a string.\n\nRetain newline.  A non-negative size argument limits the maximum\nnumber of bytes to return (an incomplete line may be returned then).\nReturn an empty string at EOF.'
p2393
sg3
I01
sg10
I2
sg11
S'readline'
p2394
sa(dp2395
g1
S'readlines([size]) -> list of strings, each a line from the file.\n\nCall readline() repeatedly and return a list of the lines so read.\nThe optional size argument, if given, is an approximate bound on the\ntotal number of bytes in the lines returned.'
p2396
sg3
I01
sg10
I2
sg11
S'readlines'
p2397
sa(dp2398
g1
S'seek(offset[, whence]) -> None.  Move to new file position.\n\nArgument offset is a byte count.  Optional argument whence defaults to\n0 (offset from start of file, offset should be >= 0); other values are 1\n(move relative to current position, positive or negative), and 2 (move\nrelative to end of file, usually negative, although many platforms allow\nseeking beyond the end of a file).  If the file is opened in text mode,\nonly offsets returned by tell() are legal.  Use of other offsets causes\nundefined behavior.\nNote that not all file objects are seekable.'
p2399
sg3
I01
sg10
I2
sg11
S'seek'
p2400
sa(dp2401
g3
I01
sg10
I5
sg11
S'softspace'
p2402
sa(dp2403
g1
S'tell() -> current file position, an integer (may be a long integer).'
p2404
sg3
I01
sg10
I2
sg11
S'tell'
p2405
sa(dp2406
g1
S'truncate([size]) -> None.  Truncate the file to at most size bytes.\n\nSize defaults to the current file position, as returned by tell().'
p2407
sg3
I01
sg10
I2
sg11
S'truncate'
p2408
sa(dp2409
g1
S'write(str) -> None.  Write string str to file.\n\nNote that due to buffering, flush() or close() may be needed before\nthe file on disk reflects the data written.'
p2410
sg3
I01
sg10
I2
sg11
S'write'
p2411
sa(dp2412
g1
S'writelines(sequence_of_strings) -> None.  Write the strings to the file.\n\nNote that newlines are not added.  The sequence can be any iterable object\nproducing strings. This is equivalent to calling write() for each string.'
p2413
sg3
I01
sg10
I2
sg11
S'writelines'
p2414
sa(dp2415
g1
S'xreadlines() -> returns self.\n\nFor backward compatibility. File objects now include the performance\noptimizations previously implemented in the xreadlines module.'
p2416
sg3
I01
sg10
I2
sg11
S'xreadlines'
p2417
sasg10
I3
sg11
S'file'
p2418
sa(dp2419
g1
S'filter(function or None, sequence) -> list, tuple, or string\n\nReturn those items of sequence for which function(item) is true.  If\nfunction is None, return the items that are true.  If sequence is a tuple\nor string, return the same type, else return a list.'
p2420
sg3
I01
sg10
I2
sg11
S'filter'
p2421
sa(dp2422
g1
S'float(x) -> floating point number\n\nConvert a string or number to a floating point number, if possible.'
p2423
sg3
I01
sg4
(lp2424
(dp2425
g3
I01
sg10
I5
sg11
g1624
sa(dp2426
g3
I01
sg10
I5
sg11
g1626
sa(dp2427
g3
I01
sg10
I5
sg11
g1632
sa(dp2428
g3
I01
sg10
I5
sg11
g12
sa(dp2429
g3
I01
sg10
I5
sg11
g1635
sa(dp2430
g3
I01
sg10
I5
sg11
g1637
sa(dp2431
g3
I01
sg10
I5
sg11
g16
sa(dp2432
g3
I01
sg10
I5
sg11
g1797
sa(dp2433
g3
I01
sg10
I5
sg11
g1640
sa(dp2434
g3
I01
sg10
I5
sg11
g1642
sa(dp2435
g1
S'float.__format__(format_spec) -> string\n\nFormats the float according to format_spec.'
p2436
sg3
I01
sg10
I2
sg11
g19
sa(dp2437
g3
I01
sg10
I5
sg11
g1801
sa(dp2438
g3
I01
sg10
I5
sg11
g21
sa(dp2439
g1
S"float.__getformat__(typestr) -> string\n\nYou probably don't want to use this function.  It exists mainly to be\nused in Python's test suite.\n\ntypestr must be 'double' or 'float'.  This function returns whichever of\n'unknown', 'IEEE, big-endian' or 'IEEE, little-endian' best describes the\nformat of floating point numbers used by the C type named by typestr."
p2440
sg3
I01
sg10
I2
sg11
S'__getformat__'
p2441
sa(dp2442
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp2443
g3
I01
sg10
I5
sg11
g1805
sa(dp2444
g3
I01
sg10
I5
sg11
g27
sa(dp2445
g3
I01
sg10
I5
sg11
g29
sa(dp2446
g3
I01
sg10
I5
sg11
g1654
sa(dp2447
g3
I01
sg10
I5
sg11
g1815
sa(dp2448
g3
I01
sg10
I5
sg11
g1658
sa(dp2449
g3
I01
sg10
I5
sg11
g1818
sa(dp2450
g3
I01
sg10
I5
sg11
g1662
sa(dp2451
g3
I01
sg10
I5
sg11
g1664
sa(dp2452
g3
I01
sg10
I5
sg11
g1821
sa(dp2453
g3
I01
sg10
I5
sg11
g1666
sa(dp2454
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2455
sg3
I01
sg10
I2
sg11
g32
sa(dp2456
g3
I01
sg10
I5
sg11
g1670
sa(dp2457
g3
I01
sg10
I5
sg11
g1676
sa(dp2458
g3
I01
sg10
I5
sg11
g1678
sa(dp2459
g3
I01
sg10
I5
sg11
g1680
sa(dp2460
g3
I01
sg10
I5
sg11
g1684
sa(dp2461
g3
I01
sg10
I5
sg11
g1686
sa(dp2462
g1
S'helper for pickle'
p2463
sg3
I01
sg10
I2
sg11
g34
sa(dp2464
g1
S'helper for pickle'
p2465
sg3
I01
sg10
I2
sg11
g37
sa(dp2466
g3
I01
sg10
I5
sg11
g39
sa(dp2467
g3
I01
sg10
I5
sg11
g1693
sa(dp2468
g3
I01
sg10
I5
sg11
g1697
sa(dp2469
g3
I01
sg10
I5
sg11
g1699
sa(dp2470
g3
I01
sg10
I5
sg11
g1703
sa(dp2471
g3
I01
sg10
I5
sg11
g1709
sa(dp2472
g3
I01
sg10
I5
sg11
g1711
sa(dp2473
g3
I01
sg10
I5
sg11
g41
sa(dp2474
g1
S"float.__setformat__(typestr, fmt) -> None\n\nYou probably don't want to use this function.  It exists mainly to be\nused in Python's test suite.\n\ntypestr must be 'double' or 'float'.  fmt must be one of 'unknown',\n'IEEE, big-endian' or 'IEEE, little-endian', and in addition can only be\none of the latter two if it appears to match the underlying C reality.\n\nOverride the automatic determination of C-level floating point type.\nThis affects how floats are converted to and from binary strings."
p2475
sg3
I01
sg10
I2
sg11
S'__setformat__'
p2476
sa(dp2477
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2478
sg3
I01
sg10
I2
sg11
g46
sa(dp2479
g3
I01
sg10
I5
sg11
g48
sa(dp2480
g3
I01
sg10
I5
sg11
g1719
sa(dp2481
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2482
sg3
I01
sg10
I2
sg11
g51
sa(dp2483
g3
I01
sg10
I5
sg11
g1723
sa(dp2484
g1
S'Return the Integral closest to x between 0 and x.'
p2485
sg3
I01
sg10
I2
sg11
g1726
sa(dp2486
g1
S'float.as_integer_ratio() -> (int, int)\n\nReturn a pair of integers, whose ratio is exactly equal to the original\nfloat and with a positive denominator.\nRaise OverflowError on infinities and a ValueError on NaNs.\n\n>>> (10.0).as_integer_ratio()\n(10, 1)\n>>> (0.0).as_integer_ratio()\n(0, 1)\n>>> (-.25).as_integer_ratio()\n(-1, 4)'
p2487
sg3
I01
sg10
I2
sg11
S'as_integer_ratio'
p2488
sa(dp2489
g1
S'Return self, the complex conjugate of any float.'
p2490
sg3
I01
sg10
I2
sg11
g1734
sa(dp2491
g1
S"float.fromhex(string) -> float\n\nCreate a floating-point number from a hexadecimal string.\n>>> float.fromhex('0x1.ffffp10')\n2047.984375\n>>> float.fromhex('-0x1p-1074')\n-4.9406564584124654e-324"
p2492
sg3
I01
sg10
I2
sg11
g1866
sa(dp2493
g1
S"float.hex() -> string\n\nReturn a hexadecimal representation of a floating-point number.\n>>> (-0.1).hex()\n'-0x1.999999999999ap-4'\n>>> 3.14159.hex()\n'0x1.921f9f01b866ep+1'"
p2494
sg3
I01
sg10
I2
sg11
S'hex'
p2495
sa(dp2496
g3
I01
sg10
I5
sg11
g1738
sa(dp2497
g1
S'Return True if the float is an integer.'
p2498
sg3
I01
sg10
I2
sg11
S'is_integer'
p2499
sa(dp2500
g3
I01
sg10
I5
sg11
g1742
sasg10
I3
sg11
S'float'
p2501
sa(dp2502
g1
S'format(value[, format_spec]) -> string\n\nReturns value.__format__(format_spec)\nformat_spec defaults to ""'
p2503
sg3
I01
sg10
I2
sg11
g2029
sa(dp2504
g1
S'frozenset() -> empty frozenset object\nfrozenset(iterable) -> frozenset object\n\nBuild an immutable unordered collection of unique elements.'
p2505
sg3
I01
sg4
(lp2506
(dp2507
g3
I01
sg10
I5
sg11
g1628
sa(dp2508
g3
I01
sg10
I5
sg11
g1630
sa(dp2509
g1
S'x.__contains__(y) <==> y in x.'
p2510
sg3
I01
sg10
I2
sg11
g1792
sa(dp2511
g3
I01
sg10
I5
sg11
g12
sa(dp2512
g3
I01
sg10
I5
sg11
g16
sa(dp2513
g3
I01
sg10
I5
sg11
g1797
sa(dp2514
g1
S'default object formatter'
p2515
sg3
I01
sg10
I2
sg11
g19
sa(dp2516
g3
I01
sg10
I5
sg11
g1801
sa(dp2517
g3
I01
sg10
I5
sg11
g21
sa(dp2518
g3
I01
sg10
I5
sg11
g1805
sa(dp2519
g3
I01
sg10
I5
sg11
g27
sa(dp2520
g3
I01
sg10
I5
sg11
g29
sa(dp2521
g3
I01
sg10
I5
sg11
g1813
sa(dp2522
g3
I01
sg10
I5
sg11
g1815
sa(dp2523
g3
I01
sg10
I5
sg11
g1763
sa(dp2524
g3
I01
sg10
I5
sg11
g1818
sa(dp2525
g3
I01
sg10
I5
sg11
g1821
sa(dp2526
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2527
sg3
I01
sg10
I2
sg11
g32
sa(dp2528
g3
I01
sg10
I5
sg11
g1674
sa(dp2529
g3
I01
sg10
I5
sg11
g1682
sa(dp2530
g1
S'Return state information for pickling.'
p2531
sg3
I01
sg10
I2
sg11
g34
sa(dp2532
g1
S'helper for pickle'
p2533
sg3
I01
sg10
I2
sg11
g37
sa(dp2534
g3
I01
sg10
I5
sg11
g39
sa(dp2535
g3
I01
sg10
I5
sg11
g1701
sa(dp2536
g3
I01
sg10
I5
sg11
g1709
sa(dp2537
g3
I01
sg10
I5
sg11
g1713
sa(dp2538
g3
I01
sg10
I5
sg11
g41
sa(dp2539
g1
S'S.__sizeof__() -> size of S in memory, in bytes'
p2540
sg3
I01
sg10
I2
sg11
g46
sa(dp2541
g3
I01
sg10
I5
sg11
g48
sa(dp2542
g3
I01
sg10
I5
sg11
g1719
sa(dp2543
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2544
sg3
I01
sg10
I2
sg11
g51
sa(dp2545
g3
I01
sg10
I5
sg11
g1728
sa(dp2546
g1
S'Return a shallow copy of a set.'
p2547
sg3
I01
sg10
I2
sg11
g2243
sa(dp2548
g1
S'Return the difference of two or more sets as a new set.\n\n(i.e. all elements that are in this set but not the others.)'
p2549
sg3
I01
sg10
I2
sg11
S'difference'
p2550
sa(dp2551
g1
S'Return the intersection of two or more sets as a new set.\n\n(i.e. elements that are common to all of the sets.)'
p2552
sg3
I01
sg10
I2
sg11
S'intersection'
p2553
sa(dp2554
g1
S'Return True if two sets have a null intersection.'
p2555
sg3
I01
sg10
I2
sg11
S'isdisjoint'
p2556
sa(dp2557
g1
S'Report whether another set contains this set.'
p2558
sg3
I01
sg10
I2
sg11
S'issubset'
p2559
sa(dp2560
g1
S'Report whether this set contains another set.'
p2561
sg3
I01
sg10
I2
sg11
S'issuperset'
p2562
sa(dp2563
g1
S'Return the symmetric difference of two sets as a new set.\n\n(i.e. all elements that are in exactly one of the sets.)'
p2564
sg3
I01
sg10
I2
sg11
S'symmetric_difference'
p2565
sa(dp2566
g1
S'Return the union of sets as a new set.\n\n(i.e. all elements that are in either set.)'
p2567
sg3
I01
sg10
I2
sg11
S'union'
p2568
sasg10
I3
sg11
S'frozenset'
p2569
sa(dp2570
g1
S"getattr(object, name[, default]) -> value\n\nGet a named attribute from an object; getattr(x, 'y') is equivalent to x.y.\nWhen a default argument is given, it is returned when the attribute doesn't\nexist; without it, an exception is raised in that case."
p2571
sg3
I01
sg10
I2
sg11
S'getattr'
p2572
sa(dp2573
g1
S"globals() -> dictionary\n\nReturn the dictionary containing the current scope's global variables."
p2574
sg3
I01
sg10
I2
sg11
S'globals'
p2575
sa(dp2576
g1
S'hasattr(object, name) -> bool\n\nReturn whether the object has an attribute with the given name.\n(This is done by calling getattr(object, name) and catching exceptions.)'
p2577
sg3
I01
sg10
I2
sg11
S'hasattr'
p2578
sa(dp2579
g1
S'hash(object) -> integer\n\nReturn a hash value for the object.  Two objects with the same value have\nthe same hash value.  The reverse is not necessarily true, but likely.'
p2580
sg3
I01
sg10
I2
sg11
S'hash'
p2581
sa(dp2582
g3
I01
sg10
I5
sg11
S'help'
p2583
sa(dp2584
g1
S'hex(number) -> string\n\nReturn the hexadecimal representation of an integer or long integer.'
p2585
sg3
I01
sg10
I2
sg11
g2495
sa(dp2586
g1
S"id(object) -> integer\n\nReturn the identity of an object.  This is guaranteed to be unique among\nsimultaneously existing objects.  (Hint: it's the object's memory address.)"
p2587
sg3
I01
sg10
I2
sg11
S'id'
p2588
sa(dp2589
g1
S'input([prompt]) -> value\n\nEquivalent to eval(raw_input(prompt)).'
p2590
sg3
I01
sg10
I2
sg11
S'input'
p2591
sa(dp2592
g1
S"int(x=0) -> int or long\nint(x, base=10) -> int or long\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\nIf x is outside the integer range, the function returns a long instead.\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4"
p2593
sg3
I01
sg4
(lp2594
(dp2595
g3
I01
sg10
I5
sg11
g1624
sa(dp2596
g3
I01
sg10
I5
sg11
g1626
sa(dp2597
g3
I01
sg10
I5
sg11
g1628
sa(dp2598
g3
I01
sg10
I5
sg11
g1630
sa(dp2599
g3
I01
sg10
I5
sg11
g1632
sa(dp2600
g3
I01
sg10
I5
sg11
g12
sa(dp2601
g3
I01
sg10
I5
sg11
g1635
sa(dp2602
g3
I01
sg10
I5
sg11
g1637
sa(dp2603
g3
I01
sg10
I5
sg11
g16
sa(dp2604
g3
I01
sg10
I5
sg11
g1640
sa(dp2605
g3
I01
sg10
I5
sg11
g1642
sa(dp2606
g1
Nsg3
I01
sg10
I2
sg11
g19
sa(dp2607
g3
I01
sg10
I5
sg11
g21
sa(dp2608
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp2609
g3
I01
sg10
I5
sg11
g27
sa(dp2610
g3
I01
sg10
I5
sg11
g1649
sa(dp2611
g3
I01
sg10
I5
sg11
g1651
sa(dp2612
g3
I01
sg10
I5
sg11
g29
sa(dp2613
g3
I01
sg10
I5
sg11
g1654
sa(dp2614
g3
I01
sg10
I5
sg11
g1656
sa(dp2615
g3
I01
sg10
I5
sg11
g1658
sa(dp2616
g3
I01
sg10
I5
sg11
g1660
sa(dp2617
g3
I01
sg10
I5
sg11
g1662
sa(dp2618
g3
I01
sg10
I5
sg11
g1664
sa(dp2619
g3
I01
sg10
I5
sg11
g1666
sa(dp2620
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2621
sg3
I01
sg10
I2
sg11
g32
sa(dp2622
g3
I01
sg10
I5
sg11
g1670
sa(dp2623
g3
I01
sg10
I5
sg11
g1672
sa(dp2624
g3
I01
sg10
I5
sg11
g1674
sa(dp2625
g3
I01
sg10
I5
sg11
g1676
sa(dp2626
g3
I01
sg10
I5
sg11
g1678
sa(dp2627
g3
I01
sg10
I5
sg11
g1680
sa(dp2628
g3
I01
sg10
I5
sg11
g1682
sa(dp2629
g3
I01
sg10
I5
sg11
g1684
sa(dp2630
g3
I01
sg10
I5
sg11
g1686
sa(dp2631
g1
S'helper for pickle'
p2632
sg3
I01
sg10
I2
sg11
g34
sa(dp2633
g1
S'helper for pickle'
p2634
sg3
I01
sg10
I2
sg11
g37
sa(dp2635
g3
I01
sg10
I5
sg11
g39
sa(dp2636
g3
I01
sg10
I5
sg11
g1693
sa(dp2637
g3
I01
sg10
I5
sg11
g1695
sa(dp2638
g3
I01
sg10
I5
sg11
g1697
sa(dp2639
g3
I01
sg10
I5
sg11
g1699
sa(dp2640
g3
I01
sg10
I5
sg11
g1701
sa(dp2641
g3
I01
sg10
I5
sg11
g1703
sa(dp2642
g3
I01
sg10
I5
sg11
g1705
sa(dp2643
g3
I01
sg10
I5
sg11
g1707
sa(dp2644
g3
I01
sg10
I5
sg11
g1709
sa(dp2645
g3
I01
sg10
I5
sg11
g1711
sa(dp2646
g3
I01
sg10
I5
sg11
g1713
sa(dp2647
g3
I01
sg10
I5
sg11
g41
sa(dp2648
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2649
sg3
I01
sg10
I2
sg11
g46
sa(dp2650
g3
I01
sg10
I5
sg11
g48
sa(dp2651
g3
I01
sg10
I5
sg11
g1719
sa(dp2652
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2653
sg3
I01
sg10
I2
sg11
g51
sa(dp2654
g3
I01
sg10
I5
sg11
g1723
sa(dp2655
g1
S'Truncating an Integral returns itself.'
p2656
sg3
I01
sg10
I2
sg11
g1726
sa(dp2657
g3
I01
sg10
I5
sg11
g1728
sa(dp2658
g1
S"int.bit_length() -> int\n\nNumber of bits necessary to represent self in binary.\n>>> bin(37)\n'0b100101'\n>>> (37).bit_length()\n6"
p2659
sg3
I01
sg10
I2
sg11
g1731
sa(dp2660
g1
S'Returns self, the complex conjugate of any int.'
p2661
sg3
I01
sg10
I2
sg11
g1734
sa(dp2662
g3
I01
sg10
I5
sg11
g1736
sa(dp2663
g3
I01
sg10
I5
sg11
g1738
sa(dp2664
g3
I01
sg10
I5
sg11
g1740
sa(dp2665
g3
I01
sg10
I5
sg11
g1742
sasg10
I3
sg11
S'int'
p2666
sa(dp2667
g1
S"intern(string) -> string\n\n``Intern'' the given string.  This enters the string in the (global)\ntable of interned strings whose purpose is to speed up dictionary lookups.\nReturn the string itself or the previously interned string object with the\nsame value."
p2668
sg3
I01
sg10
I2
sg11
S'intern'
p2669
sa(dp2670
g1
S"isinstance(object, class-or-type-or-tuple) -> bool\n\nReturn whether an object is an instance of a class or of a subclass thereof.\nWith a type as second argument, return whether that is the object's type.\nThe form using a tuple, isinstance(x, (A, B, ...)), is a shortcut for\nisinstance(x, A) or isinstance(x, B) or ... (etc.)."
p2671
sg3
I01
sg10
I2
sg11
S'isinstance'
p2672
sa(dp2673
g1
S'issubclass(C, B) -> bool\n\nReturn whether class C is a subclass (i.e., a derived class) of class B.\nWhen using a tuple as the second argument issubclass(X, (A, B, ...)),\nis a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).'
p2674
sg3
I01
sg10
I2
sg11
S'issubclass'
p2675
sa(dp2676
g1
S'iter(collection) -> iterator\niter(callable, sentinel) -> iterator\n\nGet an iterator from an object.  In the first form, the argument must\nsupply its own iterator, or be a sequence.\nIn the second form, the callable is called until it returns the sentinel.'
p2677
sg3
I01
sg10
I2
sg11
S'iter'
p2678
sa(dp2679
g1
S'len(object) -> integer\n\nReturn the number of items of a sequence or collection.'
p2680
sg3
I01
sg10
I2
sg11
S'len'
p2681
sa(dp2682
g3
I01
sg10
I5
sg11
S'license'
p2683
sa(dp2684
g1
S"list() -> new empty list\nlist(iterable) -> new list initialized from iterable's items"
p2685
sg3
I01
sg4
(lp2686
(dp2687
g3
I01
sg10
I5
sg11
g1626
sa(dp2688
g3
I01
sg10
I5
sg11
g1792
sa(dp2689
g3
I01
sg10
I5
sg11
g12
sa(dp2690
g3
I01
sg10
I5
sg11
g1751
sa(dp2691
g3
I01
sg10
I5
sg11
g1753
sa(dp2692
g3
I01
sg10
I5
sg11
g16
sa(dp2693
g3
I01
sg10
I5
sg11
g1797
sa(dp2694
g1
S'default object formatter'
p2695
sg3
I01
sg10
I2
sg11
g19
sa(dp2696
g3
I01
sg10
I5
sg11
g1801
sa(dp2697
g3
I01
sg10
I5
sg11
g21
sa(dp2698
g1
S'x.__getitem__(y) <==> x[y]'
p2699
sg3
I01
sg10
I2
sg11
g23
sa(dp2700
g3
I01
sg10
I5
sg11
g25
sa(dp2701
g3
I01
sg10
I5
sg11
g1805
sa(dp2702
g3
I01
sg10
I5
sg11
g27
sa(dp2703
g3
I01
sg10
I5
sg11
g1808
sa(dp2704
g3
I01
sg10
I5
sg11
g1810
sa(dp2705
g3
I01
sg10
I5
sg11
g29
sa(dp2706
g3
I01
sg10
I5
sg11
g1813
sa(dp2707
g3
I01
sg10
I5
sg11
g1815
sa(dp2708
g3
I01
sg10
I5
sg11
g1763
sa(dp2709
g3
I01
sg10
I5
sg11
g1818
sa(dp2710
g3
I01
sg10
I5
sg11
g1664
sa(dp2711
g3
I01
sg10
I5
sg11
g1821
sa(dp2712
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2713
sg3
I01
sg10
I2
sg11
g32
sa(dp2714
g1
S'helper for pickle'
p2715
sg3
I01
sg10
I2
sg11
g34
sa(dp2716
g1
S'helper for pickle'
p2717
sg3
I01
sg10
I2
sg11
g37
sa(dp2718
g3
I01
sg10
I5
sg11
g39
sa(dp2719
g1
S'L.__reversed__() -- return a reverse iterator over the list'
p2720
sg3
I01
sg10
I2
sg11
S'__reversed__'
p2721
sa(dp2722
g3
I01
sg10
I5
sg11
g1699
sa(dp2723
g3
I01
sg10
I5
sg11
g41
sa(dp2724
g3
I01
sg10
I5
sg11
g1775
sa(dp2725
g3
I01
sg10
I5
sg11
g1777
sa(dp2726
g1
S'L.__sizeof__() -- size of L in memory, in bytes'
p2727
sg3
I01
sg10
I2
sg11
g46
sa(dp2728
g3
I01
sg10
I5
sg11
g48
sa(dp2729
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2730
sg3
I01
sg10
I2
sg11
g51
sa(dp2731
g1
S'L.append(object) -- append object to end'
p2732
sg3
I01
sg10
I2
sg11
g1839
sa(dp2733
g1
S'L.count(value) -> integer -- return number of occurrences of value'
p2734
sg3
I01
sg10
I2
sg11
g1848
sa(dp2735
g1
S'L.extend(iterable) -- extend list by appending elements from the iterable'
p2736
sg3
I01
sg10
I2
sg11
g1860
sa(dp2737
g1
S'L.index(value, [start, [stop]]) -> integer -- return first index of value.\nRaises ValueError if the value is not present.'
p2738
sg3
I01
sg10
I2
sg11
g1869
sa(dp2739
g1
S'L.insert(index, object) -- insert object before index'
p2740
sg3
I01
sg10
I2
sg11
g1872
sa(dp2741
g1
S'L.pop([index]) -> item -- remove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.'
p2742
sg3
I01
sg10
I2
sg11
g1911
sa(dp2743
g1
S'L.remove(value) -- remove first occurrence of value.\nRaises ValueError if the value is not present.'
p2744
sg3
I01
sg10
I2
sg11
g1914
sa(dp2745
g1
S'L.reverse() -- reverse *IN PLACE*'
p2746
sg3
I01
sg10
I2
sg11
g1920
sa(dp2747
g1
S'L.sort(cmp=None, key=None, reverse=False) -- stable sort *IN PLACE*;\ncmp(x, y) -> -1, 0, 1'
p2748
sg3
I01
sg10
I2
sg11
S'sort'
p2749
sasg10
I3
sg11
S'list'
p2750
sa(dp2751
g1
S"locals() -> dictionary\n\nUpdate and return a dictionary containing the current scope's local variables."
p2752
sg3
I01
sg10
I2
sg11
S'locals'
p2753
sa(dp2754
g1
S"long(x=0) -> long\nlong(x, base=10) -> long\n\nConvert a number or string to a long integer, or return 0L if no arguments\nare given.  If x is floating point, the conversion truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string or\nUnicode object representing an integer literal in the given base.  The\nliteral can be preceded by '+' or '-' and be surrounded by whitespace.\nThe base defaults to 10.  Valid bases are 0 and 2-36.  Base 0 means to\ninterpret the base from the string as an integer literal.\n>>> int('0b100', base=0)\n4L"
p2755
sg3
I01
sg4
(lp2756
(dp2757
g3
I01
sg10
I5
sg11
g1624
sa(dp2758
g3
I01
sg10
I5
sg11
g1626
sa(dp2759
g3
I01
sg10
I5
sg11
g1628
sa(dp2760
g3
I01
sg10
I5
sg11
g1630
sa(dp2761
g3
I01
sg10
I5
sg11
g1632
sa(dp2762
g3
I01
sg10
I5
sg11
g12
sa(dp2763
g3
I01
sg10
I5
sg11
g1635
sa(dp2764
g3
I01
sg10
I5
sg11
g1637
sa(dp2765
g3
I01
sg10
I5
sg11
g16
sa(dp2766
g3
I01
sg10
I5
sg11
g1640
sa(dp2767
g3
I01
sg10
I5
sg11
g1642
sa(dp2768
g1
Nsg3
I01
sg10
I2
sg11
g19
sa(dp2769
g3
I01
sg10
I5
sg11
g21
sa(dp2770
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp2771
g3
I01
sg10
I5
sg11
g27
sa(dp2772
g3
I01
sg10
I5
sg11
g1649
sa(dp2773
g3
I01
sg10
I5
sg11
g1651
sa(dp2774
g3
I01
sg10
I5
sg11
g29
sa(dp2775
g3
I01
sg10
I5
sg11
g1654
sa(dp2776
g3
I01
sg10
I5
sg11
g1656
sa(dp2777
g3
I01
sg10
I5
sg11
g1658
sa(dp2778
g3
I01
sg10
I5
sg11
g1660
sa(dp2779
g3
I01
sg10
I5
sg11
g1662
sa(dp2780
g3
I01
sg10
I5
sg11
g1664
sa(dp2781
g3
I01
sg10
I5
sg11
g1666
sa(dp2782
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2783
sg3
I01
sg10
I2
sg11
g32
sa(dp2784
g3
I01
sg10
I5
sg11
g1670
sa(dp2785
g3
I01
sg10
I5
sg11
g1672
sa(dp2786
g3
I01
sg10
I5
sg11
g1674
sa(dp2787
g3
I01
sg10
I5
sg11
g1676
sa(dp2788
g3
I01
sg10
I5
sg11
g1678
sa(dp2789
g3
I01
sg10
I5
sg11
g1680
sa(dp2790
g3
I01
sg10
I5
sg11
g1682
sa(dp2791
g3
I01
sg10
I5
sg11
g1684
sa(dp2792
g3
I01
sg10
I5
sg11
g1686
sa(dp2793
g1
S'helper for pickle'
p2794
sg3
I01
sg10
I2
sg11
g34
sa(dp2795
g1
S'helper for pickle'
p2796
sg3
I01
sg10
I2
sg11
g37
sa(dp2797
g3
I01
sg10
I5
sg11
g39
sa(dp2798
g3
I01
sg10
I5
sg11
g1693
sa(dp2799
g3
I01
sg10
I5
sg11
g1695
sa(dp2800
g3
I01
sg10
I5
sg11
g1697
sa(dp2801
g3
I01
sg10
I5
sg11
g1699
sa(dp2802
g3
I01
sg10
I5
sg11
g1701
sa(dp2803
g3
I01
sg10
I5
sg11
g1703
sa(dp2804
g3
I01
sg10
I5
sg11
g1705
sa(dp2805
g3
I01
sg10
I5
sg11
g1707
sa(dp2806
g3
I01
sg10
I5
sg11
g1709
sa(dp2807
g3
I01
sg10
I5
sg11
g1711
sa(dp2808
g3
I01
sg10
I5
sg11
g1713
sa(dp2809
g3
I01
sg10
I5
sg11
g41
sa(dp2810
g1
S'Returns size in memory, in bytes'
p2811
sg3
I01
sg10
I2
sg11
g46
sa(dp2812
g3
I01
sg10
I5
sg11
g48
sa(dp2813
g3
I01
sg10
I5
sg11
g1719
sa(dp2814
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2815
sg3
I01
sg10
I2
sg11
g51
sa(dp2816
g3
I01
sg10
I5
sg11
g1723
sa(dp2817
g1
S'Truncating an Integral returns itself.'
p2818
sg3
I01
sg10
I2
sg11
g1726
sa(dp2819
g3
I01
sg10
I5
sg11
g1728
sa(dp2820
g1
S"long.bit_length() -> int or long\n\nNumber of bits necessary to represent self in binary.\n>>> bin(37L)\n'0b100101'\n>>> (37L).bit_length()\n6"
p2821
sg3
I01
sg10
I2
sg11
g1731
sa(dp2822
g1
S'Returns self, the complex conjugate of any long.'
p2823
sg3
I01
sg10
I2
sg11
g1734
sa(dp2824
g3
I01
sg10
I5
sg11
g1736
sa(dp2825
g3
I01
sg10
I5
sg11
g1738
sa(dp2826
g3
I01
sg10
I5
sg11
g1740
sa(dp2827
g3
I01
sg10
I5
sg11
g1742
sasg10
I3
sg11
S'long'
p2828
sa(dp2829
g1
S'map(function, sequence[, sequence, ...]) -> list\n\nReturn a list of the results of applying the function to the items of\nthe argument sequence(s).  If more than one sequence is given, the\nfunction is called with an argument list consisting of the corresponding\nitem of each sequence, substituting None for missing values when not all\nsequences have the same length.  If the function is None, return a list of\nthe items of the sequence (or a list of tuples if more than one sequence).'
p2830
sg3
I01
sg10
I2
sg11
S'map'
p2831
sa(dp2832
g1
S'max(iterable[, key=func]) -> value\nmax(a, b, c, ...[, key=func]) -> value\n\nWith a single iterable argument, return its largest item.\nWith two or more arguments, return the largest argument.'
p2833
sg3
I01
sg10
I2
sg11
S'max'
p2834
sa(dp2835
g1
S'memoryview(object)\n\nCreate a new memoryview object which references the given object.'
p2836
sg3
I01
sg4
(lp2837
(dp2838
g3
I01
sg10
I5
sg11
g12
sa(dp2839
g3
I01
sg10
I5
sg11
g1751
sa(dp2840
g3
I01
sg10
I5
sg11
g16
sa(dp2841
g3
I01
sg10
I5
sg11
g1797
sa(dp2842
g1
S'default object formatter'
p2843
sg3
I01
sg10
I2
sg11
g19
sa(dp2844
g3
I01
sg10
I5
sg11
g1801
sa(dp2845
g3
I01
sg10
I5
sg11
g21
sa(dp2846
g3
I01
sg10
I5
sg11
g23
sa(dp2847
g3
I01
sg10
I5
sg11
g1805
sa(dp2848
g3
I01
sg10
I5
sg11
g27
sa(dp2849
g3
I01
sg10
I5
sg11
g29
sa(dp2850
g3
I01
sg10
I5
sg11
g1815
sa(dp2851
g3
I01
sg10
I5
sg11
g1763
sa(dp2852
g3
I01
sg10
I5
sg11
g1818
sa(dp2853
g3
I01
sg10
I5
sg11
g1821
sa(dp2854
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2855
sg3
I01
sg10
I2
sg11
g32
sa(dp2856
g1
S'helper for pickle'
p2857
sg3
I01
sg10
I2
sg11
g34
sa(dp2858
g1
S'helper for pickle'
p2859
sg3
I01
sg10
I2
sg11
g37
sa(dp2860
g3
I01
sg10
I5
sg11
g39
sa(dp2861
g3
I01
sg10
I5
sg11
g41
sa(dp2862
g3
I01
sg10
I5
sg11
g1775
sa(dp2863
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2864
sg3
I01
sg10
I2
sg11
g46
sa(dp2865
g3
I01
sg10
I5
sg11
g48
sa(dp2866
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2867
sg3
I01
sg10
I2
sg11
g51
sa(dp2868
g3
I01
sg10
I5
sg11
g2029
sa(dp2869
g3
I01
sg10
I5
sg11
S'itemsize'
p2870
sa(dp2871
g3
I01
sg10
I5
sg11
S'ndim'
p2872
sa(dp2873
g3
I01
sg10
I5
sg11
S'readonly'
p2874
sa(dp2875
g3
I01
sg10
I5
sg11
S'shape'
p2876
sa(dp2877
g3
I01
sg10
I5
sg11
S'strides'
p2878
sa(dp2879
g3
I01
sg10
I5
sg11
S'suboffsets'
p2880
sa(dp2881
g1
Nsg3
I01
sg10
I2
sg11
S'tobytes'
p2882
sa(dp2883
g1
Nsg3
I01
sg10
I2
sg11
S'tolist'
p2884
sasg10
I3
sg11
S'memoryview'
p2885
sa(dp2886
g1
S'min(iterable[, key=func]) -> value\nmin(a, b, c, ...[, key=func]) -> value\n\nWith a single iterable argument, return its smallest item.\nWith two or more arguments, return the smallest argument.'
p2887
sg3
I01
sg10
I2
sg11
S'min'
p2888
sa(dp2889
g1
S'next(iterator[, default])\n\nReturn the next item from the iterator. If default is given and the iterator\nis exhausted, it is returned instead of raising StopIteration.'
p2890
sg3
I01
sg10
I2
sg11
g2323
sa(dp2891
g1
S'The most base type'
p2892
sg3
I01
sg4
(lp2893
(dp2894
g3
I01
sg10
I5
sg11
g12
sa(dp2895
g3
I01
sg10
I5
sg11
g16
sa(dp2896
g1
S'default object formatter'
p2897
sg3
I01
sg10
I2
sg11
g19
sa(dp2898
g3
I01
sg10
I5
sg11
g21
sa(dp2899
g3
I01
sg10
I5
sg11
g27
sa(dp2900
g3
I01
sg10
I5
sg11
g29
sa(dp2901
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2902
sg3
I01
sg10
I2
sg11
g32
sa(dp2903
g1
S'helper for pickle'
p2904
sg3
I01
sg10
I2
sg11
g34
sa(dp2905
g1
S'helper for pickle'
p2906
sg3
I01
sg10
I2
sg11
g37
sa(dp2907
g3
I01
sg10
I5
sg11
g39
sa(dp2908
g3
I01
sg10
I5
sg11
g41
sa(dp2909
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2910
sg3
I01
sg10
I2
sg11
g46
sa(dp2911
g3
I01
sg10
I5
sg11
g48
sa(dp2912
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2913
sg3
I01
sg10
I2
sg11
g51
sasg10
I3
sg11
g1280
sa(dp2914
g1
S'oct(number) -> string\n\nReturn the octal representation of an integer or long integer.'
p2915
sg3
I01
sg10
I2
sg11
S'oct'
p2916
sa(dp2917
g1
S'open(name[, mode[, buffering]]) -> file object\n\nOpen a file using the file() type, returns a file object.  This is the\npreferred way to open a file.  See file.__doc__ for further information.'
p2918
sg3
I01
sg10
I2
sg11
S'open'
p2919
sa(dp2920
g1
S'ord(c) -> integer\n\nReturn the integer ordinal of a one-character string.'
p2921
sg3
I01
sg10
I2
sg11
S'ord'
p2922
sa(dp2923
g1
S'pow(x, y[, z]) -> number\n\nWith two arguments, equivalent to x**y.  With three arguments,\nequivalent to (x**y) % z, but may be more efficient (e.g. for longs).'
p2924
sg3
I01
sg10
I2
sg11
S'pow'
p2925
sa(dp2926
g1
S"print(value, ..., sep=' ', end='\\n', file=sys.stdout)\n\nPrints the values to a stream, or to sys.stdout by default.\nOptional keyword arguments:\nfile: a file-like object (stream); defaults to the current sys.stdout.\nsep:  string inserted between values, default a space.\nend:  string appended after the last value, default a newline."
p2927
sg3
I01
sg10
I2
sg11
S'print'
p2928
sa(dp2929
g1
S'property(fget=None, fset=None, fdel=None, doc=None) -> property attribute\n\nfget is a function to be used for getting an attribute value, and likewise\nfset is a function for setting, and fdel a function for del\'ing, an\nattribute.  Typical use is to define a managed attribute x:\n\nclass C(object):\n    def getx(self): return self._x\n    def setx(self, value): self._x = value\n    def delx(self): del self._x\n    x = property(getx, setx, delx, "I\'m the \'x\' property.")\n\nDecorators make defining new properties or modifying existing ones easy:\n\nclass C(object):\n    @property\n    def x(self):\n        "I am the \'x\' property."\n        return self._x\n    @x.setter\n    def x(self, value):\n        self._x = value\n    @x.deleter\n    def x(self):\n        del self._x\n'
p2930
sg3
I01
sg4
(lp2931
(dp2932
g3
I01
sg10
I5
sg11
g12
sa(dp2933
g3
I01
sg10
I5
sg11
S'__delete__'
p2934
sa(dp2935
g3
I01
sg10
I5
sg11
g16
sa(dp2936
g1
S'default object formatter'
p2937
sg3
I01
sg10
I2
sg11
g19
sa(dp2938
g3
I01
sg10
I5
sg11
g2105
sa(dp2939
g3
I01
sg10
I5
sg11
g21
sa(dp2940
g3
I01
sg10
I5
sg11
g27
sa(dp2941
g3
I01
sg10
I5
sg11
g29
sa(dp2942
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p2943
sg3
I01
sg10
I2
sg11
g32
sa(dp2944
g1
S'helper for pickle'
p2945
sg3
I01
sg10
I2
sg11
g34
sa(dp2946
g1
S'helper for pickle'
p2947
sg3
I01
sg10
I2
sg11
g37
sa(dp2948
g3
I01
sg10
I5
sg11
g39
sa(dp2949
g3
I01
sg10
I5
sg11
S'__set__'
p2950
sa(dp2951
g3
I01
sg10
I5
sg11
g41
sa(dp2952
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p2953
sg3
I01
sg10
I2
sg11
g46
sa(dp2954
g3
I01
sg10
I5
sg11
g48
sa(dp2955
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p2956
sg3
I01
sg10
I2
sg11
g51
sa(dp2957
g1
S'Descriptor to change the deleter on a property.'
p2958
sg3
I01
sg10
I2
sg11
S'deleter'
p2959
sa(dp2960
g3
I01
sg10
I5
sg11
S'fdel'
p2961
sa(dp2962
g3
I01
sg10
I5
sg11
S'fget'
p2963
sa(dp2964
g3
I01
sg10
I5
sg11
S'fset'
p2965
sa(dp2966
g1
S'Descriptor to change the getter on a property.'
p2967
sg3
I01
sg10
I2
sg11
S'getter'
p2968
sa(dp2969
g1
S'Descriptor to change the setter on a property.'
p2970
sg3
I01
sg10
I2
sg11
S'setter'
p2971
sasg10
I3
sg11
S'property'
p2972
sa(dp2973
g3
I01
sg10
I5
sg11
S'quit'
p2974
sa(dp2975
g1
S'range(stop) -> list of integers\nrange(start, stop[, step]) -> list of integers\n\nReturn a list containing an arithmetic progression of integers.\nrange(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\nWhen step is given, it specifies the increment (or decrement).\nFor example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\nThese are exactly the valid indices for a list of 4 elements.'
p2976
sg3
I01
sg10
I2
sg11
S'range'
p2977
sa(dp2978
g1
S'raw_input([prompt]) -> string\n\nRead a string from standard input.  The trailing newline is stripped.\nIf the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.\nOn Unix, GNU readline is used if enabled.  The prompt string, if given,\nis printed without a trailing newline before reading.'
p2979
sg3
I01
sg10
I2
sg11
S'raw_input'
p2980
sa(dp2981
g1
S'reduce(function, sequence[, initial]) -> value\n\nApply a function of two arguments cumulatively to the items of a sequence,\nfrom left to right, so as to reduce the sequence to a single value.\nFor example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\nof the sequence in the calculation, and serves as a default when the\nsequence is empty.'
p2982
sg3
I01
sg10
I2
sg11
S'reduce'
p2983
sa(dp2984
g1
S'reload(module) -> module\n\nReload the module.  The module must have been successfully imported before.'
p2985
sg3
I01
sg10
I2
sg11
S'reload'
p2986
sa(dp2987
g1
S'repr(object) -> string\n\nReturn the canonical string representation of the object.\nFor most object types, eval(repr(object)) == object.'
p2988
sg3
I01
sg10
I2
sg11
S'repr'
p2989
sa(dp2990
g1
S'reversed(sequence) -> reverse iterator over values of the sequence\n\nReturn a reverse iterator'
p2991
sg3
I01
sg4
(lp2992
(dp2993
g3
I01
sg10
I5
sg11
g12
sa(dp2994
g3
I01
sg10
I5
sg11
g16
sa(dp2995
g1
S'default object formatter'
p2996
sg3
I01
sg10
I2
sg11
g19
sa(dp2997
g3
I01
sg10
I5
sg11
g21
sa(dp2998
g3
I01
sg10
I5
sg11
g27
sa(dp2999
g3
I01
sg10
I5
sg11
g29
sa(dp3000
g3
I01
sg10
I5
sg11
g1813
sa(dp3001
g1
S'Private method returning an estimate of len(list(it)).'
p3002
sg3
I01
sg10
I2
sg11
S'__length_hint__'
p3003
sa(dp3004
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3005
sg3
I01
sg10
I2
sg11
g32
sa(dp3006
g1
S'helper for pickle'
p3007
sg3
I01
sg10
I2
sg11
g34
sa(dp3008
g1
S'helper for pickle'
p3009
sg3
I01
sg10
I2
sg11
g37
sa(dp3010
g3
I01
sg10
I5
sg11
g39
sa(dp3011
g3
I01
sg10
I5
sg11
g41
sa(dp3012
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p3013
sg3
I01
sg10
I2
sg11
g46
sa(dp3014
g3
I01
sg10
I5
sg11
g48
sa(dp3015
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3016
sg3
I01
sg10
I2
sg11
g51
sa(dp3017
g3
I01
sg10
I5
sg11
g2323
sasg10
I3
sg11
S'reversed'
p3018
sa(dp3019
g1
S'round(number[, ndigits]) -> floating point number\n\nRound a number to a given precision in decimal digits (default 0 digits).\nThis always returns a floating point number.  Precision may be negative.'
p3020
sg3
I01
sg10
I2
sg11
S'round'
p3021
sa(dp3022
g1
S'set() -> new empty set object\nset(iterable) -> new set object\n\nBuild an unordered collection of unique elements.'
p3023
sg3
I01
sg4
(lp3024
(dp3025
g3
I01
sg10
I5
sg11
g1628
sa(dp3026
g3
I01
sg10
I5
sg11
g1630
sa(dp3027
g1
S'x.__contains__(y) <==> y in x.'
p3028
sg3
I01
sg10
I2
sg11
g1792
sa(dp3029
g3
I01
sg10
I5
sg11
g12
sa(dp3030
g3
I01
sg10
I5
sg11
g16
sa(dp3031
g3
I01
sg10
I5
sg11
g1797
sa(dp3032
g1
S'default object formatter'
p3033
sg3
I01
sg10
I2
sg11
g19
sa(dp3034
g3
I01
sg10
I5
sg11
g1801
sa(dp3035
g3
I01
sg10
I5
sg11
g21
sa(dp3036
g3
I01
sg10
I5
sg11
g1805
sa(dp3037
g3
I01
sg10
I5
sg11
g27
sa(dp3038
g3
I01
sg10
I5
sg11
S'__iand__'
p3039
sa(dp3040
g3
I01
sg10
I5
sg11
g29
sa(dp3041
g3
I01
sg10
I5
sg11
S'__ior__'
p3042
sa(dp3043
g3
I01
sg10
I5
sg11
S'__isub__'
p3044
sa(dp3045
g3
I01
sg10
I5
sg11
g1813
sa(dp3046
g3
I01
sg10
I5
sg11
S'__ixor__'
p3047
sa(dp3048
g3
I01
sg10
I5
sg11
g1815
sa(dp3049
g3
I01
sg10
I5
sg11
g1763
sa(dp3050
g3
I01
sg10
I5
sg11
g1818
sa(dp3051
g3
I01
sg10
I5
sg11
g1821
sa(dp3052
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3053
sg3
I01
sg10
I2
sg11
g32
sa(dp3054
g3
I01
sg10
I5
sg11
g1674
sa(dp3055
g3
I01
sg10
I5
sg11
g1682
sa(dp3056
g1
S'Return state information for pickling.'
p3057
sg3
I01
sg10
I2
sg11
g34
sa(dp3058
g1
S'helper for pickle'
p3059
sg3
I01
sg10
I2
sg11
g37
sa(dp3060
g3
I01
sg10
I5
sg11
g39
sa(dp3061
g3
I01
sg10
I5
sg11
g1701
sa(dp3062
g3
I01
sg10
I5
sg11
g1709
sa(dp3063
g3
I01
sg10
I5
sg11
g1713
sa(dp3064
g3
I01
sg10
I5
sg11
g41
sa(dp3065
g1
S'S.__sizeof__() -> size of S in memory, in bytes'
p3066
sg3
I01
sg10
I2
sg11
g46
sa(dp3067
g3
I01
sg10
I5
sg11
g48
sa(dp3068
g3
I01
sg10
I5
sg11
g1719
sa(dp3069
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3070
sg3
I01
sg10
I2
sg11
g51
sa(dp3071
g3
I01
sg10
I5
sg11
g1728
sa(dp3072
g1
S'Add an element to a set.\n\nThis has no effect if the element is already present.'
p3073
sg3
I01
sg10
I2
sg11
S'add'
p3074
sa(dp3075
g1
S'Remove all elements from this set.'
p3076
sg3
I01
sg10
I2
sg11
g2240
sa(dp3077
g1
S'Return a shallow copy of a set.'
p3078
sg3
I01
sg10
I2
sg11
g2243
sa(dp3079
g1
S'Return the difference of two or more sets as a new set.\n\n(i.e. all elements that are in this set but not the others.)'
p3080
sg3
I01
sg10
I2
sg11
g2550
sa(dp3081
g1
S'Remove all elements of another set from this set.'
p3082
sg3
I01
sg10
I2
sg11
S'difference_update'
p3083
sa(dp3084
g1
S'Remove an element from a set if it is a member.\n\nIf the element is not a member, do nothing.'
p3085
sg3
I01
sg10
I2
sg11
S'discard'
p3086
sa(dp3087
g1
S'Return the intersection of two or more sets as a new set.\n\n(i.e. elements that are common to all of the sets.)'
p3088
sg3
I01
sg10
I2
sg11
g2553
sa(dp3089
g1
S'Update a set with the intersection of itself and another.'
p3090
sg3
I01
sg10
I2
sg11
S'intersection_update'
p3091
sa(dp3092
g1
S'Return True if two sets have a null intersection.'
p3093
sg3
I01
sg10
I2
sg11
g2556
sa(dp3094
g1
S'Report whether another set contains this set.'
p3095
sg3
I01
sg10
I2
sg11
g2559
sa(dp3096
g1
S'Report whether this set contains another set.'
p3097
sg3
I01
sg10
I2
sg11
g2562
sa(dp3098
g1
S'Remove and return an arbitrary set element.\nRaises KeyError if the set is empty.'
p3099
sg3
I01
sg10
I2
sg11
g1911
sa(dp3100
g1
S'Remove an element from a set; it must be a member.\n\nIf the element is not a member, raise a KeyError.'
p3101
sg3
I01
sg10
I2
sg11
g1914
sa(dp3102
g1
S'Return the symmetric difference of two sets as a new set.\n\n(i.e. all elements that are in exactly one of the sets.)'
p3103
sg3
I01
sg10
I2
sg11
g2565
sa(dp3104
g1
S'Update a set with the symmetric difference of itself and another.'
p3105
sg3
I01
sg10
I2
sg11
S'symmetric_difference_update'
p3106
sa(dp3107
g1
S'Return the union of sets as a new set.\n\n(i.e. all elements that are in either set.)'
p3108
sg3
I01
sg10
I2
sg11
g2568
sa(dp3109
g1
S'Update a set with the union of itself and others.'
p3110
sg3
I01
sg10
I2
sg11
g2278
sasg10
I3
sg11
S'set'
p3111
sa(dp3112
g1
S"setattr(object, name, value)\n\nSet a named attribute on an object; setattr(x, 'y', v) is equivalent to\n``x.y = v''."
p3113
sg3
I01
sg10
I2
sg11
S'setattr'
p3114
sa(dp3115
g1
S'slice(stop)\nslice(start, stop[, step])\n\nCreate a slice object.  This is used for extended slicing (e.g. a[0:10:2]).'
p3116
sg3
I01
sg4
(lp3117
(dp3118
g3
I01
sg10
I5
sg11
g1630
sa(dp3119
g3
I01
sg10
I5
sg11
g12
sa(dp3120
g3
I01
sg10
I5
sg11
g16
sa(dp3121
g1
S'default object formatter'
p3122
sg3
I01
sg10
I2
sg11
g19
sa(dp3123
g3
I01
sg10
I5
sg11
g21
sa(dp3124
g3
I01
sg10
I5
sg11
g27
sa(dp3125
g3
I01
sg10
I5
sg11
g29
sa(dp3126
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3127
sg3
I01
sg10
I2
sg11
g32
sa(dp3128
g1
S'Return state information for pickling.'
p3129
sg3
I01
sg10
I2
sg11
g34
sa(dp3130
g1
S'helper for pickle'
p3131
sg3
I01
sg10
I2
sg11
g37
sa(dp3132
g3
I01
sg10
I5
sg11
g39
sa(dp3133
g3
I01
sg10
I5
sg11
g41
sa(dp3134
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p3135
sg3
I01
sg10
I2
sg11
g46
sa(dp3136
g3
I01
sg10
I5
sg11
g48
sa(dp3137
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3138
sg3
I01
sg10
I2
sg11
g51
sa(dp3139
g1
S'S.indices(len) -> (start, stop, stride)\n\nAssuming a sequence of length len, calculate the start and stop\nindices, and the stride length of the extended slice described by\nS. Out of bounds indices are clipped in a manner consistent with the\nhandling of normal slices.'
p3140
sg3
I01
sg10
I2
sg11
S'indices'
p3141
sa(dp3142
g3
I01
sg10
I5
sg11
g1284
sa(dp3143
g3
I01
sg10
I5
sg11
S'step'
p3144
sa(dp3145
g3
I01
sg10
I5
sg11
S'stop'
p3146
sasg10
I3
sg11
S'slice'
p3147
sa(dp3148
g1
S'sorted(iterable, cmp=None, key=None, reverse=False) --> new sorted list'
p3149
sg3
I01
sg10
I2
sg11
S'sorted'
p3150
sa(dp3151
g1
S'staticmethod(function) -> method\n\nConvert a function to be a static method.\n\nA static method does not receive an implicit first argument.\nTo declare a static method, use this idiom:\n\n     class C:\n     def f(arg1, arg2, ...): ...\n     f = staticmethod(f)\n\nIt can be called either on the class (e.g. C.f()) or on an instance\n(e.g. C().f()).  The instance is ignored except for its class.\n\nStatic methods in Python are similar to those found in Java or C++.\nFor a more advanced concept, see the classmethod builtin.'
p3152
sg3
I01
sg4
(lp3153
(dp3154
g3
I01
sg10
I5
sg11
g12
sa(dp3155
g3
I01
sg10
I5
sg11
g16
sa(dp3156
g1
S'default object formatter'
p3157
sg3
I01
sg10
I2
sg11
g19
sa(dp3158
g3
I01
sg10
I5
sg11
g2103
sa(dp3159
g3
I01
sg10
I5
sg11
g2105
sa(dp3160
g3
I01
sg10
I5
sg11
g21
sa(dp3161
g3
I01
sg10
I5
sg11
g27
sa(dp3162
g3
I01
sg10
I5
sg11
g29
sa(dp3163
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3164
sg3
I01
sg10
I2
sg11
g32
sa(dp3165
g1
S'helper for pickle'
p3166
sg3
I01
sg10
I2
sg11
g34
sa(dp3167
g1
S'helper for pickle'
p3168
sg3
I01
sg10
I2
sg11
g37
sa(dp3169
g3
I01
sg10
I5
sg11
g39
sa(dp3170
g3
I01
sg10
I5
sg11
g41
sa(dp3171
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p3172
sg3
I01
sg10
I2
sg11
g46
sa(dp3173
g3
I01
sg10
I5
sg11
g48
sa(dp3174
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3175
sg3
I01
sg10
I2
sg11
g51
sasg10
I3
sg11
S'staticmethod'
p3176
sa(dp3177
g1
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p3178
sg3
I01
sg4
(lp3179
(dp3180
g3
I01
sg10
I5
sg11
g1626
sa(dp3181
g3
I01
sg10
I5
sg11
g1792
sa(dp3182
g3
I01
sg10
I5
sg11
g12
sa(dp3183
g3
I01
sg10
I5
sg11
g16
sa(dp3184
g3
I01
sg10
I5
sg11
g1797
sa(dp3185
g1
S'S.__format__(format_spec) -> string\n\nReturn a formatted version of S as described by format_spec.'
p3186
sg3
I01
sg10
I2
sg11
g19
sa(dp3187
g3
I01
sg10
I5
sg11
g1801
sa(dp3188
g3
I01
sg10
I5
sg11
g21
sa(dp3189
g3
I01
sg10
I5
sg11
g23
sa(dp3190
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp3191
g3
I01
sg10
I5
sg11
g25
sa(dp3192
g3
I01
sg10
I5
sg11
g1805
sa(dp3193
g3
I01
sg10
I5
sg11
g27
sa(dp3194
g3
I01
sg10
I5
sg11
g29
sa(dp3195
g3
I01
sg10
I5
sg11
g1815
sa(dp3196
g3
I01
sg10
I5
sg11
g1763
sa(dp3197
g3
I01
sg10
I5
sg11
g1818
sa(dp3198
g3
I01
sg10
I5
sg11
g1662
sa(dp3199
g3
I01
sg10
I5
sg11
g1664
sa(dp3200
g3
I01
sg10
I5
sg11
g1821
sa(dp3201
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3202
sg3
I01
sg10
I2
sg11
g32
sa(dp3203
g1
S'helper for pickle'
p3204
sg3
I01
sg10
I2
sg11
g34
sa(dp3205
g1
S'helper for pickle'
p3206
sg3
I01
sg10
I2
sg11
g37
sa(dp3207
g3
I01
sg10
I5
sg11
g39
sa(dp3208
g3
I01
sg10
I5
sg11
g1697
sa(dp3209
g3
I01
sg10
I5
sg11
g1699
sa(dp3210
g3
I01
sg10
I5
sg11
g41
sa(dp3211
g1
S'S.__sizeof__() -> size of S in memory, in bytes'
p3212
sg3
I01
sg10
I2
sg11
g46
sa(dp3213
g3
I01
sg10
I5
sg11
g48
sa(dp3214
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3215
sg3
I01
sg10
I2
sg11
g51
sa(dp3216
g1
Nsg3
I01
sg10
I2
sg11
g2007
sa(dp3217
g1
Nsg3
I01
sg10
I2
sg11
g2009
sa(dp3218
g1
S'S.capitalize() -> string\n\nReturn a copy of the string S with only its first character\ncapitalized.'
p3219
sg3
I01
sg10
I2
sg11
g1842
sa(dp3220
g1
S'S.center(width[, fillchar]) -> string\n\nReturn S centered in a string of length width. Padding is\ndone using the specified fill character (default is a space)'
p3221
sg3
I01
sg10
I2
sg11
g1845
sa(dp3222
g1
S'S.count(sub[, start[, end]]) -> int\n\nReturn the number of non-overlapping occurrences of substring sub in\nstring S[start:end].  Optional arguments start and end are interpreted\nas in slice notation.'
p3223
sg3
I01
sg10
I2
sg11
g1848
sa(dp3224
g1
S"S.decode([encoding[,errors]]) -> object\n\nDecodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\nas well as any other name registered with codecs.register_error that is\nable to handle UnicodeDecodeErrors."
p3225
sg3
I01
sg10
I2
sg11
g1851
sa(dp3226
g1
S"S.encode([encoding[,errors]]) -> object\n\nEncodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n'xmlcharrefreplace' as well as any other name registered with\ncodecs.register_error that is able to handle UnicodeEncodeErrors."
p3227
sg3
I01
sg10
I2
sg11
g2020
sa(dp3228
g1
S'S.endswith(suffix[, start[, end]]) -> bool\n\nReturn True if S ends with the specified suffix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nsuffix can also be a tuple of strings to try.'
p3229
sg3
I01
sg10
I2
sg11
g1854
sa(dp3230
g1
S'S.expandtabs([tabsize]) -> string\n\nReturn a copy of S where all tab characters are expanded using spaces.\nIf tabsize is not given, a tab size of 8 characters is assumed.'
p3231
sg3
I01
sg10
I2
sg11
g1857
sa(dp3232
g1
S'S.find(sub [,start [,end]]) -> int\n\nReturn the lowest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p3233
sg3
I01
sg10
I2
sg11
g1863
sa(dp3234
g1
S"S.format(*args, **kwargs) -> string\n\nReturn a formatted version of S, using substitutions from args and kwargs.\nThe substitutions are identified by braces ('{' and '}')."
p3235
sg3
I01
sg10
I2
sg11
g2029
sa(dp3236
g1
S'S.index(sub [,start [,end]]) -> int\n\nLike S.find() but raise ValueError when the substring is not found.'
p3237
sg3
I01
sg10
I2
sg11
g1869
sa(dp3238
g1
S'S.isalnum() -> bool\n\nReturn True if all characters in S are alphanumeric\nand there is at least one character in S, False otherwise.'
p3239
sg3
I01
sg10
I2
sg11
g1875
sa(dp3240
g1
S'S.isalpha() -> bool\n\nReturn True if all characters in S are alphabetic\nand there is at least one character in S, False otherwise.'
p3241
sg3
I01
sg10
I2
sg11
g1878
sa(dp3242
g1
S'S.isdigit() -> bool\n\nReturn True if all characters in S are digits\nand there is at least one character in S, False otherwise.'
p3243
sg3
I01
sg10
I2
sg11
g1881
sa(dp3244
g1
S'S.islower() -> bool\n\nReturn True if all cased characters in S are lowercase and there is\nat least one cased character in S, False otherwise.'
p3245
sg3
I01
sg10
I2
sg11
g1884
sa(dp3246
g1
S'S.isspace() -> bool\n\nReturn True if all characters in S are whitespace\nand there is at least one character in S, False otherwise.'
p3247
sg3
I01
sg10
I2
sg11
g1887
sa(dp3248
g1
S'S.istitle() -> bool\n\nReturn True if S is a titlecased string and there is at least one\ncharacter in S, i.e. uppercase characters may only follow uncased\ncharacters and lowercase characters only cased ones. Return False\notherwise.'
p3249
sg3
I01
sg10
I2
sg11
g1890
sa(dp3250
g1
S'S.isupper() -> bool\n\nReturn True if all cased characters in S are uppercase and there is\nat least one cased character in S, False otherwise.'
p3251
sg3
I01
sg10
I2
sg11
g1893
sa(dp3252
g1
S'S.join(iterable) -> string\n\nReturn a string which is the concatenation of the strings in the\niterable.  The separator between elements is S.'
p3253
sg3
I01
sg10
I2
sg11
g1896
sa(dp3254
g1
S'S.ljust(width[, fillchar]) -> string\n\nReturn S left-justified in a string of length width. Padding is\ndone using the specified fill character (default is a space).'
p3255
sg3
I01
sg10
I2
sg11
g1899
sa(dp3256
g1
S'S.lower() -> string\n\nReturn a copy of the string S converted to lowercase.'
p3257
sg3
I01
sg10
I2
sg11
g1902
sa(dp3258
g1
S'S.lstrip([chars]) -> string or unicode\n\nReturn a copy of the string S with leading whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'
p3259
sg3
I01
sg10
I2
sg11
g1905
sa(dp3260
g1
S'S.partition(sep) -> (head, sep, tail)\n\nSearch for the separator sep in S, and return the part before it,\nthe separator itself, and the part after it.  If the separator is not\nfound, return S and two empty strings.'
p3261
sg3
I01
sg10
I2
sg11
g1908
sa(dp3262
g1
S'S.replace(old, new[, count]) -> string\n\nReturn a copy of string S with all occurrences of substring\nold replaced by new.  If the optional argument count is\ngiven, only the first count occurrences are replaced.'
p3263
sg3
I01
sg10
I2
sg11
g1917
sa(dp3264
g1
S'S.rfind(sub [,start [,end]]) -> int\n\nReturn the highest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p3265
sg3
I01
sg10
I2
sg11
g1923
sa(dp3266
g1
S'S.rindex(sub [,start [,end]]) -> int\n\nLike S.rfind() but raise ValueError when the substring is not found.'
p3267
sg3
I01
sg10
I2
sg11
g1926
sa(dp3268
g1
S'S.rjust(width[, fillchar]) -> string\n\nReturn S right-justified in a string of length width. Padding is\ndone using the specified fill character (default is a space)'
p3269
sg3
I01
sg10
I2
sg11
g1929
sa(dp3270
g1
S'S.rpartition(sep) -> (head, sep, tail)\n\nSearch for the separator sep in S, starting at the end of S, and return\nthe part before it, the separator itself, and the part after it.  If the\nseparator is not found, return two empty strings and S.'
p3271
sg3
I01
sg10
I2
sg11
g1932
sa(dp3272
g1
S'S.rsplit([sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in the string S, using sep as the\ndelimiter string, starting at the end of the string and working\nto the front.  If maxsplit is given, at most maxsplit splits are\ndone. If sep is not specified or is None, any whitespace string\nis a separator.'
p3273
sg3
I01
sg10
I2
sg11
g1935
sa(dp3274
g1
S'S.rstrip([chars]) -> string or unicode\n\nReturn a copy of the string S with trailing whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'
p3275
sg3
I01
sg10
I2
sg11
g1938
sa(dp3276
g1
S'S.split([sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in the string S, using sep as the\ndelimiter string.  If maxsplit is given, at most maxsplit\nsplits are done. If sep is not specified or is None, any\nwhitespace string is a separator and empty strings are removed\nfrom the result.'
p3277
sg3
I01
sg10
I2
sg11
g1941
sa(dp3278
g1
S'S.splitlines(keepends=False) -> list of strings\n\nReturn a list of the lines in S, breaking at line boundaries.\nLine breaks are not included in the resulting list unless keepends\nis given and true.'
p3279
sg3
I01
sg10
I2
sg11
g1944
sa(dp3280
g1
S'S.startswith(prefix[, start[, end]]) -> bool\n\nReturn True if S starts with the specified prefix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nprefix can also be a tuple of strings to try.'
p3281
sg3
I01
sg10
I2
sg11
g1947
sa(dp3282
g1
S'S.strip([chars]) -> string or unicode\n\nReturn a copy of the string S with leading and trailing\nwhitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is unicode, S will be converted to unicode before stripping'
p3283
sg3
I01
sg10
I2
sg11
g1950
sa(dp3284
g1
S'S.swapcase() -> string\n\nReturn a copy of the string S with uppercase characters\nconverted to lowercase and vice versa.'
p3285
sg3
I01
sg10
I2
sg11
g1953
sa(dp3286
g1
S'S.title() -> string\n\nReturn a titlecased version of S, i.e. words start with uppercase\ncharacters, all remaining cased characters have lowercase.'
p3287
sg3
I01
sg10
I2
sg11
g1956
sa(dp3288
g1
S'S.translate(table [,deletechars]) -> string\n\nReturn a copy of the string S, where all characters occurring\nin the optional argument deletechars are removed, and the\nremaining characters have been mapped through the given\ntranslation table, which must be a string of length 256 or None.\nIf the table argument is None, no translation is applied and\nthe operation simply removes the characters in deletechars.'
p3289
sg3
I01
sg10
I2
sg11
g1959
sa(dp3290
g1
S'S.upper() -> string\n\nReturn a copy of the string S converted to uppercase.'
p3291
sg3
I01
sg10
I2
sg11
g1962
sa(dp3292
g1
S'S.zfill(width) -> string\n\nPad a numeric string S with zeros on the left, to fill a field\nof the specified width.  The string S is never truncated.'
p3293
sg3
I01
sg10
I2
sg11
g1965
sasg10
I3
sg11
S'str'
p3294
sa(dp3295
g1
S"sum(sequence[, start]) -> value\n\nReturn the sum of a sequence of numbers (NOT strings) plus the value\nof parameter 'start' (which defaults to 0).  When the sequence is\nempty, return start."
p3296
sg3
I01
sg10
I2
sg11
S'sum'
p3297
sa(dp3298
g1
S'super(type, obj) -> bound super object; requires isinstance(obj, type)\nsuper(type) -> unbound super object\nsuper(type, type2) -> bound super object; requires issubclass(type2, type)\nTypical use to call a cooperative superclass method:\nclass C(B):\n    def meth(self, arg):\n        super(C, self).meth(arg)'
p3299
sg3
I01
sg4
(lp3300
(dp3301
g3
I01
sg10
I5
sg11
g12
sa(dp3302
g3
I01
sg10
I5
sg11
g16
sa(dp3303
g1
S'default object formatter'
p3304
sg3
I01
sg10
I2
sg11
g19
sa(dp3305
g3
I01
sg10
I5
sg11
g2105
sa(dp3306
g3
I01
sg10
I5
sg11
g21
sa(dp3307
g3
I01
sg10
I5
sg11
g27
sa(dp3308
g3
I01
sg10
I5
sg11
g29
sa(dp3309
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3310
sg3
I01
sg10
I2
sg11
g32
sa(dp3311
g1
S'helper for pickle'
p3312
sg3
I01
sg10
I2
sg11
g34
sa(dp3313
g1
S'helper for pickle'
p3314
sg3
I01
sg10
I2
sg11
g37
sa(dp3315
g3
I01
sg10
I5
sg11
g39
sa(dp3316
g3
I01
sg10
I5
sg11
S'__self__'
p3317
sa(dp3318
g3
I01
sg10
I5
sg11
S'__self_class__'
p3319
sa(dp3320
g3
I01
sg10
I5
sg11
g41
sa(dp3321
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p3322
sg3
I01
sg10
I2
sg11
g46
sa(dp3323
g3
I01
sg10
I5
sg11
g48
sa(dp3324
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3325
sg3
I01
sg10
I2
sg11
g51
sa(dp3326
g3
I01
sg10
I5
sg11
S'__thisclass__'
p3327
sasg10
I3
sg11
S'super'
p3328
sa(dp3329
g1
S"tuple() -> empty tuple\ntuple(iterable) -> tuple initialized from iterable's items\n\nIf the argument is a tuple, the return value is the same object."
p3330
sg3
I01
sg4
(lp3331
(dp3332
g3
I01
sg10
I5
sg11
g1626
sa(dp3333
g3
I01
sg10
I5
sg11
g1792
sa(dp3334
g3
I01
sg10
I5
sg11
g12
sa(dp3335
g3
I01
sg10
I5
sg11
g16
sa(dp3336
g3
I01
sg10
I5
sg11
g1797
sa(dp3337
g1
S'default object formatter'
p3338
sg3
I01
sg10
I2
sg11
g19
sa(dp3339
g3
I01
sg10
I5
sg11
g1801
sa(dp3340
g3
I01
sg10
I5
sg11
g21
sa(dp3341
g3
I01
sg10
I5
sg11
g23
sa(dp3342
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp3343
g3
I01
sg10
I5
sg11
g25
sa(dp3344
g3
I01
sg10
I5
sg11
g1805
sa(dp3345
g3
I01
sg10
I5
sg11
g27
sa(dp3346
g3
I01
sg10
I5
sg11
g29
sa(dp3347
g3
I01
sg10
I5
sg11
g1813
sa(dp3348
g3
I01
sg10
I5
sg11
g1815
sa(dp3349
g3
I01
sg10
I5
sg11
g1763
sa(dp3350
g3
I01
sg10
I5
sg11
g1818
sa(dp3351
g3
I01
sg10
I5
sg11
g1664
sa(dp3352
g3
I01
sg10
I5
sg11
g1821
sa(dp3353
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3354
sg3
I01
sg10
I2
sg11
g32
sa(dp3355
g1
S'helper for pickle'
p3356
sg3
I01
sg10
I2
sg11
g34
sa(dp3357
g1
S'helper for pickle'
p3358
sg3
I01
sg10
I2
sg11
g37
sa(dp3359
g3
I01
sg10
I5
sg11
g39
sa(dp3360
g3
I01
sg10
I5
sg11
g1699
sa(dp3361
g3
I01
sg10
I5
sg11
g41
sa(dp3362
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p3363
sg3
I01
sg10
I2
sg11
g46
sa(dp3364
g3
I01
sg10
I5
sg11
g48
sa(dp3365
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3366
sg3
I01
sg10
I2
sg11
g51
sa(dp3367
g1
S'T.count(value) -> integer -- return number of occurrences of value'
p3368
sg3
I01
sg10
I2
sg11
g1848
sa(dp3369
g1
S'T.index(value, [start, [stop]]) -> integer -- return first index of value.\nRaises ValueError if the value is not present.'
p3370
sg3
I01
sg10
I2
sg11
g1869
sasg10
I3
sg11
S'tuple'
p3371
sa(dp3372
g1
S"type(object) -> the object's type\ntype(name, bases, dict) -> a new type"
p3373
sg3
I01
sg4
(lp3374
(dp3375
g3
I01
sg10
I5
sg11
S'__bases__'
p3376
sa(dp3377
g3
I01
sg10
I5
sg11
S'__basicsize__'
p3378
sa(dp3379
g3
I01
sg10
I5
sg11
S'__call__'
p3380
sa(dp3381
g3
I01
sg10
I5
sg11
g12
sa(dp3382
g3
I01
sg10
I5
sg11
g14
sa(dp3383
g3
I01
sg10
I5
sg11
S'__dictoffset__'
p3384
sa(dp3385
g3
I01
sg10
I5
sg11
g16
sa(dp3386
g3
I01
sg10
I5
sg11
g1797
sa(dp3387
g3
I01
sg10
I5
sg11
S'__flags__'
p3388
sa(dp3389
g1
S'default object formatter'
p3390
sg3
I01
sg10
I2
sg11
g19
sa(dp3391
g3
I01
sg10
I5
sg11
g1801
sa(dp3392
g3
I01
sg10
I5
sg11
g21
sa(dp3393
g3
I01
sg10
I5
sg11
g1805
sa(dp3394
g3
I01
sg10
I5
sg11
g27
sa(dp3395
g3
I01
sg10
I5
sg11
g29
sa(dp3396
g1
S'__instancecheck__() -> bool\ncheck if an object is an instance'
p3397
sg3
I01
sg10
I2
sg11
S'__instancecheck__'
p3398
sa(dp3399
g3
I01
sg10
I5
sg11
S'__itemsize__'
p3400
sa(dp3401
g3
I01
sg10
I5
sg11
g1815
sa(dp3402
g3
I01
sg10
I5
sg11
g1818
sa(dp3403
g3
I01
sg10
I5
sg11
S'__module__'
p3404
sa(dp3405
g3
I01
sg10
I5
sg11
S'__mro__'
p3406
sa(dp3407
g3
I01
sg10
I5
sg11
g1578
sa(dp3408
g3
I01
sg10
I5
sg11
g1821
sa(dp3409
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3410
sg3
I01
sg10
I2
sg11
g32
sa(dp3411
g1
S'helper for pickle'
p3412
sg3
I01
sg10
I2
sg11
g34
sa(dp3413
g1
S'helper for pickle'
p3414
sg3
I01
sg10
I2
sg11
g37
sa(dp3415
g3
I01
sg10
I5
sg11
g39
sa(dp3416
g3
I01
sg10
I5
sg11
g41
sa(dp3417
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p3418
sg3
I01
sg10
I2
sg11
g46
sa(dp3419
g3
I01
sg10
I5
sg11
g48
sa(dp3420
g1
S'__subclasscheck__() -> bool\ncheck if a class is a subclass'
p3421
sg3
I01
sg10
I2
sg11
S'__subclasscheck__'
p3422
sa(dp3423
g1
S'__subclasses__() -> list of immediate subclasses'
p3424
sg3
I01
sg10
I2
sg11
S'__subclasses__'
p3425
sa(dp3426
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3427
sg3
I01
sg10
I2
sg11
g51
sa(dp3428
g3
I01
sg10
I5
sg11
S'__weakrefoffset__'
p3429
sa(dp3430
g1
S"mro() -> list\nreturn a type's method resolution order"
p3431
sg3
I01
sg10
I2
sg11
S'mro'
p3432
sasg10
I3
sg11
g10
sa(dp3433
g1
S'unichr(i) -> Unicode character\n\nReturn a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.'
p3434
sg3
I01
sg10
I2
sg11
S'unichr'
p3435
sa(dp3436
g1
S"unicode(object='') -> unicode object\nunicode(string[, encoding[, errors]]) -> unicode object\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'."
p3437
sg3
I01
sg4
(lp3438
(dp3439
g3
I01
sg10
I5
sg11
g1626
sa(dp3440
g3
I01
sg10
I5
sg11
g1792
sa(dp3441
g3
I01
sg10
I5
sg11
g12
sa(dp3442
g3
I01
sg10
I5
sg11
g16
sa(dp3443
g3
I01
sg10
I5
sg11
g1797
sa(dp3444
g1
S'S.__format__(format_spec) -> unicode\n\nReturn a formatted version of S as described by format_spec.'
p3445
sg3
I01
sg10
I2
sg11
g19
sa(dp3446
g3
I01
sg10
I5
sg11
g1801
sa(dp3447
g3
I01
sg10
I5
sg11
g21
sa(dp3448
g3
I01
sg10
I5
sg11
g23
sa(dp3449
g1
Nsg3
I01
sg10
I2
sg11
g1646
sa(dp3450
g3
I01
sg10
I5
sg11
g25
sa(dp3451
g3
I01
sg10
I5
sg11
g1805
sa(dp3452
g3
I01
sg10
I5
sg11
g27
sa(dp3453
g3
I01
sg10
I5
sg11
g29
sa(dp3454
g3
I01
sg10
I5
sg11
g1815
sa(dp3455
g3
I01
sg10
I5
sg11
g1763
sa(dp3456
g3
I01
sg10
I5
sg11
g1818
sa(dp3457
g3
I01
sg10
I5
sg11
g1662
sa(dp3458
g3
I01
sg10
I5
sg11
g1664
sa(dp3459
g3
I01
sg10
I5
sg11
g1821
sa(dp3460
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3461
sg3
I01
sg10
I2
sg11
g32
sa(dp3462
g1
S'helper for pickle'
p3463
sg3
I01
sg10
I2
sg11
g34
sa(dp3464
g1
S'helper for pickle'
p3465
sg3
I01
sg10
I2
sg11
g37
sa(dp3466
g3
I01
sg10
I5
sg11
g39
sa(dp3467
g3
I01
sg10
I5
sg11
g1697
sa(dp3468
g3
I01
sg10
I5
sg11
g1699
sa(dp3469
g3
I01
sg10
I5
sg11
g41
sa(dp3470
g1
S'S.__sizeof__() -> size of S in memory, in bytes\n\n'
p3471
sg3
I01
sg10
I2
sg11
g46
sa(dp3472
g3
I01
sg10
I5
sg11
g48
sa(dp3473
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3474
sg3
I01
sg10
I2
sg11
g51
sa(dp3475
g1
Nsg3
I01
sg10
I2
sg11
g2007
sa(dp3476
g1
Nsg3
I01
sg10
I2
sg11
g2009
sa(dp3477
g1
S'S.capitalize() -> unicode\n\nReturn a capitalized version of S, i.e. make the first character\nhave upper case and the rest lower case.'
p3478
sg3
I01
sg10
I2
sg11
g1842
sa(dp3479
g1
S'S.center(width[, fillchar]) -> unicode\n\nReturn S centered in a Unicode string of length width. Padding is\ndone using the specified fill character (default is a space)'
p3480
sg3
I01
sg10
I2
sg11
g1845
sa(dp3481
g1
S'S.count(sub[, start[, end]]) -> int\n\nReturn the number of non-overlapping occurrences of substring sub in\nUnicode string S[start:end].  Optional arguments start and end are\ninterpreted as in slice notation.'
p3482
sg3
I01
sg10
I2
sg11
g1848
sa(dp3483
g1
S"S.decode([encoding[,errors]]) -> string or unicode\n\nDecodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\nas well as any other name registered with codecs.register_error that is\nable to handle UnicodeDecodeErrors."
p3484
sg3
I01
sg10
I2
sg11
g1851
sa(dp3485
g1
S"S.encode([encoding[,errors]]) -> string or unicode\n\nEncodes S using the codec registered for encoding. encoding defaults\nto the default encoding. errors may be given to set a different error\nhandling scheme. Default is 'strict' meaning that encoding errors raise\na UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n'xmlcharrefreplace' as well as any other name registered with\ncodecs.register_error that can handle UnicodeEncodeErrors."
p3486
sg3
I01
sg10
I2
sg11
g2020
sa(dp3487
g1
S'S.endswith(suffix[, start[, end]]) -> bool\n\nReturn True if S ends with the specified suffix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nsuffix can also be a tuple of strings to try.'
p3488
sg3
I01
sg10
I2
sg11
g1854
sa(dp3489
g1
S'S.expandtabs([tabsize]) -> unicode\n\nReturn a copy of S where all tab characters are expanded using spaces.\nIf tabsize is not given, a tab size of 8 characters is assumed.'
p3490
sg3
I01
sg10
I2
sg11
g1857
sa(dp3491
g1
S'S.find(sub [,start [,end]]) -> int\n\nReturn the lowest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p3492
sg3
I01
sg10
I2
sg11
g1863
sa(dp3493
g1
S"S.format(*args, **kwargs) -> unicode\n\nReturn a formatted version of S, using substitutions from args and kwargs.\nThe substitutions are identified by braces ('{' and '}')."
p3494
sg3
I01
sg10
I2
sg11
g2029
sa(dp3495
g1
S'S.index(sub [,start [,end]]) -> int\n\nLike S.find() but raise ValueError when the substring is not found.'
p3496
sg3
I01
sg10
I2
sg11
g1869
sa(dp3497
g1
S'S.isalnum() -> bool\n\nReturn True if all characters in S are alphanumeric\nand there is at least one character in S, False otherwise.'
p3498
sg3
I01
sg10
I2
sg11
g1875
sa(dp3499
g1
S'S.isalpha() -> bool\n\nReturn True if all characters in S are alphabetic\nand there is at least one character in S, False otherwise.'
p3500
sg3
I01
sg10
I2
sg11
g1878
sa(dp3501
g1
S'S.isdecimal() -> bool\n\nReturn True if there are only decimal characters in S,\nFalse otherwise.'
p3502
sg3
I01
sg10
I2
sg11
S'isdecimal'
p3503
sa(dp3504
g1
S'S.isdigit() -> bool\n\nReturn True if all characters in S are digits\nand there is at least one character in S, False otherwise.'
p3505
sg3
I01
sg10
I2
sg11
g1881
sa(dp3506
g1
S'S.islower() -> bool\n\nReturn True if all cased characters in S are lowercase and there is\nat least one cased character in S, False otherwise.'
p3507
sg3
I01
sg10
I2
sg11
g1884
sa(dp3508
g1
S'S.isnumeric() -> bool\n\nReturn True if there are only numeric characters in S,\nFalse otherwise.'
p3509
sg3
I01
sg10
I2
sg11
S'isnumeric'
p3510
sa(dp3511
g1
S'S.isspace() -> bool\n\nReturn True if all characters in S are whitespace\nand there is at least one character in S, False otherwise.'
p3512
sg3
I01
sg10
I2
sg11
g1887
sa(dp3513
g1
S'S.istitle() -> bool\n\nReturn True if S is a titlecased string and there is at least one\ncharacter in S, i.e. upper- and titlecase characters may only\nfollow uncased characters and lowercase characters only cased ones.\nReturn False otherwise.'
p3514
sg3
I01
sg10
I2
sg11
g1890
sa(dp3515
g1
S'S.isupper() -> bool\n\nReturn True if all cased characters in S are uppercase and there is\nat least one cased character in S, False otherwise.'
p3516
sg3
I01
sg10
I2
sg11
g1893
sa(dp3517
g1
S'S.join(iterable) -> unicode\n\nReturn a string which is the concatenation of the strings in the\niterable.  The separator between elements is S.'
p3518
sg3
I01
sg10
I2
sg11
g1896
sa(dp3519
g1
S'S.ljust(width[, fillchar]) -> int\n\nReturn S left-justified in a Unicode string of length width. Padding is\ndone using the specified fill character (default is a space).'
p3520
sg3
I01
sg10
I2
sg11
g1899
sa(dp3521
g1
S'S.lower() -> unicode\n\nReturn a copy of the string S converted to lowercase.'
p3522
sg3
I01
sg10
I2
sg11
g1902
sa(dp3523
g1
S'S.lstrip([chars]) -> unicode\n\nReturn a copy of the string S with leading whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is a str, it will be converted to unicode before stripping'
p3524
sg3
I01
sg10
I2
sg11
g1905
sa(dp3525
g1
S'S.partition(sep) -> (head, sep, tail)\n\nSearch for the separator sep in S, and return the part before it,\nthe separator itself, and the part after it.  If the separator is not\nfound, return S and two empty strings.'
p3526
sg3
I01
sg10
I2
sg11
g1908
sa(dp3527
g1
S'S.replace(old, new[, count]) -> unicode\n\nReturn a copy of S with all occurrences of substring\nold replaced by new.  If the optional argument count is\ngiven, only the first count occurrences are replaced.'
p3528
sg3
I01
sg10
I2
sg11
g1917
sa(dp3529
g1
S'S.rfind(sub [,start [,end]]) -> int\n\nReturn the highest index in S where substring sub is found,\nsuch that sub is contained within S[start:end].  Optional\narguments start and end are interpreted as in slice notation.\n\nReturn -1 on failure.'
p3530
sg3
I01
sg10
I2
sg11
g1923
sa(dp3531
g1
S'S.rindex(sub [,start [,end]]) -> int\n\nLike S.rfind() but raise ValueError when the substring is not found.'
p3532
sg3
I01
sg10
I2
sg11
g1926
sa(dp3533
g1
S'S.rjust(width[, fillchar]) -> unicode\n\nReturn S right-justified in a Unicode string of length width. Padding is\ndone using the specified fill character (default is a space).'
p3534
sg3
I01
sg10
I2
sg11
g1929
sa(dp3535
g1
S'S.rpartition(sep) -> (head, sep, tail)\n\nSearch for the separator sep in S, starting at the end of S, and return\nthe part before it, the separator itself, and the part after it.  If the\nseparator is not found, return two empty strings and S.'
p3536
sg3
I01
sg10
I2
sg11
g1932
sa(dp3537
g1
S'S.rsplit([sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in S, using sep as the\ndelimiter string, starting at the end of the string and\nworking to the front.  If maxsplit is given, at most maxsplit\nsplits are done. If sep is not specified, any whitespace string\nis a separator.'
p3538
sg3
I01
sg10
I2
sg11
g1935
sa(dp3539
g1
S'S.rstrip([chars]) -> unicode\n\nReturn a copy of the string S with trailing whitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is a str, it will be converted to unicode before stripping'
p3540
sg3
I01
sg10
I2
sg11
g1938
sa(dp3541
g1
S'S.split([sep [,maxsplit]]) -> list of strings\n\nReturn a list of the words in S, using sep as the\ndelimiter string.  If maxsplit is given, at most maxsplit\nsplits are done. If sep is not specified or is None, any\nwhitespace string is a separator and empty strings are\nremoved from the result.'
p3542
sg3
I01
sg10
I2
sg11
g1941
sa(dp3543
g1
S'S.splitlines(keepends=False) -> list of strings\n\nReturn a list of the lines in S, breaking at line boundaries.\nLine breaks are not included in the resulting list unless keepends\nis given and true.'
p3544
sg3
I01
sg10
I2
sg11
g1944
sa(dp3545
g1
S'S.startswith(prefix[, start[, end]]) -> bool\n\nReturn True if S starts with the specified prefix, False otherwise.\nWith optional start, test S beginning at that position.\nWith optional end, stop comparing S at that position.\nprefix can also be a tuple of strings to try.'
p3546
sg3
I01
sg10
I2
sg11
g1947
sa(dp3547
g1
S'S.strip([chars]) -> unicode\n\nReturn a copy of the string S with leading and trailing\nwhitespace removed.\nIf chars is given and not None, remove characters in chars instead.\nIf chars is a str, it will be converted to unicode before stripping'
p3548
sg3
I01
sg10
I2
sg11
g1950
sa(dp3549
g1
S'S.swapcase() -> unicode\n\nReturn a copy of S with uppercase characters converted to lowercase\nand vice versa.'
p3550
sg3
I01
sg10
I2
sg11
g1953
sa(dp3551
g1
S'S.title() -> unicode\n\nReturn a titlecased version of S, i.e. words start with title case\ncharacters, all remaining cased characters have lower case.'
p3552
sg3
I01
sg10
I2
sg11
g1956
sa(dp3553
g1
S'S.translate(table) -> unicode\n\nReturn a copy of the string S, where all characters have been mapped\nthrough the given translation table, which must be a mapping of\nUnicode ordinals to Unicode ordinals, Unicode strings or None.\nUnmapped characters are left untouched. Characters mapped to None\nare deleted.'
p3554
sg3
I01
sg10
I2
sg11
g1959
sa(dp3555
g1
S'S.upper() -> unicode\n\nReturn a copy of S converted to uppercase.'
p3556
sg3
I01
sg10
I2
sg11
g1962
sa(dp3557
g1
S'S.zfill(width) -> unicode\n\nPad a numeric string S with zeros on the left, to fill a field\nof the specified width. The string S is never truncated.'
p3558
sg3
I01
sg10
I2
sg11
g1965
sasg10
I3
sg11
S'unicode'
p3559
sa(dp3560
g1
S'vars([object]) -> dictionary\n\nWithout arguments, equivalent to locals().\nWith an argument, equivalent to object.__dict__.'
p3561
sg3
I01
sg10
I2
sg11
S'vars'
p3562
sa(dp3563
g1
S'xrange(stop) -> xrange object\nxrange(start, stop[, step]) -> xrange object\n\nLike range(), but instead of returning a list, returns an object that\ngenerates the numbers in the range on demand.  For looping, this is \nslightly faster than range() and more memory efficient.'
p3564
sg3
I01
sg4
(lp3565
(dp3566
g3
I01
sg10
I5
sg11
g12
sa(dp3567
g3
I01
sg10
I5
sg11
g16
sa(dp3568
g1
S'default object formatter'
p3569
sg3
I01
sg10
I2
sg11
g19
sa(dp3570
g3
I01
sg10
I5
sg11
g21
sa(dp3571
g3
I01
sg10
I5
sg11
g23
sa(dp3572
g3
I01
sg10
I5
sg11
g27
sa(dp3573
g3
I01
sg10
I5
sg11
g29
sa(dp3574
g3
I01
sg10
I5
sg11
g1813
sa(dp3575
g3
I01
sg10
I5
sg11
g1763
sa(dp3576
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p3577
sg3
I01
sg10
I2
sg11
g32
sa(dp3578
g1
Nsg3
I01
sg10
I2
sg11
g34
sa(dp3579
g1
S'helper for pickle'
p3580
sg3
I01
sg10
I2
sg11
g37
sa(dp3581
g3
I01
sg10
I5
sg11
g39
sa(dp3582
g1
S'Returns a reverse iterator.'
p3583
sg3
I01
sg10
I2
sg11
g2721
sa(dp3584
g3
I01
sg10
I5
sg11
g41
sa(dp3585
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p3586
sg3
I01
sg10
I2
sg11
g46
sa(dp3587
g3
I01
sg10
I5
sg11
g48
sa(dp3588
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p3589
sg3
I01
sg10
I2
sg11
g51
sasg10
I3
sg11
S'xrange'
p3590
sa(dp3591
g1
S'zip(seq1 [, seq2 [...]]) -> [(seq1[0], seq2[0] ...), (...)]\n\nReturn a list of tuples, where each tuple contains the i-th element\nfrom each of the argument sequences.  The returned list is truncated\nin length to the length of the shortest argument sequence.'
p3592
sg3
I01
sg10
I2
sg11
S'zip'
p3593
sasg10
I1
sg11
S'__builtin__'
p3594
s.