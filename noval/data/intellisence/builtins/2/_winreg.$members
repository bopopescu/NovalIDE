(dp0
S'doc'
p1
S'This module provides access to the Windows registry API.\n\nFunctions:\n\nCloseKey() - Closes a registry key.\nConnectRegistry() - Establishes a connection to a predefined registry handle\n                    on another computer.\nCreateKey() - Creates the specified key, or opens it if it already exists.\nDeleteKey() - Deletes the specified key.\nDeleteValue() - Removes a named value from the specified registry key.\nEnumKey() - Enumerates subkeys of the specified open registry key.\nEnumValue() - Enumerates values of the specified open registry key.\nExpandEnvironmentStrings() - Expand the env strings in a REG_EXPAND_SZ string.\nFlushKey() - Writes all the attributes of the specified key to the registry.\nLoadKey() - Creates a subkey under HKEY_USER or HKEY_LOCAL_MACHINE and stores\n            registration information from a specified file into that subkey.\nOpenKey() - Alias for <om win32api.RegOpenKeyEx>\nOpenKeyEx() - Opens the specified key.\nQueryValue() - Retrieves the value associated with the unnamed value for a\n               specified key in the registry.\nQueryValueEx() - Retrieves the type and data for a specified value name\n                 associated with an open registry key.\nQueryInfoKey() - Returns information about the specified key.\nSaveKey() - Saves the specified key, and all its subkeys a file.\nSetValue() - Associates a value with a specified key.\nSetValueEx() - Stores data in the value field of an open registry key.\n\nSpecial objects:\n\nHKEYType -- type object for HKEY objects\nerror -- exception raised for Win32 errors\n\nInteger constants:\nMany constants are defined - see the documentation for each function\nto see what constants are used, and where.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'CloseKey(hkey) - Closes a previously opened registry key.\n\nThe hkey argument specifies a previously opened key.\n\nNote that if the key is not closed using this method, it will be\nclosed when the hkey object is destroyed by Python.'
p7
sg3
I01
sS'type'
p8
I2
sS'name'
p9
S'CloseKey'
p10
sa(dp11
g1
S'key = ConnectRegistry(computer_name, key) - Establishes a connection to a predefined registry handle on another computer.\n\ncomputer_name is the name of the remote computer, of the form \\\\computername.\n If None, the local computer is used.\nkey is the predefined handle to connect to.\n\nThe return value is the handle of the opened key.\nIf the function fails, a WindowsError exception is raised.'
p12
sg3
I01
sg8
I2
sg9
S'ConnectRegistry'
p13
sa(dp14
g1
S'key = CreateKey(key, sub_key) - Creates or opens the specified key.\n\nkey is an already open key, or one of the predefined HKEY_* constants\nsub_key is a string that names the key this method opens or creates.\n If key is one of the predefined keys, sub_key may be None. In that case,\n the handle returned is the same key handle passed in to the function.\n\nIf the key already exists, this function opens the existing key\n\nThe return value is the handle of the opened key.\nIf the function fails, an exception is raised.'
p15
sg3
I01
sg8
I2
sg9
S'CreateKey'
p16
sa(dp17
g1
S'key = CreateKeyEx(key, sub_key, res, sam) - Creates or opens the specified key.\n\nkey is an already open key, or one of the predefined HKEY_* constants\nsub_key is a string that names the key this method opens or creates.\nres is a reserved integer, and must be zero.  Default is zero.\nsam is an integer that specifies an access mask that describes the desired\n If key is one of the predefined keys, sub_key may be None. In that case,\n the handle returned is the same key handle passed in to the function.\n\nIf the key already exists, this function opens the existing key\n\nThe return value is the handle of the opened key.\nIf the function fails, an exception is raised.'
p18
sg3
I01
sg8
I2
sg9
S'CreateKeyEx'
p19
sa(dp20
g1
S'DeleteKey(key, sub_key) - Deletes the specified key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nsub_key is a string that must be a subkey of the key identified by the key parameter.\n This value must not be None, and the key may not have subkeys.\n\nThis method can not delete keys with subkeys.\n\nIf the method succeeds, the entire key, including all of its values,\nis removed.  If the method fails, a WindowsError exception is raised.'
p21
sg3
I01
sg8
I2
sg9
S'DeleteKey'
p22
sa(dp23
g1
S'DeleteKeyEx(key, sub_key, sam, res) - Deletes the specified key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nsub_key is a string that must be a subkey of the key identified by the key parameter.\nres is a reserved integer, and must be zero.  Default is zero.\nsam is an integer that specifies an access mask that describes the desired\n This value must not be None, and the key may not have subkeys.\n\nThis method can not delete keys with subkeys.\n\nIf the method succeeds, the entire key, including all of its values,\nis removed.  If the method fails, a WindowsError exception is raised.\nOn unsupported Windows versions, NotImplementedError is raised.'
p24
sg3
I01
sg8
I2
sg9
S'DeleteKeyEx'
p25
sa(dp26
g1
S'DeleteValue(key, value) - Removes a named value from a registry key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nvalue is a string that identifies the value to remove.'
p27
sg3
I01
sg8
I2
sg9
S'DeleteValue'
p28
sa(dp29
g1
S'Disables registry reflection for 32-bit processes running on a 64-bit\nOperating System.  Will generally raise NotImplemented if executed on\na 32-bit Operating System.\nIf the key is not on the reflection list, the function succeeds but has no effect.\nDisabling reflection for a key does not affect reflection of any subkeys.'
p30
sg3
I01
sg8
I2
sg9
S'DisableReflectionKey'
p31
sa(dp32
g1
S'Restores registry reflection for the specified disabled key.\nWill generally raise NotImplemented if executed on a 32-bit Operating System.\nRestoring reflection for a key does not affect reflection of any subkeys.'
p33
sg3
I01
sg8
I2
sg9
S'EnableReflectionKey'
p34
sa(dp35
g1
S'string = EnumKey(key, index) - Enumerates subkeys of an open registry key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nindex is an integer that identifies the index of the key to retrieve.\n\nThe function retrieves the name of one subkey each time it is called.\nIt is typically called repeatedly until a WindowsError exception is\nraised, indicating no more values are available.'
p36
sg3
I01
sg8
I2
sg9
S'EnumKey'
p37
sa(dp38
g1
S'tuple = EnumValue(key, index) - Enumerates values of an open registry key.\nkey is an already open key, or any one of the predefined HKEY_* constants.\nindex is an integer that identifies the index of the value to retrieve.\n\nThe function retrieves the name of one subkey each time it is called.\nIt is typically called repeatedly, until a WindowsError exception\nis raised, indicating no more values.\n\nThe result is a tuple of 3 items:\nvalue_name is a string that identifies the value.\nvalue_data is an object that holds the value data, and whose type depends\n on the underlying registry type.\ndata_type is an integer that identifies the type of the value data.'
p39
sg3
I01
sg8
I2
sg9
S'EnumValue'
p40
sa(dp41
g1
S'string = ExpandEnvironmentStrings(string) - Expand environment vars.\n'
p42
sg3
I01
sg8
I2
sg9
S'ExpandEnvironmentStrings'
p43
sa(dp44
g1
S"FlushKey(key) - Writes all the attributes of a key to the registry.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\n\nIt is not necessary to call RegFlushKey to change a key.\nRegistry changes are flushed to disk by the registry using its lazy flusher.\nRegistry changes are also flushed to disk at system shutdown.\nUnlike CloseKey(), the FlushKey() method returns only when all the data has\nbeen written to the registry.\nAn application should only call FlushKey() if it requires absolute certainty that registry changes are on disk.\nIf you don't know whether a FlushKey() call is required, it probably isn't."
p45
sg3
I01
sg8
I2
sg9
S'FlushKey'
p46
sa(dp47
g1
S'PyHKEY Object - A Python object, representing a win32 registry key.\n\nThis object wraps a Windows HKEY object, automatically closing it when\nthe object is destroyed.  To guarantee cleanup, you can call either\nthe Close() method on the PyHKEY, or the CloseKey() method.\n\nAll functions which accept a handle object also accept an integer - \nhowever, use of the handle object is encouraged.\n\nFunctions:\nClose() - Closes the underlying handle.\nDetach() - Returns the integer Win32 handle, detaching it from the object\n\nProperties:\nhandle - The integer Win32 handle.\n\nOperations:\n__nonzero__ - Handles with an open object return true, otherwise false.\n__int__ - Converting a handle to an integer returns the Win32 handle.\n__cmp__ - Handle objects are compared using the handle value.'
p48
sg3
I01
sg4
(lp49
(dp50
g1
S'key.Close() - Closes the underlying Windows handle.\n\nIf the handle is already closed, no error is raised.'
p51
sg3
I01
sg8
I2
sg9
S'Close'
p52
sa(dp53
g1
S'int = key.Detach() - Detaches the Windows handle from the handle object.\n\nThe result is the value of the handle before it is detached.  If the\nhandle is already detached, this will return zero.\n\nAfter calling this function, the handle is effectively invalidated,\nbut the handle is not closed.  You would call this function when you\nneed the underlying win32 handle to exist beyond the lifetime of the\nhandle object.\nOn 64 bit windows, the result of this function is a long integer'
p54
sg3
I01
sg8
I2
sg9
S'Detach'
p55
sa(dp56
g3
I01
sg8
I5
sg9
S'__abs__'
p57
sa(dp58
g3
I01
sg8
I5
sg9
S'__add__'
p59
sa(dp60
g3
I01
sg8
I5
sg9
S'__and__'
p61
sa(dp62
g3
I01
sg8
I5
sg9
S'__cmp__'
p63
sa(dp64
g3
I01
sg8
I5
sg9
S'__delattr__'
p65
sa(dp66
g3
I01
sg8
I5
sg9
S'__div__'
p67
sa(dp68
g3
I01
sg8
I5
sg9
S'__divmod__'
p69
sa(dp70
g3
I01
sg8
I5
sg9
S'__doc__'
p71
sa(dp72
g1
Nsg3
I01
sg8
I2
sg9
S'__enter__'
p73
sa(dp74
g1
Nsg3
I01
sg8
I2
sg9
S'__exit__'
p75
sa(dp76
g3
I01
sg8
I5
sg9
S'__float__'
p77
sa(dp78
g1
S'default object formatter'
p79
sg3
I01
sg8
I2
sg9
S'__format__'
p80
sa(dp81
g3
I01
sg8
I5
sg9
S'__getattribute__'
p82
sa(dp83
g3
I01
sg8
I5
sg9
S'__hash__'
p84
sa(dp85
g3
I01
sg8
I5
sg9
S'__hex__'
p86
sa(dp87
g3
I01
sg8
I5
sg9
S'__init__'
p88
sa(dp89
g3
I01
sg8
I5
sg9
S'__int__'
p90
sa(dp91
g3
I01
sg8
I5
sg9
S'__invert__'
p92
sa(dp93
g3
I01
sg8
I5
sg9
S'__long__'
p94
sa(dp95
g3
I01
sg8
I5
sg9
S'__lshift__'
p96
sa(dp97
g3
I01
sg8
I5
sg9
S'__mod__'
p98
sa(dp99
g3
I01
sg8
I5
sg9
S'__mul__'
p100
sa(dp101
g3
I01
sg8
I5
sg9
S'__neg__'
p102
sa(dp103
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p104
sg3
I01
sg8
I2
sg9
S'__new__'
p105
sa(dp106
g3
I01
sg8
I5
sg9
S'__nonzero__'
p107
sa(dp108
g3
I01
sg8
I5
sg9
S'__oct__'
p109
sa(dp110
g3
I01
sg8
I5
sg9
S'__or__'
p111
sa(dp112
g3
I01
sg8
I5
sg9
S'__pos__'
p113
sa(dp114
g3
I01
sg8
I5
sg9
S'__pow__'
p115
sa(dp116
g3
I01
sg8
I5
sg9
S'__radd__'
p117
sa(dp118
g3
I01
sg8
I5
sg9
S'__rand__'
p119
sa(dp120
g3
I01
sg8
I5
sg9
S'__rdiv__'
p121
sa(dp122
g3
I01
sg8
I5
sg9
S'__rdivmod__'
p123
sa(dp124
g1
S'helper for pickle'
p125
sg3
I01
sg8
I2
sg9
S'__reduce__'
p126
sa(dp127
g1
S'helper for pickle'
p128
sg3
I01
sg8
I2
sg9
S'__reduce_ex__'
p129
sa(dp130
g3
I01
sg8
I5
sg9
S'__repr__'
p131
sa(dp132
g3
I01
sg8
I5
sg9
S'__rlshift__'
p133
sa(dp134
g3
I01
sg8
I5
sg9
S'__rmod__'
p135
sa(dp136
g3
I01
sg8
I5
sg9
S'__rmul__'
p137
sa(dp138
g3
I01
sg8
I5
sg9
S'__ror__'
p139
sa(dp140
g3
I01
sg8
I5
sg9
S'__rpow__'
p141
sa(dp142
g3
I01
sg8
I5
sg9
S'__rrshift__'
p143
sa(dp144
g3
I01
sg8
I5
sg9
S'__rshift__'
p145
sa(dp146
g3
I01
sg8
I5
sg9
S'__rsub__'
p147
sa(dp148
g3
I01
sg8
I5
sg9
S'__rxor__'
p149
sa(dp150
g3
I01
sg8
I5
sg9
S'__setattr__'
p151
sa(dp152
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p153
sg3
I01
sg8
I2
sg9
S'__sizeof__'
p154
sa(dp155
g3
I01
sg8
I5
sg9
S'__str__'
p156
sa(dp157
g3
I01
sg8
I5
sg9
S'__sub__'
p158
sa(dp159
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p160
sg3
I01
sg8
I2
sg9
S'__subclasshook__'
p161
sa(dp162
g3
I01
sg8
I5
sg9
S'__xor__'
p163
sa(dp164
g3
I01
sg8
I5
sg9
S'handle'
p165
sasg8
I3
sg9
S'HKEYType'
p166
sa(dp167
g3
I01
sg8
I5
sg9
S'HKEY_CLASSES_ROOT'
p168
sa(dp169
g3
I01
sg8
I5
sg9
S'HKEY_CURRENT_CONFIG'
p170
sa(dp171
g3
I01
sg8
I5
sg9
S'HKEY_CURRENT_USER'
p172
sa(dp173
g3
I01
sg8
I5
sg9
S'HKEY_DYN_DATA'
p174
sa(dp175
g3
I01
sg8
I5
sg9
S'HKEY_LOCAL_MACHINE'
p176
sa(dp177
g3
I01
sg8
I5
sg9
S'HKEY_PERFORMANCE_DATA'
p178
sa(dp179
g3
I01
sg8
I5
sg9
S'HKEY_USERS'
p180
sa(dp181
g3
I01
sg8
I5
sg9
S'KEY_ALL_ACCESS'
p182
sa(dp183
g3
I01
sg8
I5
sg9
S'KEY_CREATE_LINK'
p184
sa(dp185
g3
I01
sg8
I5
sg9
S'KEY_CREATE_SUB_KEY'
p186
sa(dp187
g3
I01
sg8
I5
sg9
S'KEY_ENUMERATE_SUB_KEYS'
p188
sa(dp189
g3
I01
sg8
I5
sg9
S'KEY_EXECUTE'
p190
sa(dp191
g3
I01
sg8
I5
sg9
S'KEY_NOTIFY'
p192
sa(dp193
g3
I01
sg8
I5
sg9
S'KEY_QUERY_VALUE'
p194
sa(dp195
g3
I01
sg8
I5
sg9
S'KEY_READ'
p196
sa(dp197
g3
I01
sg8
I5
sg9
S'KEY_SET_VALUE'
p198
sa(dp199
g3
I01
sg8
I5
sg9
S'KEY_WOW64_32KEY'
p200
sa(dp201
g3
I01
sg8
I5
sg9
S'KEY_WOW64_64KEY'
p202
sa(dp203
g3
I01
sg8
I5
sg9
S'KEY_WRITE'
p204
sa(dp205
g1
S'LoadKey(key, sub_key, file_name) - Creates a subkey under the specified key\nand stores registration information from a specified file into that subkey.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nsub_key is a string that identifies the sub_key to load\nfile_name is the name of the file to load registry data from.\n This file must have been created with the SaveKey() function.\n Under the file allocation table (FAT) file system, the filename may not\nhave an extension.\n\nA call to LoadKey() fails if the calling process does not have the\nSE_RESTORE_PRIVILEGE privilege.\n\nIf key is a handle returned by ConnectRegistry(), then the path specified\nin fileName is relative to the remote computer.\n\nThe docs imply key must be in the HKEY_USER or HKEY_LOCAL_MACHINE tree'
p206
sg3
I01
sg8
I2
sg9
S'LoadKey'
p207
sa(dp208
g1
S'key = OpenKey(key, sub_key, res = 0, sam = KEY_READ) - Opens the specified key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nsub_key is a string that identifies the sub_key to open\nres is a reserved integer, and must be zero.  Default is zero.\nsam is an integer that specifies an access mask that describes the desired\n security access for the key.  Default is KEY_READ\n\nThe result is a new handle to the specified key\nIf the function fails, a WindowsError exception is raised.'
p209
sg3
I01
sg8
I2
sg9
S'OpenKey'
p210
sa(dp211
g1
S'See OpenKey()'
p212
sg3
I01
sg8
I2
sg9
S'OpenKeyEx'
p213
sa(dp214
g1
S"tuple = QueryInfoKey(key) - Returns information about a key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\n\nThe result is a tuple of 3 items:An integer that identifies the number of sub keys this key has.\nAn integer that identifies the number of values this key has.\nA long integer that identifies when the key was last modified (if available)\n as 100's of nanoseconds since Jan 1, 1600."
p215
sg3
I01
sg8
I2
sg9
S'QueryInfoKey'
p216
sa(dp217
g1
S'bool = QueryReflectionKey(hkey) - Determines the reflection state for the specified key.\nWill generally raise NotImplemented if executed on a 32-bit Operating System.\n'
p218
sg3
I01
sg8
I2
sg9
S'QueryReflectionKey'
p219
sa(dp220
g1
S"string = QueryValue(key, sub_key) - retrieves the unnamed value for a key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nsub_key is a string that holds the name of the subkey with which the value\n is associated.  If this parameter is None or empty, the function retrieves\n the value set by the SetValue() method for the key identified by key.\nValues in the registry have name, type, and data components. This method\nretrieves the data for a key's first value that has a NULL name.\nBut the underlying API call doesn't return the type, Lame Lame Lame, DONT USE THIS!!!"
p221
sg3
I01
sg8
I2
sg9
S'QueryValue'
p222
sa(dp223
g1
S'value,type_id = QueryValueEx(key, value_name) - Retrieves the type and data for a specified value name associated with an open registry key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nvalue_name is a string indicating the value to query'
p224
sg3
I01
sg8
I2
sg9
S'QueryValueEx'
p225
sa(dp226
g3
I01
sg8
I5
sg9
S'REG_BINARY'
p227
sa(dp228
g3
I01
sg8
I5
sg9
S'REG_CREATED_NEW_KEY'
p229
sa(dp230
g3
I01
sg8
I5
sg9
S'REG_DWORD'
p231
sa(dp232
g3
I01
sg8
I5
sg9
S'REG_DWORD_BIG_ENDIAN'
p233
sa(dp234
g3
I01
sg8
I5
sg9
S'REG_DWORD_LITTLE_ENDIAN'
p235
sa(dp236
g3
I01
sg8
I5
sg9
S'REG_EXPAND_SZ'
p237
sa(dp238
g3
I01
sg8
I5
sg9
S'REG_FULL_RESOURCE_DESCRIPTOR'
p239
sa(dp240
g3
I01
sg8
I5
sg9
S'REG_LEGAL_CHANGE_FILTER'
p241
sa(dp242
g3
I01
sg8
I5
sg9
S'REG_LEGAL_OPTION'
p243
sa(dp244
g3
I01
sg8
I5
sg9
S'REG_LINK'
p245
sa(dp246
g3
I01
sg8
I5
sg9
S'REG_MULTI_SZ'
p247
sa(dp248
g3
I01
sg8
I5
sg9
S'REG_NONE'
p249
sa(dp250
g3
I01
sg8
I5
sg9
S'REG_NOTIFY_CHANGE_ATTRIBUTES'
p251
sa(dp252
g3
I01
sg8
I5
sg9
S'REG_NOTIFY_CHANGE_LAST_SET'
p253
sa(dp254
g3
I01
sg8
I5
sg9
S'REG_NOTIFY_CHANGE_NAME'
p255
sa(dp256
g3
I01
sg8
I5
sg9
S'REG_NOTIFY_CHANGE_SECURITY'
p257
sa(dp258
g3
I01
sg8
I5
sg9
S'REG_NO_LAZY_FLUSH'
p259
sa(dp260
g3
I01
sg8
I5
sg9
S'REG_OPENED_EXISTING_KEY'
p261
sa(dp262
g3
I01
sg8
I5
sg9
S'REG_OPTION_BACKUP_RESTORE'
p263
sa(dp264
g3
I01
sg8
I5
sg9
S'REG_OPTION_CREATE_LINK'
p265
sa(dp266
g3
I01
sg8
I5
sg9
S'REG_OPTION_NON_VOLATILE'
p267
sa(dp268
g3
I01
sg8
I5
sg9
S'REG_OPTION_OPEN_LINK'
p269
sa(dp270
g3
I01
sg8
I5
sg9
S'REG_OPTION_RESERVED'
p271
sa(dp272
g3
I01
sg8
I5
sg9
S'REG_OPTION_VOLATILE'
p273
sa(dp274
g3
I01
sg8
I5
sg9
S'REG_REFRESH_HIVE'
p275
sa(dp276
g3
I01
sg8
I5
sg9
S'REG_RESOURCE_LIST'
p277
sa(dp278
g3
I01
sg8
I5
sg9
S'REG_RESOURCE_REQUIREMENTS_LIST'
p279
sa(dp280
g3
I01
sg8
I5
sg9
S'REG_SZ'
p281
sa(dp282
g3
I01
sg8
I5
sg9
S'REG_WHOLE_HIVE_VOLATILE'
p283
sa(dp284
g1
S'SaveKey(key, file_name) - Saves the specified key, and all its subkeys to the specified file.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nfile_name is the name of the file to save registry data to.\n This file cannot already exist. If this filename includes an extension,\n it cannot be used on file allocation table (FAT) file systems by the\n LoadKey(), ReplaceKey() or RestoreKey() methods.\n\nIf key represents a key on a remote computer, the path described by\nfile_name is relative to the remote computer.\nThe caller of this method must possess the SeBackupPrivilege security privilege.\nThis function passes NULL for security_attributes to the API.'
p285
sg3
I01
sg8
I2
sg9
S'SaveKey'
p286
sa(dp287
g1
S'SetValue(key, sub_key, type, value) - Associates a value with a specified key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nsub_key is a string that names the subkey with which the value is associated.\ntype is an integer that specifies the type of the data.  Currently this\n must be REG_SZ, meaning only strings are supported.\nvalue is a string that specifies the new value.\n\nIf the key specified by the sub_key parameter does not exist, the SetValue\nfunction creates it.\n\nValue lengths are limited by available memory. Long values (more than\n2048 bytes) should be stored as files with the filenames stored in \nthe configuration registry.  This helps the registry perform efficiently.\n\nThe key identified by the key parameter must have been opened with\nKEY_SET_VALUE access.'
p288
sg3
I01
sg8
I2
sg9
S'SetValue'
p289
sa(dp290
g1
S'SetValueEx(key, value_name, reserved, type, value) - Stores data in the value field of an open registry key.\n\nkey is an already open key, or any one of the predefined HKEY_* constants.\nvalue_name is a string containing the name of the value to set, or None\ntype is an integer that specifies the type of the data.  This should be one of:\n  REG_BINARY -- Binary data in any form.\n  REG_DWORD -- A 32-bit number.\n  REG_DWORD_LITTLE_ENDIAN -- A 32-bit number in little-endian format.\n  REG_DWORD_BIG_ENDIAN -- A 32-bit number in big-endian format.\n  REG_EXPAND_SZ -- A null-terminated string that contains unexpanded references\n                   to environment variables (for example, %PATH%).\n  REG_LINK -- A Unicode symbolic link.\n  REG_MULTI_SZ -- An sequence of null-terminated strings, terminated by\n                  two null characters.  Note that Python handles this\n                  termination automatically.\n  REG_NONE -- No defined value type.\n  REG_RESOURCE_LIST -- A device-driver resource list.\n  REG_SZ -- A null-terminated string.\nreserved can be anything - zero is always passed to the API.\nvalue is a string that specifies the new value.\n\nThis method can also set additional value and type information for the\nspecified key.  The key identified by the key parameter must have been\nopened with KEY_SET_VALUE access.\n\nTo open the key, use the CreateKeyEx() or OpenKeyEx() methods.\n\nValue lengths are limited by available memory. Long values (more than\n2048 bytes) should be stored as files with the filenames stored in \nthe configuration registry.  This helps the registry perform efficiently.'
p291
sg3
I01
sg8
I2
sg9
S'SetValueEx'
p292
sa(dp293
g3
I01
sg8
I5
sg9
g71
sa(dp294
g3
I01
sg8
I5
sg9
S'__name__'
p295
sa(dp296
g3
I01
sg8
I5
sg9
S'__package__'
p297
sa(dp298
g1
S'MS-Windows OS system call failed.'
p299
sg3
I01
sg4
(lp300
(dp301
g3
I01
sg8
I5
sg9
g65
sa(dp302
g3
I01
sg8
I5
sg9
S'__dict__'
p303
sa(dp304
g3
I01
sg8
I5
sg9
g71
sa(dp305
g1
S'default object formatter'
p306
sg3
I01
sg8
I2
sg9
g80
sa(dp307
g3
I01
sg8
I5
sg9
g82
sa(dp308
g3
I01
sg8
I5
sg9
S'__getitem__'
p309
sa(dp310
g3
I01
sg8
I5
sg9
S'__getslice__'
p311
sa(dp312
g3
I01
sg8
I5
sg9
g84
sa(dp313
g3
I01
sg8
I5
sg9
g88
sa(dp314
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p315
sg3
I01
sg8
I2
sg9
g105
sa(dp316
g1
Nsg3
I01
sg8
I2
sg9
g126
sa(dp317
g1
S'helper for pickle'
p318
sg3
I01
sg8
I2
sg9
g129
sa(dp319
g3
I01
sg8
I5
sg9
g131
sa(dp320
g3
I01
sg8
I5
sg9
g151
sa(dp321
g1
Nsg3
I01
sg8
I2
sg9
S'__setstate__'
p322
sa(dp323
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p324
sg3
I01
sg8
I2
sg9
g154
sa(dp325
g3
I01
sg8
I5
sg9
g156
sa(dp326
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p327
sg3
I01
sg8
I2
sg9
g161
sa(dp328
g1
Nsg3
I01
sg8
I2
sg9
S'__unicode__'
p329
sa(dp330
g3
I01
sg8
I5
sg9
S'args'
p331
sa(dp332
g3
I01
sg8
I5
sg9
S'errno'
p333
sa(dp334
g3
I01
sg8
I5
sg9
S'filename'
p335
sa(dp336
g3
I01
sg8
I5
sg9
S'message'
p337
sa(dp338
g3
I01
sg8
I5
sg9
S'strerror'
p339
sa(dp340
g3
I01
sg8
I5
sg9
S'winerror'
p341
sasg8
I3
sg9
S'error'
p342
sasg8
I1
sg9
S'_winreg'
p343
s.