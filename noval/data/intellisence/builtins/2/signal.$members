(dp0
S'doc'
p1
S'This module provides mechanisms to use signal handlers in Python.\n\nFunctions:\n\nalarm() -- cause SIGALRM after a specified time [Unix only]\nsetitimer() -- cause a signal (described below) after a specified\n               float time and the timer may restart then [Unix only]\ngetitimer() -- get current value of timer [Unix only]\nsignal() -- set the action for a given signal\ngetsignal() -- get the signal action for a given signal\npause() -- wait until a signal arrives [Unix only]\ndefault_int_handler() -- default SIGINT handler\n\nsignal constants:\nSIG_DFL -- used to refer to the system default handler\nSIG_IGN -- used to ignore the signal\nNSIG -- number of defined signals\nSIGINT, SIGTERM, etc. -- signal numbers\n\nitimer constants:\nITIMER_REAL -- decrements in real time, and delivers SIGALRM upon\n               expiration\nITIMER_VIRTUAL -- decrements only when the process is executing,\n               and delivers SIGVTALRM upon expiration\nITIMER_PROF -- decrements both when the process is executing and\n               when the system is executing on behalf of the process.\n               Coupled with ITIMER_VIRTUAL, this timer is usually\n               used to profile the time spent by the application\n               in user and kernel space. SIGPROF is delivered upon\n               expiration.\n\n\n*** IMPORTANT NOTICE ***\nA signal handler function is called with two arguments:\nthe first is the signal number, the second is the interrupted stack frame.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'CTRL_BREAK_EVENT'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'CTRL_C_EVENT'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'NSIG'
p13
sa(dp14
g3
I01
sg7
I5
sg8
S'SIGABRT'
p15
sa(dp16
g3
I01
sg7
I5
sg8
S'SIGBREAK'
p17
sa(dp18
g3
I01
sg7
I5
sg8
S'SIGFPE'
p19
sa(dp20
g3
I01
sg7
I5
sg8
S'SIGILL'
p21
sa(dp22
g3
I01
sg7
I5
sg8
S'SIGINT'
p23
sa(dp24
g3
I01
sg7
I5
sg8
S'SIGSEGV'
p25
sa(dp26
g3
I01
sg7
I5
sg8
S'SIGTERM'
p27
sa(dp28
g3
I01
sg7
I5
sg8
S'SIG_DFL'
p29
sa(dp30
g3
I01
sg7
I5
sg8
S'SIG_IGN'
p31
sa(dp32
g3
I01
sg7
I5
sg8
S'__doc__'
p33
sa(dp34
g3
I01
sg7
I5
sg8
S'__name__'
p35
sa(dp36
g3
I01
sg7
I5
sg8
S'__package__'
p37
sa(dp38
g1
S'default_int_handler(...)\n\nThe default handler for SIGINT installed by Python.\nIt raises KeyboardInterrupt.'
p39
sg3
I01
sg7
I2
sg8
S'default_int_handler'
p40
sa(dp41
g1
S'getsignal(sig) -> action\n\nReturn the current action for the given signal.  The return value can be:\nSIG_IGN -- if the signal is being ignored\nSIG_DFL -- if the default action for the signal is in effect\nNone -- if an unknown handler is in effect\nanything else -- the callable Python object used as a handler'
p42
sg3
I01
sg7
I2
sg8
S'getsignal'
p43
sa(dp44
g1
S"set_wakeup_fd(fd) -> fd\n\nSets the fd to be written to (with '\\0') when a signal\ncomes in.  A library can use this to wakeup select or poll.\nThe previous fd is returned.\n\nThe fd must be non-blocking."
p45
sg3
I01
sg7
I2
sg8
S'set_wakeup_fd'
p46
sa(dp47
g1
S'signal(sig, action) -> action\n\nSet the action for the given signal.  The action can be SIG_DFL,\nSIG_IGN, or a callable Python object.  The previous action is\nreturned.  See getsignal() for possible return values.\n\n*** IMPORTANT NOTICE ***\nA signal handler function is called with two arguments:\nthe first is the signal number, the second is the interrupted stack frame.'
p48
sg3
I01
sg7
I2
sg8
S'signal'
p49
sasg7
I1
sg8
S'signal'
p50
s.