(dp0
S'doc'
p1
S'This module provides access to operating system functionality that is\nstandardized by the C Standard and the POSIX standard (a thinly\ndisguised Unix interface).  Refer to the library manual and\ncorresponding Unix manual entries for more information on calls.'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'F_OK'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'O_APPEND'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'O_BINARY'
p13
sa(dp14
g3
I01
sg7
I5
sg8
S'O_CREAT'
p15
sa(dp16
g3
I01
sg7
I5
sg8
S'O_EXCL'
p17
sa(dp18
g3
I01
sg7
I5
sg8
S'O_NOINHERIT'
p19
sa(dp20
g3
I01
sg7
I5
sg8
S'O_RANDOM'
p21
sa(dp22
g3
I01
sg7
I5
sg8
S'O_RDONLY'
p23
sa(dp24
g3
I01
sg7
I5
sg8
S'O_RDWR'
p25
sa(dp26
g3
I01
sg7
I5
sg8
S'O_SEQUENTIAL'
p27
sa(dp28
g3
I01
sg7
I5
sg8
S'O_SHORT_LIVED'
p29
sa(dp30
g3
I01
sg7
I5
sg8
S'O_TEMPORARY'
p31
sa(dp32
g3
I01
sg7
I5
sg8
S'O_TEXT'
p33
sa(dp34
g3
I01
sg7
I5
sg8
S'O_TRUNC'
p35
sa(dp36
g3
I01
sg7
I5
sg8
S'O_WRONLY'
p37
sa(dp38
g3
I01
sg7
I5
sg8
S'P_DETACH'
p39
sa(dp40
g3
I01
sg7
I5
sg8
S'P_NOWAIT'
p41
sa(dp42
g3
I01
sg7
I5
sg8
S'P_NOWAITO'
p43
sa(dp44
g3
I01
sg7
I5
sg8
S'P_OVERLAY'
p45
sa(dp46
g3
I01
sg7
I5
sg8
S'P_WAIT'
p47
sa(dp48
g3
I01
sg7
I5
sg8
S'R_OK'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'TMP_MAX'
p51
sa(dp52
g3
I01
sg7
I5
sg8
S'W_OK'
p53
sa(dp54
g3
I01
sg7
I5
sg8
S'X_OK'
p55
sa(dp56
g3
I01
sg7
I5
sg8
S'__doc__'
p57
sa(dp58
g3
I01
sg7
I5
sg8
S'__name__'
p59
sa(dp60
g3
I01
sg7
I5
sg8
S'__package__'
p61
sa(dp62
g1
S'_exit(status)\n\nExit to the system with specified status, without normal exit processing.'
p63
sg3
I01
sg7
I2
sg8
S'_exit'
p64
sa(dp65
g1
Nsg3
I01
sg7
I2
sg8
S'_getfullpathname'
p66
sa(dp67
g1
S'Return true if the pathname refers to an existing directory.'
p68
sg3
I01
sg7
I2
sg8
S'_isdir'
p69
sa(dp70
g1
S"abort() -> does not return!\n\nAbort the interpreter immediately.  This 'dumps core' or otherwise fails\nin the hardest way possible on the hosting operating system."
p71
sg3
I01
sg7
I2
sg8
S'abort'
p72
sa(dp73
g1
S'access(path, mode) -> True if granted, False otherwise\n\nUse the real uid/gid to test for access to a path.  Note that most\noperations will use the effective uid/gid, therefore this routine can\nbe used in a suid/sgid environment to test if the invoking user has the\nspecified access to the path.  The mode argument can be F_OK to test\nexistence, or the inclusive-OR of R_OK, W_OK, and X_OK.'
p74
sg3
I01
sg7
I2
sg8
S'access'
p75
sa(dp76
g1
S'chdir(path)\n\nChange the current working directory to the specified path.'
p77
sg3
I01
sg7
I2
sg8
S'chdir'
p78
sa(dp79
g1
S'chmod(path, mode)\n\nChange the access permissions of a file.'
p80
sg3
I01
sg7
I2
sg8
S'chmod'
p81
sa(dp82
g1
S'close(fd)\n\nClose a file descriptor (for low level IO).'
p83
sg3
I01
sg7
I2
sg8
S'close'
p84
sa(dp85
g1
S'closerange(fd_low, fd_high)\n\nCloses all file descriptors in [fd_low, fd_high), ignoring errors.'
p86
sg3
I01
sg7
I2
sg8
S'closerange'
p87
sa(dp88
g1
S'dup(fd) -> fd2\n\nReturn a duplicate of a file descriptor.'
p89
sg3
I01
sg7
I2
sg8
S'dup'
p90
sa(dp91
g1
S'dup2(old_fd, new_fd)\n\nDuplicate file descriptor.'
p92
sg3
I01
sg7
I2
sg8
S'dup2'
p93
sa(dp94
g3
I01
sg7
I5
sg8
S'environ'
p95
sa(dp96
g1
S'OS system call failed.'
p97
sg3
I01
sg4
(lp98
(dp99
g3
I01
sg7
I5
sg8
S'__delattr__'
p100
sa(dp101
g3
I01
sg7
I5
sg8
S'__dict__'
p102
sa(dp103
g3
I01
sg7
I5
sg8
g57
sa(dp104
g1
S'default object formatter'
p105
sg3
I01
sg7
I2
sg8
S'__format__'
p106
sa(dp107
g3
I01
sg7
I5
sg8
S'__getattribute__'
p108
sa(dp109
g3
I01
sg7
I5
sg8
S'__getitem__'
p110
sa(dp111
g3
I01
sg7
I5
sg8
S'__getslice__'
p112
sa(dp113
g3
I01
sg7
I5
sg8
S'__hash__'
p114
sa(dp115
g3
I01
sg7
I5
sg8
S'__init__'
p116
sa(dp117
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p118
sg3
I01
sg7
I2
sg8
S'__new__'
p119
sa(dp120
g1
Nsg3
I01
sg7
I2
sg8
S'__reduce__'
p121
sa(dp122
g1
S'helper for pickle'
p123
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p124
sa(dp125
g3
I01
sg7
I5
sg8
S'__repr__'
p126
sa(dp127
g3
I01
sg7
I5
sg8
S'__setattr__'
p128
sa(dp129
g1
Nsg3
I01
sg7
I2
sg8
S'__setstate__'
p130
sa(dp131
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p132
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p133
sa(dp134
g3
I01
sg7
I5
sg8
S'__str__'
p135
sa(dp136
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p137
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p138
sa(dp139
g1
Nsg3
I01
sg7
I2
sg8
S'__unicode__'
p140
sa(dp141
g3
I01
sg7
I5
sg8
S'args'
p142
sa(dp143
g3
I01
sg7
I5
sg8
S'errno'
p144
sa(dp145
g3
I01
sg7
I5
sg8
S'filename'
p146
sa(dp147
g3
I01
sg7
I5
sg8
S'message'
p148
sa(dp149
g3
I01
sg7
I5
sg8
S'strerror'
p150
sasg7
I3
sg8
S'error'
p151
sa(dp152
g1
S'execv(path, args)\n\nExecute an executable path with arguments, replacing current process.\n\n    path: path of executable file\n    args: tuple or list of strings'
p153
sg3
I01
sg7
I2
sg8
S'execv'
p154
sa(dp155
g1
S'execve(path, args, env)\n\nExecute a path with arguments and environment, replacing current process.\n\n    path: path of executable file\n    args: tuple or list of arguments\n    env: dictionary of strings mapping to strings'
p156
sg3
I01
sg7
I2
sg8
S'execve'
p157
sa(dp158
g1
S"fdopen(fd [, mode='r' [, bufsize]]) -> file_object\n\nReturn an open file object connected to a file descriptor."
p159
sg3
I01
sg7
I2
sg8
S'fdopen'
p160
sa(dp161
g1
S'fstat(fd) -> stat result\n\nLike stat(), but for an open file descriptor.'
p162
sg3
I01
sg7
I2
sg8
S'fstat'
p163
sa(dp164
g1
S'fsync(fildes)\n\nforce write of file with filedescriptor to disk.'
p165
sg3
I01
sg7
I2
sg8
S'fsync'
p166
sa(dp167
g1
S'getcwd() -> path\n\nReturn a string representing the current working directory.'
p168
sg3
I01
sg7
I2
sg8
S'getcwd'
p169
sa(dp170
g1
S'getcwdu() -> path\n\nReturn a unicode string representing the current working directory.'
p171
sg3
I01
sg7
I2
sg8
S'getcwdu'
p172
sa(dp173
g1
S'getpid() -> pid\n\nReturn the current process id'
p174
sg3
I01
sg7
I2
sg8
S'getpid'
p175
sa(dp176
g1
S"isatty(fd) -> bool\n\nReturn True if the file descriptor 'fd' is an open file descriptor\nconnected to the slave end of a terminal."
p177
sg3
I01
sg7
I2
sg8
S'isatty'
p178
sa(dp179
g1
S'kill(pid, sig)\n\nKill a process with a signal.'
p180
sg3
I01
sg7
I2
sg8
S'kill'
p181
sa(dp182
g1
S"listdir(path) -> list_of_strings\n\nReturn a list containing the names of the entries in the directory.\n\n    path: path of directory to list\n\nThe list is in arbitrary order.  It does not include the special\nentries '.' and '..' even if they are present in the directory."
p183
sg3
I01
sg7
I2
sg8
S'listdir'
p184
sa(dp185
g1
S'lseek(fd, pos, how) -> newpos\n\nSet the current position of a file descriptor.\nReturn the new cursor position in bytes, starting from the beginning.'
p186
sg3
I01
sg7
I2
sg8
S'lseek'
p187
sa(dp188
g1
S'lstat(path) -> stat result\n\nLike stat(path), but do not follow symbolic links.'
p189
sg3
I01
sg7
I2
sg8
S'lstat'
p190
sa(dp191
g1
S'mkdir(path [, mode=0777])\n\nCreate a directory.'
p192
sg3
I01
sg7
I2
sg8
S'mkdir'
p193
sa(dp194
g1
S'open(filename, flag [, mode=0777]) -> fd\n\nOpen a file (for low level IO).'
p195
sg3
I01
sg7
I2
sg8
S'open'
p196
sa(dp197
g1
S'pipe() -> (read_end, write_end)\n\nCreate a pipe.'
p198
sg3
I01
sg7
I2
sg8
S'pipe'
p199
sa(dp200
g1
S"popen(command [, mode='r' [, bufsize]]) -> pipe\n\nOpen a pipe to/from a command returning a file object."
p201
sg3
I01
sg7
I2
sg8
S'popen'
p202
sa(dp203
g1
Nsg3
I01
sg7
I2
sg8
S'popen2'
p204
sa(dp205
g1
Nsg3
I01
sg7
I2
sg8
S'popen3'
p206
sa(dp207
g1
Nsg3
I01
sg7
I2
sg8
S'popen4'
p208
sa(dp209
g1
S'putenv(key, value)\n\nChange or add an environment variable.'
p210
sg3
I01
sg7
I2
sg8
S'putenv'
p211
sa(dp212
g1
S'read(fd, buffersize) -> string\n\nRead a file descriptor.'
p213
sg3
I01
sg7
I2
sg8
S'read'
p214
sa(dp215
g1
S'remove(path)\n\nRemove a file (same as unlink(path)).'
p216
sg3
I01
sg7
I2
sg8
S'remove'
p217
sa(dp218
g1
S'rename(old, new)\n\nRename a file or directory.'
p219
sg3
I01
sg7
I2
sg8
S'rename'
p220
sa(dp221
g1
S'rmdir(path)\n\nRemove a directory.'
p222
sg3
I01
sg7
I2
sg8
S'rmdir'
p223
sa(dp224
g1
S"spawnv(mode, path, args)\n\nExecute the program 'path' in a new process.\n\n    mode: mode of process creation\n    path: path of executable file\n    args: tuple or list of strings"
p225
sg3
I01
sg7
I2
sg8
S'spawnv'
p226
sa(dp227
g1
S"spawnve(mode, path, args, env)\n\nExecute the program 'path' in a new process.\n\n    mode: mode of process creation\n    path: path of executable file\n    args: tuple or list of arguments\n    env: dictionary of strings mapping to strings"
p228
sg3
I01
sg7
I2
sg8
S'spawnve'
p229
sa(dp230
g1
S'startfile(filepath [, operation]) - Start a file with its associated\napplication.\n\nWhen "operation" is not specified or "open", this acts like\ndouble-clicking the file in Explorer, or giving the file name as an\nargument to the DOS "start" command: the file is opened with whatever\napplication (if any) its extension is associated.\nWhen another "operation" is given, it specifies what should be done with\nthe file.  A typical operation is "print".\n\nstartfile returns as soon as the associated application is launched.\nThere is no option to wait for the application to close, and no way\nto retrieve the application\'s exit status.\n\nThe filepath is relative to the current directory.  If you want to use\nan absolute path, make sure the first character is not a slash ("/");\nthe underlying Win32 ShellExecute function doesn\'t work if it is.'
p231
sg3
I01
sg7
I2
sg8
S'startfile'
p232
sa(dp233
g1
S'stat(path) -> stat result\n\nPerform a stat system call on the given path.'
p234
sg3
I01
sg7
I2
sg8
S'stat'
p235
sa(dp236
g1
S'stat_float_times([newval]) -> oldval\n\nDetermine whether os.[lf]stat represents time stamps as float objects.\nIf newval is True, future calls to stat() return floats, if it is False,\nfuture calls return ints. \nIf newval is omitted, return the current setting.\n'
p237
sg3
I01
sg7
I2
sg8
S'stat_float_times'
p238
sa(dp239
g1
S'stat_result: Result from stat or lstat.\n\nThis object may be accessed either as a tuple of\n  (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime)\nor via the attributes st_mode, st_ino, st_dev, st_nlink, st_uid, and so on.\n\nPosix/windows: If your platform supports st_blksize, st_blocks, st_rdev,\nor st_flags, they are available as attributes only.\n\nSee os.stat for more information.'
p240
sg3
I01
sg4
(lp241
(dp242
g3
I01
sg7
I5
sg8
S'__add__'
p243
sa(dp244
g3
I01
sg7
I5
sg8
S'__contains__'
p245
sa(dp246
g3
I01
sg7
I5
sg8
g100
sa(dp247
g3
I01
sg7
I5
sg8
g57
sa(dp248
g3
I01
sg7
I5
sg8
S'__eq__'
p249
sa(dp250
g1
S'default object formatter'
p251
sg3
I01
sg7
I2
sg8
g106
sa(dp252
g3
I01
sg7
I5
sg8
S'__ge__'
p253
sa(dp254
g3
I01
sg7
I5
sg8
g108
sa(dp255
g3
I01
sg7
I5
sg8
g110
sa(dp256
g3
I01
sg7
I5
sg8
g112
sa(dp257
g3
I01
sg7
I5
sg8
S'__gt__'
p258
sa(dp259
g3
I01
sg7
I5
sg8
g114
sa(dp260
g3
I01
sg7
I5
sg8
g116
sa(dp261
g3
I01
sg7
I5
sg8
S'__le__'
p262
sa(dp263
g3
I01
sg7
I5
sg8
S'__len__'
p264
sa(dp265
g3
I01
sg7
I5
sg8
S'__lt__'
p266
sa(dp267
g3
I01
sg7
I5
sg8
S'__mul__'
p268
sa(dp269
g3
I01
sg7
I5
sg8
S'__ne__'
p270
sa(dp271
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p272
sg3
I01
sg7
I2
sg8
g119
sa(dp273
g1
Nsg3
I01
sg7
I2
sg8
g121
sa(dp274
g1
S'helper for pickle'
p275
sg3
I01
sg7
I2
sg8
g124
sa(dp276
g3
I01
sg7
I5
sg8
g126
sa(dp277
g3
I01
sg7
I5
sg8
S'__rmul__'
p278
sa(dp279
g3
I01
sg7
I5
sg8
g128
sa(dp280
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p281
sg3
I01
sg7
I2
sg8
g133
sa(dp282
g3
I01
sg7
I5
sg8
g135
sa(dp283
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p284
sg3
I01
sg7
I2
sg8
g138
sa(dp285
g3
I01
sg7
I5
sg8
S'n_fields'
p286
sa(dp287
g3
I01
sg7
I5
sg8
S'n_sequence_fields'
p288
sa(dp289
g3
I01
sg7
I5
sg8
S'n_unnamed_fields'
p290
sa(dp291
g3
I01
sg7
I5
sg8
S'st_atime'
p292
sa(dp293
g3
I01
sg7
I5
sg8
S'st_ctime'
p294
sa(dp295
g3
I01
sg7
I5
sg8
S'st_dev'
p296
sa(dp297
g3
I01
sg7
I5
sg8
S'st_gid'
p298
sa(dp299
g3
I01
sg7
I5
sg8
S'st_ino'
p300
sa(dp301
g3
I01
sg7
I5
sg8
S'st_mode'
p302
sa(dp303
g3
I01
sg7
I5
sg8
S'st_mtime'
p304
sa(dp305
g3
I01
sg7
I5
sg8
S'st_nlink'
p306
sa(dp307
g3
I01
sg7
I5
sg8
S'st_size'
p308
sa(dp309
g3
I01
sg7
I5
sg8
S'st_uid'
p310
sasg7
I3
sg8
S'stat_result'
p311
sa(dp312
g1
S'statvfs_result: Result from statvfs or fstatvfs.\n\nThis object may be accessed either as a tuple of\n  (bsize, frsize, blocks, bfree, bavail, files, ffree, favail, flag, namemax),\nor via the attributes f_bsize, f_frsize, f_blocks, f_bfree, and so on.\n\nSee os.statvfs for more information.'
p313
sg3
I01
sg4
(lp314
(dp315
g3
I01
sg7
I5
sg8
g243
sa(dp316
g3
I01
sg7
I5
sg8
g245
sa(dp317
g3
I01
sg7
I5
sg8
g100
sa(dp318
g3
I01
sg7
I5
sg8
g57
sa(dp319
g3
I01
sg7
I5
sg8
g249
sa(dp320
g1
S'default object formatter'
p321
sg3
I01
sg7
I2
sg8
g106
sa(dp322
g3
I01
sg7
I5
sg8
g253
sa(dp323
g3
I01
sg7
I5
sg8
g108
sa(dp324
g3
I01
sg7
I5
sg8
g110
sa(dp325
g3
I01
sg7
I5
sg8
g112
sa(dp326
g3
I01
sg7
I5
sg8
g258
sa(dp327
g3
I01
sg7
I5
sg8
g114
sa(dp328
g3
I01
sg7
I5
sg8
g116
sa(dp329
g3
I01
sg7
I5
sg8
g262
sa(dp330
g3
I01
sg7
I5
sg8
g264
sa(dp331
g3
I01
sg7
I5
sg8
g266
sa(dp332
g3
I01
sg7
I5
sg8
g268
sa(dp333
g3
I01
sg7
I5
sg8
g270
sa(dp334
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p335
sg3
I01
sg7
I2
sg8
g119
sa(dp336
g1
Nsg3
I01
sg7
I2
sg8
g121
sa(dp337
g1
S'helper for pickle'
p338
sg3
I01
sg7
I2
sg8
g124
sa(dp339
g3
I01
sg7
I5
sg8
g126
sa(dp340
g3
I01
sg7
I5
sg8
g278
sa(dp341
g3
I01
sg7
I5
sg8
g128
sa(dp342
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p343
sg3
I01
sg7
I2
sg8
g133
sa(dp344
g3
I01
sg7
I5
sg8
g135
sa(dp345
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p346
sg3
I01
sg7
I2
sg8
g138
sa(dp347
g3
I01
sg7
I5
sg8
S'f_bavail'
p348
sa(dp349
g3
I01
sg7
I5
sg8
S'f_bfree'
p350
sa(dp351
g3
I01
sg7
I5
sg8
S'f_blocks'
p352
sa(dp353
g3
I01
sg7
I5
sg8
S'f_bsize'
p354
sa(dp355
g3
I01
sg7
I5
sg8
S'f_favail'
p356
sa(dp357
g3
I01
sg7
I5
sg8
S'f_ffree'
p358
sa(dp359
g3
I01
sg7
I5
sg8
S'f_files'
p360
sa(dp361
g3
I01
sg7
I5
sg8
S'f_flag'
p362
sa(dp363
g3
I01
sg7
I5
sg8
S'f_frsize'
p364
sa(dp365
g3
I01
sg7
I5
sg8
S'f_namemax'
p366
sa(dp367
g3
I01
sg7
I5
sg8
g286
sa(dp368
g3
I01
sg7
I5
sg8
g288
sa(dp369
g3
I01
sg7
I5
sg8
g290
sasg7
I3
sg8
S'statvfs_result'
p370
sa(dp371
g1
S'strerror(code) -> string\n\nTranslate an error code to a message string.'
p372
sg3
I01
sg7
I2
sg8
g150
sa(dp373
g1
S'system(command) -> exit_status\n\nExecute the command (a string) in a subshell.'
p374
sg3
I01
sg7
I2
sg8
S'system'
p375
sa(dp376
g1
S'tempnam([dir[, prefix]]) -> string\n\nReturn a unique name for a temporary file.\nThe directory and a prefix may be specified as strings; they may be omitted\nor None if not needed.'
p377
sg3
I01
sg7
I2
sg8
S'tempnam'
p378
sa(dp379
g1
S'times() -> (utime, stime, cutime, cstime, elapsed_time)\n\nReturn a tuple of floating point numbers indicating process times.'
p380
sg3
I01
sg7
I2
sg8
S'times'
p381
sa(dp382
g1
S'tmpfile() -> file object\n\nCreate a temporary file with no directory entries.'
p383
sg3
I01
sg7
I2
sg8
S'tmpfile'
p384
sa(dp385
g1
S'tmpnam() -> string\n\nReturn a unique name for a temporary file.'
p386
sg3
I01
sg7
I2
sg8
S'tmpnam'
p387
sa(dp388
g1
S'umask(new_mask) -> old_mask\n\nSet the current numeric umask and return the previous umask.'
p389
sg3
I01
sg7
I2
sg8
S'umask'
p390
sa(dp391
g1
S'unlink(path)\n\nRemove a file (same as remove(path)).'
p392
sg3
I01
sg7
I2
sg8
S'unlink'
p393
sa(dp394
g1
S'urandom(n) -> str\n\nReturn n random bytes suitable for cryptographic use.'
p395
sg3
I01
sg7
I2
sg8
S'urandom'
p396
sa(dp397
g1
S'utime(path, (atime, mtime))\nutime(path, None)\n\nSet the access and modified time of the file to the given values.  If the\nsecond form is used, set the access and modified times to the current time.'
p398
sg3
I01
sg7
I2
sg8
S'utime'
p399
sa(dp400
g1
S'waitpid(pid, options) -> (pid, status << 8)\n\nWait for completion of a given process.  options is ignored on Windows.'
p401
sg3
I01
sg7
I2
sg8
S'waitpid'
p402
sa(dp403
g1
S'write(fd, string) -> byteswritten\n\nWrite a string to a file descriptor.'
p404
sg3
I01
sg7
I2
sg8
S'write'
p405
sasg7
I1
sg8
S'nt'
p406
s.