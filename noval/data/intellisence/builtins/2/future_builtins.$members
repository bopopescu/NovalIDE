(dp0
S'doc'
p1
S"This module provides functions that will be builtins in Python 3.0,\nbut that conflict with builtins that already exist in Python 2.x.\n\nFunctions:\n\nascii(arg) -- Returns the canonical string representation of an object.\nfilter(pred, iterable) -- Returns an iterator yielding those items of \n       iterable for which pred(item) is true.\nhex(arg) -- Returns the hexadecimal representation of an integer.\nmap(func, *iterables) -- Returns an iterator that computes the function \n    using arguments from each of the iterables.\noct(arg) -- Returns the octal representation of an integer.\nzip(iter1 [,iter2 [...]]) -- Returns a zip object whose .next() method \n    returns a tuple where the i-th element comes from the i-th iterable \n    argument.\n\nThe typical usage of this module is to replace existing builtins in a\nmodule's namespace:\n \nfrom future_builtins import ascii, filter, map, hex, oct, zip\n"
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'ascii(object) -> string\n\nReturn the same as repr().  In Python 3.x, the repr() result will\ncontain printable characters unescaped, while the ascii() result\nwill have such characters backslash-escaped.'
p15
sg3
I01
sg7
I2
sg8
S'ascii'
p16
sa(dp17
g1
S'ifilter(function or None, sequence) --> ifilter object\n\nReturn those items of sequence for which function(item) is true.\nIf function is None, return the items that are true.'
p18
sg3
I01
sg4
(lp19
(dp20
g3
I01
sg7
I5
sg8
S'__delattr__'
p21
sa(dp22
g3
I01
sg7
I5
sg8
g9
sa(dp23
g1
S'default object formatter'
p24
sg3
I01
sg7
I2
sg8
S'__format__'
p25
sa(dp26
g3
I01
sg7
I5
sg8
S'__getattribute__'
p27
sa(dp28
g3
I01
sg7
I5
sg8
S'__hash__'
p29
sa(dp30
g3
I01
sg7
I5
sg8
S'__init__'
p31
sa(dp32
g3
I01
sg7
I5
sg8
S'__iter__'
p33
sa(dp34
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p35
sg3
I01
sg7
I2
sg8
S'__new__'
p36
sa(dp37
g1
S'helper for pickle'
p38
sg3
I01
sg7
I2
sg8
S'__reduce__'
p39
sa(dp40
g1
S'helper for pickle'
p41
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p42
sa(dp43
g3
I01
sg7
I5
sg8
S'__repr__'
p44
sa(dp45
g3
I01
sg7
I5
sg8
S'__setattr__'
p46
sa(dp47
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p48
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'__str__'
p51
sa(dp52
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p53
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p54
sa(dp55
g3
I01
sg7
I5
sg8
S'next'
p56
sasg7
I3
sg8
S'filter'
p57
sa(dp58
g1
S'hex(number) -> string\n\nReturn the hexadecimal representation of an integer or long integer.'
p59
sg3
I01
sg7
I2
sg8
S'hex'
p60
sa(dp61
g1
S'imap(func, *iterables) --> imap object\n\nMake an iterator that computes the function using arguments from\neach of the iterables.  Like map() except that it returns\nan iterator instead of a list and that it stops when the shortest\niterable is exhausted instead of filling in None for shorter\niterables.'
p62
sg3
I01
sg4
(lp63
(dp64
g3
I01
sg7
I5
sg8
g21
sa(dp65
g3
I01
sg7
I5
sg8
g9
sa(dp66
g1
S'default object formatter'
p67
sg3
I01
sg7
I2
sg8
g25
sa(dp68
g3
I01
sg7
I5
sg8
g27
sa(dp69
g3
I01
sg7
I5
sg8
g29
sa(dp70
g3
I01
sg7
I5
sg8
g31
sa(dp71
g3
I01
sg7
I5
sg8
g33
sa(dp72
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p73
sg3
I01
sg7
I2
sg8
g36
sa(dp74
g1
S'helper for pickle'
p75
sg3
I01
sg7
I2
sg8
g39
sa(dp76
g1
S'helper for pickle'
p77
sg3
I01
sg7
I2
sg8
g42
sa(dp78
g3
I01
sg7
I5
sg8
g44
sa(dp79
g3
I01
sg7
I5
sg8
g46
sa(dp80
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p81
sg3
I01
sg7
I2
sg8
g49
sa(dp82
g3
I01
sg7
I5
sg8
g51
sa(dp83
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p84
sg3
I01
sg7
I2
sg8
g54
sa(dp85
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'map'
p86
sa(dp87
g1
S'oct(number) -> string\n\nReturn the octal representation of an integer or long integer.'
p88
sg3
I01
sg7
I2
sg8
S'oct'
p89
sa(dp90
g1
S'izip(iter1 [,iter2 [...]]) --> izip object\n\nReturn a izip object whose .next() method returns a tuple where\nthe i-th element comes from the i-th iterable argument.  The .next()\nmethod continues until the shortest iterable in the argument sequence\nis exhausted and then it raises StopIteration.  Works like the zip()\nfunction but consumes less memory by returning an iterator instead of\na list.'
p91
sg3
I01
sg4
(lp92
(dp93
g3
I01
sg7
I5
sg8
g21
sa(dp94
g3
I01
sg7
I5
sg8
g9
sa(dp95
g1
S'default object formatter'
p96
sg3
I01
sg7
I2
sg8
g25
sa(dp97
g3
I01
sg7
I5
sg8
g27
sa(dp98
g3
I01
sg7
I5
sg8
g29
sa(dp99
g3
I01
sg7
I5
sg8
g31
sa(dp100
g3
I01
sg7
I5
sg8
g33
sa(dp101
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p102
sg3
I01
sg7
I2
sg8
g36
sa(dp103
g1
S'helper for pickle'
p104
sg3
I01
sg7
I2
sg8
g39
sa(dp105
g1
S'helper for pickle'
p106
sg3
I01
sg7
I2
sg8
g42
sa(dp107
g3
I01
sg7
I5
sg8
g44
sa(dp108
g3
I01
sg7
I5
sg8
g46
sa(dp109
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p110
sg3
I01
sg7
I2
sg8
g49
sa(dp111
g3
I01
sg7
I5
sg8
g51
sa(dp112
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p113
sg3
I01
sg7
I2
sg8
g54
sa(dp114
g3
I01
sg7
I5
sg8
g56
sasg7
I3
sg8
S'zip'
p115
sasg7
I1
sg8
S'future_builtins'
p116
s.