(dp0
S'doc'
p1
S"This module provides access to some objects used or maintained by the\ninterpreter and to functions that interact strongly with the interpreter.\n\nDynamic objects:\n\nargv -- command line arguments; argv[0] is the script pathname if known\npath -- module search path; path[0] is the script directory, else ''\nmodules -- dictionary of loaded modules\n\ndisplayhook -- called to show results in an interactive session\nexcepthook -- called to handle any uncaught exception other than SystemExit\n  To customize printing in an interactive session or to install a custom\n  top-level exception handler, assign other functions to replace these.\n\nexitfunc -- if sys.exitfunc exists, this routine is called when Python exits\n  Assigning to sys.exitfunc is deprecated; use the atexit module instead.\n\nstdin -- standard input file object; used by raw_input() and input()\nstdout -- standard output file object; used by the print statement\nstderr -- standard error object; used for error messages\n  By assigning other file objects (or objects that behave like files)\n  to these, it is possible to redirect all of the interpreter's I/O.\n\nlast_type -- type of last uncaught exception\nlast_value -- value of last uncaught exception\nlast_traceback -- traceback of last uncaught exception\n  These three are only available in an interactive session after a\n  traceback has been printed.\n\nexc_type -- type of exception currently being handled\nexc_value -- value of exception currently being handled\nexc_traceback -- traceback of exception currently being handled\n  The function exc_info() should be used instead of these three,\n  because it is thread-safe.\n\nStatic objects:\n\nfloat_info -- a dict with information about the float inplementation.\nlong_info -- a struct sequence with information about the long implementation.\nmaxint -- the largest supported integer (the smallest is -maxint-1)\nmaxsize -- the largest supported length of containers.\nmaxunicode -- the largest supported character\nbuiltin_module_names -- tuple of module names built into this interpreter\nversion -- the version of this interpreter as a string\nversion_info -- version information as a named tuple\nhexversion -- version information encoded as a single integer\ncopyright -- copyright notice pertaining to this interpreter\nplatform -- platform identifier\nexecutable -- absolute path of the executable binary of the Python interpreter\nprefix -- prefix used to find the Python library\nexec_prefix -- prefix used to find the machine-specific Python library\nfloat_repr_style -- string indicating the style of repr() output for floats\ndllhandle -- [Windows only] integer handle of the Python DLL\nwinver -- [Windows only] version number of the Python DLL\n__stdin__ -- the original stdin; don't touch!\n__stdout__ -- the original stdout; don't touch!\n__stderr__ -- the original stderr; don't touch!\n__displayhook__ -- the original displayhook; don't touch!\n__excepthook__ -- the original excepthook; don't touch!\n\nFunctions:\n\ndisplayhook() -- print an object to the screen, and save it in __builtin__._\nexcepthook() -- print an exception and its traceback to sys.stderr\nexc_info() -- return thread-safe information about the current exception\nexc_clear() -- clear the exception state for the current thread\nexit() -- exit the interpreter by raising SystemExit\ngetdlopenflags() -- returns flags to be used for dlopen() calls\ngetprofile() -- get the global profiling function\ngetrefcount() -- return the reference count for an object (plus one :-)\ngetrecursionlimit() -- return the max recursion depth for the interpreter\ngetsizeof() -- return the size of an object in bytes\ngettrace() -- get the global debug tracing function\nsetcheckinterval() -- control how often the interpreter checks for events\nsetdlopenflags() -- set the flags to be used for dlopen() calls\nsetprofile() -- set the global profiling function\nsetrecursionlimit() -- set the max recursion depth for the interpreter\nsettrace() -- set the global debug tracing function\n"
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'displayhook(object) -> None\n\nPrint an object to sys.stdout and also save it in __builtin__._\n'
p7
sg3
I01
sS'type'
p8
I2
sS'name'
p9
S'__displayhook__'
p10
sa(dp11
g3
I01
sg8
I5
sg9
S'__doc__'
p12
sa(dp13
g3
I01
sg8
I5
sg9
S'__egginsert'
p14
sa(dp15
g1
S'excepthook(exctype, value, traceback) -> None\n\nHandle an exception by displaying it with a traceback on sys.stderr.\n'
p16
sg3
I01
sg8
I2
sg9
S'__excepthook__'
p17
sa(dp18
g3
I01
sg8
I5
sg9
S'__name__'
p19
sa(dp20
g3
I01
sg8
I5
sg9
S'__package__'
p21
sa(dp22
g3
I01
sg8
I5
sg9
S'__plen'
p23
sa(dp24
g3
I01
sg8
I5
sg9
S'__stderr__'
p25
sa(dp26
g3
I01
sg8
I5
sg9
S'__stdin__'
p27
sa(dp28
g3
I01
sg8
I5
sg9
S'__stdout__'
p29
sa(dp30
g1
S'_clear_type_cache() -> None\nClear the internal type lookup cache.'
p31
sg3
I01
sg8
I2
sg9
S'_clear_type_cache'
p32
sa(dp33
g1
S"_current_frames() -> dictionary\n\nReturn a dictionary mapping each current thread T's thread id to T's\ncurrent stack frame.\n\nThis function should be used for specialized purposes only."
p34
sg3
I01
sg8
I2
sg9
S'_current_frames'
p35
sa(dp36
g1
S'_getframe([depth]) -> frameobject\n\nReturn a frame object from the call stack.  If optional integer depth is\ngiven, return the frame object that many calls below the top of the stack.\nIf that is deeper than the call stack, ValueError is raised.  The default\nfor depth is zero, returning the frame at the top of the call stack.\n\nThis function should be used for internal and specialized\npurposes only.'
p37
sg3
I01
sg8
I2
sg9
S'_getframe'
p38
sa(dp39
g3
I01
sg8
I5
sg9
S'_mercurial'
p40
sa(dp41
g3
I01
sg8
I5
sg9
S'api_version'
p42
sa(dp43
g3
I01
sg8
I5
sg9
S'argv'
p44
sa(dp45
g3
I01
sg8
I5
sg9
S'builtin_module_names'
p46
sa(dp47
g3
I01
sg8
I5
sg9
S'byteorder'
p48
sa(dp49
g1
S'call_tracing(func, args) -> object\n\nCall func(*args), while tracing is enabled.  The tracing state is\nsaved, and restored afterwards.  This is intended to be called from\na debugger from a checkpoint, to recursively debug some other code.'
p50
sg3
I01
sg8
I2
sg9
S'call_tracing'
p51
sa(dp52
g1
S'callstats() -> tuple of integers\n\nReturn a tuple of function call statistics, if CALL_PROFILE was defined\nwhen Python was built.  Otherwise, return None.\n\nWhen enabled, this function returns detailed, implementation-specific\ndetails about the number of function calls executed. The return value is\na 11-tuple where the entries in the tuple are counts of:\n0. all function calls\n1. calls to PyFunction_Type objects\n2. PyFunction calls that do not create an argument tuple\n3. PyFunction calls that do not create an argument tuple\n   and bypass PyEval_EvalCodeEx()\n4. PyMethod calls\n5. PyMethod calls on bound methods\n6. PyType calls\n7. PyCFunction calls\n8. generator calls\n9. All other calls\n10. Number of stack pops performed by call_function()'
p53
sg3
I01
sg8
I2
sg9
S'callstats'
p54
sa(dp55
g3
I01
sg8
I5
sg9
S'copyright'
p56
sa(dp57
g1
S'displayhook(object) -> None\n\nPrint an object to sys.stdout and also save it in __builtin__._\n'
p58
sg3
I01
sg8
I2
sg9
S'displayhook'
p59
sa(dp60
g3
I01
sg8
I5
sg9
S'dllhandle'
p61
sa(dp62
g3
I01
sg8
I5
sg9
S'dont_write_bytecode'
p63
sa(dp64
g1
S'exc_clear() -> None\n\nClear global information on the current exception.  Subsequent calls to\nexc_info() will return (None,None,None) until another exception is raised\nin the current thread or the execution stack returns to a frame where\nanother exception is being handled.'
p65
sg3
I01
sg8
I2
sg9
S'exc_clear'
p66
sa(dp67
g1
S'exc_info() -> (type, value, traceback)\n\nReturn information about the most recent exception caught by an except\nclause in the current stack frame or in an older stack frame.'
p68
sg3
I01
sg8
I2
sg9
S'exc_info'
p69
sa(dp70
g3
I01
sg8
I5
sg9
S'exc_type'
p71
sa(dp72
g1
S'excepthook(exctype, value, traceback) -> None\n\nHandle an exception by displaying it with a traceback on sys.stderr.\n'
p73
sg3
I01
sg8
I2
sg9
S'excepthook'
p74
sa(dp75
g3
I01
sg8
I5
sg9
S'exec_prefix'
p76
sa(dp77
g3
I01
sg8
I5
sg9
S'executable'
p78
sa(dp79
g1
S'exit([status])\n\nExit the interpreter by raising SystemExit(status).\nIf the status is omitted or None, it defaults to zero (i.e., success).\nIf the status is an integer, it will be used as the system exit status.\nIf it is another kind of object, it will be printed and the system\nexit status will be one (i.e., failure).'
p80
sg3
I01
sg8
I2
sg9
S'exit'
p81
sa(dp82
g3
I01
sg8
I5
sg9
S'exitfunc'
p83
sa(dp84
g3
I01
sg8
I5
sg9
S'flags'
p85
sa(dp86
g3
I01
sg8
I5
sg9
S'float_info'
p87
sa(dp88
g3
I01
sg8
I5
sg9
S'float_repr_style'
p89
sa(dp90
g1
S'getcheckinterval() -> current check interval; see setcheckinterval().'
p91
sg3
I01
sg8
I2
sg9
S'getcheckinterval'
p92
sa(dp93
g1
S'getdefaultencoding() -> string\n\nReturn the current default string encoding used by the Unicode \nimplementation.'
p94
sg3
I01
sg8
I2
sg9
S'getdefaultencoding'
p95
sa(dp96
g1
S'getfilesystemencoding() -> string\n\nReturn the encoding used to convert Unicode filenames in\noperating system filenames.'
p97
sg3
I01
sg8
I2
sg9
S'getfilesystemencoding'
p98
sa(dp99
g1
S'getprofile()\n\nReturn the profiling function set with sys.setprofile.\nSee the profiler chapter in the library manual.'
p100
sg3
I01
sg8
I2
sg9
S'getprofile'
p101
sa(dp102
g1
S'getrecursionlimit()\n\nReturn the current value of the recursion limit, the maximum depth\nof the Python interpreter stack.  This limit prevents infinite\nrecursion from causing an overflow of the C stack and crashing Python.'
p103
sg3
I01
sg8
I2
sg9
S'getrecursionlimit'
p104
sa(dp105
g1
S'getrefcount(object) -> integer\n\nReturn the reference count of object.  The count returned is generally\none higher than you might expect, because it includes the (temporary)\nreference as an argument to getrefcount().'
p106
sg3
I01
sg8
I2
sg9
S'getrefcount'
p107
sa(dp108
g1
S'getsizeof(object, default) -> int\n\nReturn the size of object in bytes.'
p109
sg3
I01
sg8
I2
sg9
S'getsizeof'
p110
sa(dp111
g1
S'gettrace()\n\nReturn the global debug tracing function set with sys.settrace.\nSee the debugger chapter in the library manual.'
p112
sg3
I01
sg8
I2
sg9
S'gettrace'
p113
sa(dp114
g1
S'getwindowsversion()\n\nReturn information about the running version of Windows as a named tuple.\nThe members are named: major, minor, build, platform, service_pack,\nservice_pack_major, service_pack_minor, suite_mask, and product_type. For\nbackward compatibility, only the first 5 items are available by indexing.\nAll elements are numbers, except service_pack which is a string. Platform\nmay be 0 for win32s, 1 for Windows 9x/ME, 2 for Windows NT/2000/XP/Vista/7,\n3 for Windows CE. Product_type may be 1 for a workstation, 2 for a domain\ncontroller, 3 for a server.'
p115
sg3
I01
sg8
I2
sg9
S'getwindowsversion'
p116
sa(dp117
g3
I01
sg8
I5
sg9
S'hexversion'
p118
sa(dp119
g3
I01
sg8
I5
sg9
S'long_info'
p120
sa(dp121
g3
I01
sg8
I5
sg9
S'maxint'
p122
sa(dp123
g3
I01
sg8
I5
sg9
S'maxsize'
p124
sa(dp125
g3
I01
sg8
I5
sg9
S'maxunicode'
p126
sa(dp127
g3
I01
sg8
I5
sg9
S'meta_path'
p128
sa(dp129
g3
I01
sg8
I5
sg9
S'modules'
p130
sa(dp131
g3
I01
sg8
I5
sg9
S'path'
p132
sa(dp133
g3
I01
sg8
I5
sg9
S'path_hooks'
p134
sa(dp135
g3
I01
sg8
I5
sg9
S'path_importer_cache'
p136
sa(dp137
g3
I01
sg8
I5
sg9
S'platform'
p138
sa(dp139
g3
I01
sg8
I5
sg9
S'prefix'
p140
sa(dp141
g3
I01
sg8
I5
sg9
S'py3kwarning'
p142
sa(dp143
g1
S'setcheckinterval(n)\n\nTell the Python interpreter to check for asynchronous events every\nn instructions.  This also affects how often thread switches occur.'
p144
sg3
I01
sg8
I2
sg9
S'setcheckinterval'
p145
sa(dp146
g1
S'setprofile(function)\n\nSet the profiling function.  It will be called on each function call\nand return.  See the profiler chapter in the library manual.'
p147
sg3
I01
sg8
I2
sg9
S'setprofile'
p148
sa(dp149
g1
S'setrecursionlimit(n)\n\nSet the maximum depth of the Python interpreter stack to n.  This\nlimit prevents infinite recursion from causing an overflow of the C\nstack and crashing Python.  The highest possible limit is platform-\ndependent.'
p150
sg3
I01
sg8
I2
sg9
S'setrecursionlimit'
p151
sa(dp152
g1
S'settrace(function)\n\nSet the global debug tracing function.  It will be called on each\nfunction call.  See the debugger chapter in the library manual.'
p153
sg3
I01
sg8
I2
sg9
S'settrace'
p154
sa(dp155
g3
I01
sg8
I5
sg9
S'stderr'
p156
sa(dp157
g3
I01
sg8
I5
sg9
S'stdin'
p158
sa(dp159
g3
I01
sg8
I5
sg9
S'stdout'
p160
sa(dp161
g3
I01
sg8
I5
sg9
S'subversion'
p162
sa(dp163
g3
I01
sg8
I5
sg9
S'version'
p164
sa(dp165
g3
I01
sg8
I5
sg9
S'version_info'
p166
sa(dp167
g3
I01
sg8
I5
sg9
S'warnoptions'
p168
sa(dp169
g3
I01
sg8
I5
sg9
S'winver'
p170
sasg8
I1
sg9
S'sys'
p171
s.