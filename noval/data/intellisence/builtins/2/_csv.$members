(dp0
S'doc'
p1
S'CSV parsing and writing.\n\nThis module provides classes that assist in the reading and writing\nof Comma Separated Value (CSV) files, and implements the interface\ndescribed by PEP 305.  Although many CSV files are simple to parse,\nthe format is not formally defined by a stable specification and\nis subtle enough that parsing lines of a CSV file with something\nlike line.split(",") is bound to fail.  The module supports three\nbasic APIs: reading, writing, and registration of dialects.\n\n\nDIALECT REGISTRATION:\n\nReaders and writers support a dialect argument, which is a convenient\nhandle on a group of settings.  When the dialect argument is a string,\nit identifies one of the dialects previously registered with the module.\nIf it is a class or instance, the attributes of the argument are used as\nthe settings for the reader or writer:\n\n    class excel:\n        delimiter = \',\'\n        quotechar = \'"\'\n        escapechar = None\n        doublequote = True\n        skipinitialspace = False\n        lineterminator = \'\\r\\n\'\n        quoting = QUOTE_MINIMAL\n\nSETTINGS:\n\n    * quotechar - specifies a one-character string to use as the \n        quoting character.  It defaults to \'"\'.\n    * delimiter - specifies a one-character string to use as the \n        field separator.  It defaults to \',\'.\n    * skipinitialspace - specifies how to interpret whitespace which\n        immediately follows a delimiter.  It defaults to False, which\n        means that whitespace immediately following a delimiter is part\n        of the following field.\n    * lineterminator -  specifies the character sequence which should \n        terminate rows.\n    * quoting - controls when quotes should be generated by the writer.\n        It can take on any of the following module constants:\n\n        csv.QUOTE_MINIMAL means only when required, for example, when a\n            field contains either the quotechar or the delimiter\n        csv.QUOTE_ALL means that quotes are always placed around fields.\n        csv.QUOTE_NONNUMERIC means that quotes are always placed around\n            fields which do not parse as integers or floating point\n            numbers.\n        csv.QUOTE_NONE means that quotes are never placed around fields.\n    * escapechar - specifies a one-character string used to escape \n        the delimiter when quoting is set to QUOTE_NONE.\n    * doublequote - controls the handling of quotes inside fields.  When\n        True, two consecutive quotes are interpreted as one during read,\n        and when writing, each quote character embedded in the data is\n        written as two quotes\n'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g1
S'CSV dialect\n\nThe Dialect type records CSV parsing and generation options.\n'
p7
sg3
I01
sg4
(lp8
(dp9
g3
I01
sS'type'
p10
I5
sS'name'
p11
S'__delattr__'
p12
sa(dp13
g3
I01
sg10
I5
sg11
S'__doc__'
p14
sa(dp15
g1
S'default object formatter'
p16
sg3
I01
sg10
I2
sg11
S'__format__'
p17
sa(dp18
g3
I01
sg10
I5
sg11
S'__getattribute__'
p19
sa(dp20
g3
I01
sg10
I5
sg11
S'__hash__'
p21
sa(dp22
g3
I01
sg10
I5
sg11
S'__init__'
p23
sa(dp24
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p25
sg3
I01
sg10
I2
sg11
S'__new__'
p26
sa(dp27
g1
S'helper for pickle'
p28
sg3
I01
sg10
I2
sg11
S'__reduce__'
p29
sa(dp30
g1
S'helper for pickle'
p31
sg3
I01
sg10
I2
sg11
S'__reduce_ex__'
p32
sa(dp33
g3
I01
sg10
I5
sg11
S'__repr__'
p34
sa(dp35
g3
I01
sg10
I5
sg11
S'__setattr__'
p36
sa(dp37
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p38
sg3
I01
sg10
I2
sg11
S'__sizeof__'
p39
sa(dp40
g3
I01
sg10
I5
sg11
S'__str__'
p41
sa(dp42
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p43
sg3
I01
sg10
I2
sg11
S'__subclasshook__'
p44
sa(dp45
g3
I01
sg10
I5
sg11
S'delimiter'
p46
sa(dp47
g3
I01
sg10
I5
sg11
S'doublequote'
p48
sa(dp49
g3
I01
sg10
I5
sg11
S'escapechar'
p50
sa(dp51
g3
I01
sg10
I5
sg11
S'lineterminator'
p52
sa(dp53
g3
I01
sg10
I5
sg11
S'quotechar'
p54
sa(dp55
g3
I01
sg10
I5
sg11
S'quoting'
p56
sa(dp57
g3
I01
sg10
I5
sg11
S'skipinitialspace'
p58
sa(dp59
g3
I01
sg10
I5
sg11
S'strict'
p60
sasg10
I3
sg11
S'Dialect'
p61
sa(dp62
g1
Nsg3
I01
sg4
(lp63
(dp64
g3
I01
sg10
I5
sg11
g12
sa(dp65
g3
I01
sg10
I5
sg11
S'__dict__'
p66
sa(dp67
g3
I01
sg10
I5
sg11
g14
sa(dp68
g1
S'default object formatter'
p69
sg3
I01
sg10
I2
sg11
g17
sa(dp70
g3
I01
sg10
I5
sg11
g19
sa(dp71
g3
I01
sg10
I5
sg11
S'__getitem__'
p72
sa(dp73
g3
I01
sg10
I5
sg11
S'__getslice__'
p74
sa(dp75
g3
I01
sg10
I5
sg11
g21
sa(dp76
g3
I01
sg10
I5
sg11
g23
sa(dp77
g3
I01
sg10
I5
sg11
S'__module__'
p78
sa(dp79
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p80
sg3
I01
sg10
I2
sg11
g26
sa(dp81
g1
Nsg3
I01
sg10
I2
sg11
g29
sa(dp82
g1
S'helper for pickle'
p83
sg3
I01
sg10
I2
sg11
g32
sa(dp84
g3
I01
sg10
I5
sg11
g34
sa(dp85
g3
I01
sg10
I5
sg11
g36
sa(dp86
g1
Nsg3
I01
sg10
I2
sg11
S'__setstate__'
p87
sa(dp88
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p89
sg3
I01
sg10
I2
sg11
g39
sa(dp90
g3
I01
sg10
I5
sg11
g41
sa(dp91
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p92
sg3
I01
sg10
I2
sg11
g44
sa(dp93
g1
Nsg3
I01
sg10
I2
sg11
S'__unicode__'
p94
sa(dp95
g3
I01
sg10
I5
sg11
S'__weakref__'
p96
sa(dp97
g3
I01
sg10
I5
sg11
S'args'
p98
sa(dp99
g3
I01
sg10
I5
sg11
S'message'
p100
sasg10
I3
sg11
S'Error'
p101
sa(dp102
g3
I01
sg10
I5
sg11
S'QUOTE_ALL'
p103
sa(dp104
g3
I01
sg10
I5
sg11
S'QUOTE_MINIMAL'
p105
sa(dp106
g3
I01
sg10
I5
sg11
S'QUOTE_NONE'
p107
sa(dp108
g3
I01
sg10
I5
sg11
S'QUOTE_NONNUMERIC'
p109
sa(dp110
g3
I01
sg10
I5
sg11
g14
sa(dp111
g3
I01
sg10
I5
sg11
S'__name__'
p112
sa(dp113
g3
I01
sg10
I5
sg11
S'__package__'
p114
sa(dp115
g3
I01
sg10
I5
sg11
S'__version__'
p116
sa(dp117
g3
I01
sg10
I5
sg11
S'_dialects'
p118
sa(dp119
g1
S'Sets an upper limit on parsed fields.\n    csv.field_size_limit([limit])\n\nReturns old limit. If limit is not given, no new limit is set and\nthe old limit is returned'
p120
sg3
I01
sg10
I2
sg11
S'field_size_limit'
p121
sa(dp122
g1
S'Return the dialect instance associated with name.\n    dialect = csv.get_dialect(name)'
p123
sg3
I01
sg10
I2
sg11
S'get_dialect'
p124
sa(dp125
g1
S'Return a list of all know dialect names.\n    names = csv.list_dialects()'
p126
sg3
I01
sg10
I2
sg11
S'list_dialects'
p127
sa(dp128
g1
S'    csv_reader = reader(iterable [, dialect=\'excel\']\n                        [optional keyword args])\n    for row in csv_reader:\n        process(row)\n\nThe "iterable" argument can be any object that returns a line\nof input for each iteration, such as a file object or a list.  The\noptional "dialect" parameter is discussed below.  The function\nalso accepts optional keyword arguments which override settings\nprovided by the dialect.\n\nThe returned object is an iterator.  Each iteration returns a row\nof the CSV file (which can span multiple input lines).\n'
p129
sg3
I01
sg10
I2
sg11
S'reader'
p130
sa(dp131
g1
S'Create a mapping from a string name to a dialect class.\n    dialect = csv.register_dialect(name, dialect)'
p132
sg3
I01
sg10
I2
sg11
S'register_dialect'
p133
sa(dp134
g1
S'Delete the name/dialect mapping associated with a string name.\n    csv.unregister_dialect(name)'
p135
sg3
I01
sg10
I2
sg11
S'unregister_dialect'
p136
sa(dp137
g1
S'    csv_writer = csv.writer(fileobj [, dialect=\'excel\']\n                            [optional keyword args])\n    for row in sequence:\n        csv_writer.writerow(row)\n\n    [or]\n\n    csv_writer = csv.writer(fileobj [, dialect=\'excel\']\n                            [optional keyword args])\n    csv_writer.writerows(rows)\n\nThe "fileobj" argument can be any object that supports the file API.\n'
p138
sg3
I01
sg10
I2
sg11
S'writer'
p139
sasg10
I1
sg11
S'_csv'
p140
s.