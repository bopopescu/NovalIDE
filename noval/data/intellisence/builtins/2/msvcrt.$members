(dp0
S'doc'
p1
NsS'is_builtin'
p2
I01
sS'childs'
p3
(lp4
(dp5
g2
I01
sS'type'
p6
I5
sS'name'
p7
S'CRT_ASSEMBLY_VERSION'
p8
sa(dp9
g2
I01
sg6
I5
sg7
S'LIBRARIES_ASSEMBLY_NAME_PREFIX'
p10
sa(dp11
g2
I01
sg6
I5
sg7
S'LK_LOCK'
p12
sa(dp13
g2
I01
sg6
I5
sg7
S'LK_NBLCK'
p14
sa(dp15
g2
I01
sg6
I5
sg7
S'LK_NBRLCK'
p16
sa(dp17
g2
I01
sg6
I5
sg7
S'LK_RLCK'
p18
sa(dp19
g2
I01
sg6
I5
sg7
S'LK_UNLCK'
p20
sa(dp21
g2
I01
sg6
I5
sg7
S'VC_ASSEMBLY_PUBLICKEYTOKEN'
p22
sa(dp23
g2
I01
sg6
I5
sg7
S'__doc__'
p24
sa(dp25
g2
I01
sg6
I5
sg7
S'__name__'
p26
sa(dp27
g2
I01
sg6
I5
sg7
S'__package__'
p28
sa(dp29
g1
S'get_osfhandle(fd) -> file handle\n\nReturn the file handle for the file descriptor fd. Raises IOError\nif fd is not recognized.'
p30
sg2
I01
sg6
I2
sg7
S'get_osfhandle'
p31
sa(dp32
g1
S"getch() -> key character\n\nRead a keypress and return the resulting character. Nothing is echoed to\nthe console. This call will block if a keypress is not already\navailable, but will not wait for Enter to be pressed. If the pressed key\nwas a special function key, this will return '\\000' or '\\xe0'; the next\ncall will return the keycode. The Control-C keypress cannot be read with\nthis function."
p33
sg2
I01
sg6
I2
sg7
S'getch'
p34
sa(dp35
g1
S'getche() -> key character\n\nSimilar to getch(), but the keypress will be echoed if it represents\na printable character.'
p36
sg2
I01
sg6
I2
sg7
S'getche'
p37
sa(dp38
g1
S'getwch() -> Unicode key character\n\nWide char variant of getch(), returning a Unicode value.'
p39
sg2
I01
sg6
I2
sg7
S'getwch'
p40
sa(dp41
g1
S'getwche() -> Unicode key character\n\nWide char variant of getche(), returning a Unicode value.'
p42
sg2
I01
sg6
I2
sg7
S'getwche'
p43
sa(dp44
g1
S'heapmin() -> None\n\nForce the malloc() heap to clean itself up and return unused blocks\nto the operating system. On failure, this raises IOError.'
p45
sg2
I01
sg6
I2
sg7
S'heapmin'
p46
sa(dp47
g1
S'kbhit() -> bool\n\nReturn true if a keypress is waiting to be read.'
p48
sg2
I01
sg6
I2
sg7
S'kbhit'
p49
sa(dp50
g1
S'locking(fd, mode, nbytes) -> None\n\nLock part of a file based on file descriptor fd from the C runtime.\nRaises IOError on failure. The locked region of the file extends from\nthe current file position for nbytes bytes, and may continue beyond\nthe end of the file. mode must be one of the LK_* constants listed\nbelow. Multiple regions in a file may be locked at the same time, but\nmay not overlap. Adjacent regions are not merged; they must be unlocked\nindividually.'
p51
sg2
I01
sg6
I2
sg7
S'locking'
p52
sa(dp53
g1
S'open_osfhandle(handle, flags) -> file descriptor\n\nCreate a C runtime file descriptor from the file handle handle. The\nflags parameter should be a bitwise OR of os.O_APPEND, os.O_RDONLY,\nand os.O_TEXT. The returned file descriptor may be used as a parameter\nto os.fdopen() to create a file object.'
p54
sg2
I01
sg6
I2
sg7
S'open_osfhandle'
p55
sa(dp56
g1
S'putch(char) -> None\n\nPrint the character char to the console without buffering.'
p57
sg2
I01
sg6
I2
sg7
S'putch'
p58
sa(dp59
g1
S'putwch(unicode_char) -> None\n\nWide char variant of putch(), accepting a Unicode value.'
p60
sg2
I01
sg6
I2
sg7
S'putwch'
p61
sa(dp62
g1
S'setmode(fd, mode) -> Previous mode\n\nSet the line-end translation mode for the file descriptor fd. To set\nit to text mode, flags should be os.O_TEXT; for binary, it should be\nos.O_BINARY.'
p63
sg2
I01
sg6
I2
sg7
S'setmode'
p64
sa(dp65
g1
S'ungetch(char) -> None\n\nCause the character char to be "pushed back" into the console buffer;\nit will be the next character read by getch() or getche().'
p66
sg2
I01
sg6
I2
sg7
S'ungetch'
p67
sa(dp68
g1
S'ungetwch(unicode_char) -> None\n\nWide char variant of ungetch(), accepting a Unicode value.'
p69
sg2
I01
sg6
I2
sg7
S'ungetwch'
p70
sasg6
I1
sg7
S'msvcrt'
p71
s.