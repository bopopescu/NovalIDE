(dp0
S'doc'
p1
NsS'is_builtin'
p2
I01
sS'childs'
p3
(lp4
(dp5
g2
I01
sS'type'
p6
I5
sS'name'
p7
S'ACCESS_COPY'
p8
sa(dp9
g2
I01
sg6
I5
sg7
S'ACCESS_READ'
p10
sa(dp11
g2
I01
sg6
I5
sg7
S'ACCESS_WRITE'
p12
sa(dp13
g2
I01
sg6
I5
sg7
S'ALLOCATIONGRANULARITY'
p14
sa(dp15
g2
I01
sg6
I5
sg7
S'PAGESIZE'
p16
sa(dp17
g2
I01
sg6
I5
sg7
S'__doc__'
p18
sa(dp19
g2
I01
sg6
I5
sg7
S'__name__'
p20
sa(dp21
g2
I01
sg6
I5
sg7
S'__package__'
p22
sa(dp23
g1
Nsg2
I01
sg3
(lp24
(dp25
g2
I01
sg6
I5
sg7
S'__delattr__'
p26
sa(dp27
g2
I01
sg6
I5
sg7
S'__dict__'
p28
sa(dp29
g2
I01
sg6
I5
sg7
g18
sa(dp30
g1
S'default object formatter'
p31
sg2
I01
sg6
I2
sg7
S'__format__'
p32
sa(dp33
g2
I01
sg6
I5
sg7
S'__getattribute__'
p34
sa(dp35
g2
I01
sg6
I5
sg7
S'__getitem__'
p36
sa(dp37
g2
I01
sg6
I5
sg7
S'__getslice__'
p38
sa(dp39
g2
I01
sg6
I5
sg7
S'__hash__'
p40
sa(dp41
g2
I01
sg6
I5
sg7
S'__init__'
p42
sa(dp43
g2
I01
sg6
I5
sg7
S'__module__'
p44
sa(dp45
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p46
sg2
I01
sg6
I2
sg7
S'__new__'
p47
sa(dp48
g1
Nsg2
I01
sg6
I2
sg7
S'__reduce__'
p49
sa(dp50
g1
S'helper for pickle'
p51
sg2
I01
sg6
I2
sg7
S'__reduce_ex__'
p52
sa(dp53
g2
I01
sg6
I5
sg7
S'__repr__'
p54
sa(dp55
g2
I01
sg6
I5
sg7
S'__setattr__'
p56
sa(dp57
g1
Nsg2
I01
sg6
I2
sg7
S'__setstate__'
p58
sa(dp59
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p60
sg2
I01
sg6
I2
sg7
S'__sizeof__'
p61
sa(dp62
g2
I01
sg6
I5
sg7
S'__str__'
p63
sa(dp64
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p65
sg2
I01
sg6
I2
sg7
S'__subclasshook__'
p66
sa(dp67
g1
Nsg2
I01
sg6
I2
sg7
S'__unicode__'
p68
sa(dp69
g2
I01
sg6
I5
sg7
S'__weakref__'
p70
sa(dp71
g2
I01
sg6
I5
sg7
S'args'
p72
sa(dp73
g2
I01
sg6
I5
sg7
S'errno'
p74
sa(dp75
g2
I01
sg6
I5
sg7
S'filename'
p76
sa(dp77
g2
I01
sg6
I5
sg7
S'message'
p78
sa(dp79
g2
I01
sg6
I5
sg7
S'strerror'
p80
sasg6
I3
sg7
S'error'
p81
sa(dp82
g1
S"Windows: mmap(fileno, length[, tagname[, access[, offset]]])\n\nMaps length bytes from the file specified by the file handle fileno,\nand returns a mmap object.  If length is larger than the current size\nof the file, the file is extended to contain length bytes.  If length\nis 0, the maximum length of the map is the current size of the file,\nexcept that if the file is empty Windows raises an exception (you cannot\ncreate an empty mapping on Windows).\n\nUnix: mmap(fileno, length[, flags[, prot[, access[, offset]]]])\n\nMaps length bytes from the file specified by the file descriptor fileno,\nand returns a mmap object.  If length is 0, the maximum length of the map\nwill be the current size of the file when mmap is called.\nflags specifies the nature of the mapping. MAP_PRIVATE creates a\nprivate copy-on-write mapping, so changes to the contents of the mmap\nobject will be private to this process, and MAP_SHARED creates a mapping\nthat's shared with all other processes mapping the same areas of the file.\nThe default value is MAP_SHARED.\n\nTo map anonymous memory, pass -1 as the fileno (both versions)."
p83
sg2
I01
sg3
(lp84
(dp85
g2
I01
sg6
I5
sg7
S'__add__'
p86
sa(dp87
g2
I01
sg6
I5
sg7
g26
sa(dp88
g2
I01
sg6
I5
sg7
S'__delitem__'
p89
sa(dp90
g2
I01
sg6
I5
sg7
S'__delslice__'
p91
sa(dp92
g2
I01
sg6
I5
sg7
g18
sa(dp93
g1
S'default object formatter'
p94
sg2
I01
sg6
I2
sg7
g32
sa(dp95
g2
I01
sg6
I5
sg7
g34
sa(dp96
g2
I01
sg6
I5
sg7
g36
sa(dp97
g2
I01
sg6
I5
sg7
g38
sa(dp98
g2
I01
sg6
I5
sg7
g40
sa(dp99
g2
I01
sg6
I5
sg7
g42
sa(dp100
g2
I01
sg6
I5
sg7
S'__len__'
p101
sa(dp102
g2
I01
sg6
I5
sg7
S'__mul__'
p103
sa(dp104
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p105
sg2
I01
sg6
I2
sg7
g47
sa(dp106
g1
S'helper for pickle'
p107
sg2
I01
sg6
I2
sg7
g49
sa(dp108
g1
S'helper for pickle'
p109
sg2
I01
sg6
I2
sg7
g52
sa(dp110
g2
I01
sg6
I5
sg7
g54
sa(dp111
g2
I01
sg6
I5
sg7
S'__rmul__'
p112
sa(dp113
g2
I01
sg6
I5
sg7
g56
sa(dp114
g2
I01
sg6
I5
sg7
S'__setitem__'
p115
sa(dp116
g2
I01
sg6
I5
sg7
S'__setslice__'
p117
sa(dp118
g1
Nsg2
I01
sg6
I2
sg7
g61
sa(dp119
g2
I01
sg6
I5
sg7
g63
sa(dp120
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p121
sg2
I01
sg6
I2
sg7
g66
sa(dp122
g1
Nsg2
I01
sg6
I2
sg7
S'close'
p123
sa(dp124
g1
Nsg2
I01
sg6
I2
sg7
S'find'
p125
sa(dp126
g1
Nsg2
I01
sg6
I2
sg7
S'flush'
p127
sa(dp128
g1
Nsg2
I01
sg6
I2
sg7
S'move'
p129
sa(dp130
g1
Nsg2
I01
sg6
I2
sg7
S'read'
p131
sa(dp132
g1
Nsg2
I01
sg6
I2
sg7
S'read_byte'
p133
sa(dp134
g1
Nsg2
I01
sg6
I2
sg7
S'readline'
p135
sa(dp136
g1
Nsg2
I01
sg6
I2
sg7
S'resize'
p137
sa(dp138
g1
Nsg2
I01
sg6
I2
sg7
S'rfind'
p139
sa(dp140
g1
Nsg2
I01
sg6
I2
sg7
S'seek'
p141
sa(dp142
g1
Nsg2
I01
sg6
I2
sg7
S'size'
p143
sa(dp144
g1
Nsg2
I01
sg6
I2
sg7
S'tell'
p145
sa(dp146
g1
Nsg2
I01
sg6
I2
sg7
S'write'
p147
sa(dp148
g1
Nsg2
I01
sg6
I2
sg7
S'write_byte'
p149
sasg6
I3
sg7
S'mmap'
p150
sasg6
I1
sg7
S'mmap'
p151
s.