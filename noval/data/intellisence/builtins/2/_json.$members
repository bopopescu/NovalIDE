(dp0
S'doc'
p1
S'json speedups\n'
p2
sS'is_builtin'
p3
I01
sS'childs'
p4
(lp5
(dp6
g3
I01
sS'type'
p7
I5
sS'name'
p8
S'__doc__'
p9
sa(dp10
g3
I01
sg7
I5
sg8
S'__name__'
p11
sa(dp12
g3
I01
sg7
I5
sg8
S'__package__'
p13
sa(dp14
g1
S'encode_basestring_ascii(basestring) -> str\n\nReturn an ASCII-only JSON representation of a Python string'
p15
sg3
I01
sg7
I2
sg8
S'encode_basestring_ascii'
p16
sa(dp17
g1
S'_iterencode(obj, _current_indent_level) -> iterable'
p18
sg3
I01
sg4
(lp19
(dp20
g3
I01
sg7
I5
sg8
S'__call__'
p21
sa(dp22
g3
I01
sg7
I5
sg8
S'__delattr__'
p23
sa(dp24
g3
I01
sg7
I5
sg8
g9
sa(dp25
g1
S'default object formatter'
p26
sg3
I01
sg7
I2
sg8
S'__format__'
p27
sa(dp28
g3
I01
sg7
I5
sg8
S'__getattribute__'
p29
sa(dp30
g3
I01
sg7
I5
sg8
S'__hash__'
p31
sa(dp32
g3
I01
sg7
I5
sg8
S'__init__'
p33
sa(dp34
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p35
sg3
I01
sg7
I2
sg8
S'__new__'
p36
sa(dp37
g1
S'helper for pickle'
p38
sg3
I01
sg7
I2
sg8
S'__reduce__'
p39
sa(dp40
g1
S'helper for pickle'
p41
sg3
I01
sg7
I2
sg8
S'__reduce_ex__'
p42
sa(dp43
g3
I01
sg7
I5
sg8
S'__repr__'
p44
sa(dp45
g3
I01
sg7
I5
sg8
S'__setattr__'
p46
sa(dp47
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p48
sg3
I01
sg7
I2
sg8
S'__sizeof__'
p49
sa(dp50
g3
I01
sg7
I5
sg8
S'__str__'
p51
sa(dp52
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p53
sg3
I01
sg7
I2
sg8
S'__subclasshook__'
p54
sa(dp55
g3
I01
sg7
I5
sg8
S'default'
p56
sa(dp57
g3
I01
sg7
I5
sg8
S'encoder'
p58
sa(dp59
g3
I01
sg7
I5
sg8
S'indent'
p60
sa(dp61
g3
I01
sg7
I5
sg8
S'item_separator'
p62
sa(dp63
g3
I01
sg7
I5
sg8
S'key_separator'
p64
sa(dp65
g3
I01
sg7
I5
sg8
S'markers'
p66
sa(dp67
g3
I01
sg7
I5
sg8
S'skipkeys'
p68
sa(dp69
g3
I01
sg7
I5
sg8
S'sort_keys'
p70
sasg7
I3
sg8
S'make_encoder'
p71
sa(dp72
g1
S'JSON scanner object'
p73
sg3
I01
sg4
(lp74
(dp75
g3
I01
sg7
I5
sg8
g21
sa(dp76
g3
I01
sg7
I5
sg8
g23
sa(dp77
g3
I01
sg7
I5
sg8
g9
sa(dp78
g1
S'default object formatter'
p79
sg3
I01
sg7
I2
sg8
g27
sa(dp80
g3
I01
sg7
I5
sg8
g29
sa(dp81
g3
I01
sg7
I5
sg8
g31
sa(dp82
g3
I01
sg7
I5
sg8
g33
sa(dp83
g1
S'T.__new__(S, ...) -> a new object with type S, a subtype of T'
p84
sg3
I01
sg7
I2
sg8
g36
sa(dp85
g1
S'helper for pickle'
p86
sg3
I01
sg7
I2
sg8
g39
sa(dp87
g1
S'helper for pickle'
p88
sg3
I01
sg7
I2
sg8
g42
sa(dp89
g3
I01
sg7
I5
sg8
g44
sa(dp90
g3
I01
sg7
I5
sg8
g46
sa(dp91
g1
S'__sizeof__() -> int\nsize of object in memory, in bytes'
p92
sg3
I01
sg7
I2
sg8
g49
sa(dp93
g3
I01
sg7
I5
sg8
g51
sa(dp94
g1
S'Abstract classes can override this to customize issubclass().\n\nThis is invoked early on by abc.ABCMeta.__subclasscheck__().\nIt should return True, False or NotImplemented.  If it returns\nNotImplemented, the normal algorithm is used.  Otherwise, it\noverrides the normal algorithm (and the outcome is cached).\n'
p95
sg3
I01
sg7
I2
sg8
g54
sa(dp96
g3
I01
sg7
I5
sg8
S'encoding'
p97
sa(dp98
g3
I01
sg7
I5
sg8
S'object_hook'
p99
sa(dp100
g3
I01
sg7
I5
sg8
S'object_pairs_hook'
p101
sa(dp102
g3
I01
sg7
I5
sg8
S'parse_constant'
p103
sa(dp104
g3
I01
sg7
I5
sg8
S'parse_float'
p105
sa(dp106
g3
I01
sg7
I5
sg8
S'parse_int'
p107
sa(dp108
g3
I01
sg7
I5
sg8
S'strict'
p109
sasg7
I3
sg8
S'make_scanner'
p110
sa(dp111
g1
S'scanstring(basestring, end, encoding, strict=True) -> (str, end)\n\nScan the string s for a JSON string. End is the index of the\ncharacter in s after the quote that started the JSON string.\nUnescapes all valid JSON string escape sequences and raises ValueError\non attempt to decode an invalid string. If strict is False then literal\ncontrol characters are allowed in the string.\n\nReturns a tuple of the decoded string and the index of the character in s\nafter the end quote.'
p112
sg3
I01
sg7
I2
sg8
S'scanstring'
p113
sasg7
I1
sg8
S'_json'
p114
s.