(dp0
S'doc'
p1
NsS'is_builtin'
p2
I01
sS'childs'
p3
(lp4
(dp5
g2
I01
sS'type'
p6
I5
sS'name'
p7
S'CREATE_NEW_CONSOLE'
p8
sa(dp9
g2
I01
sg6
I5
sg7
S'CREATE_NEW_PROCESS_GROUP'
p10
sa(dp11
g1
S'CreatePipe(pipe_attrs, size) -> (read_handle, write_handle)\n\nCreate an anonymous pipe, and return handles to the read and\nwrite ends of the pipe.\n\npipe_attrs is ignored internally and can be None.'
p12
sg2
I01
sg6
I2
sg7
S'CreatePipe'
p13
sa(dp14
g1
S'CreateProcess(app_name, cmd_line, proc_attrs, thread_attrs,\n               inherit, flags, env_mapping, curdir,\n               startup_info) -> (proc_handle, thread_handle,\n                                 pid, tid)\n\nCreate a new process and its primary thread. The return\nvalue is a tuple of the process handle, thread handle,\nprocess ID, and thread ID.\n\nproc_attrs and thread_attrs are ignored internally and can be None.'
p15
sg2
I01
sg6
I2
sg7
S'CreateProcess'
p16
sa(dp17
g2
I01
sg6
I5
sg7
S'DUPLICATE_SAME_ACCESS'
p18
sa(dp19
g1
S'DuplicateHandle(source_proc_handle, source_handle,\n                 target_proc_handle, target_handle, access,\n                 inherit[, options]) -> handle\n\nReturn a duplicate handle object.\n\nThe duplicate handle refers to the same object as the original\nhandle. Therefore, any changes to the object are reflected\nthrough both handles.'
p20
sg2
I01
sg6
I2
sg7
S'DuplicateHandle'
p21
sa(dp22
g1
S'GetCurrentProcess() -> handle\n\nReturn a handle object for the current process.'
p23
sg2
I01
sg6
I2
sg7
S'GetCurrentProcess'
p24
sa(dp25
g1
S'GetExitCodeProcess(handle) -> Exit code\n\nReturn the termination status of the specified process.'
p26
sg2
I01
sg6
I2
sg7
S'GetExitCodeProcess'
p27
sa(dp28
g1
S'GetModuleFileName(module) -> path\n\nReturn the fully-qualified path for the file that contains\nthe specified module. The module must have been loaded by the\ncurrent process.\n\nThe module parameter should be a handle to the loaded module\nwhose path is being requested. If this parameter is 0, \nGetModuleFileName retrieves the path of the executable file\nof the current process.'
p29
sg2
I01
sg6
I2
sg7
S'GetModuleFileName'
p30
sa(dp31
g1
S'GetStdHandle(handle) -> integer\n\nReturn a handle to the specified standard device\n(STD_INPUT_HANDLE, STD_OUTPUT_HANDLE, STD_ERROR_HANDLE).\nThe integer associated with the handle object is returned.'
p32
sg2
I01
sg6
I2
sg7
S'GetStdHandle'
p33
sa(dp34
g1
S'GetVersion() -> version\n\nReturn the version number of the current operating system.'
p35
sg2
I01
sg6
I2
sg7
S'GetVersion'
p36
sa(dp37
g2
I01
sg6
I5
sg7
S'INFINITE'
p38
sa(dp39
g2
I01
sg6
I5
sg7
S'STARTF_USESHOWWINDOW'
p40
sa(dp41
g2
I01
sg6
I5
sg7
S'STARTF_USESTDHANDLES'
p42
sa(dp43
g2
I01
sg6
I5
sg7
S'STD_ERROR_HANDLE'
p44
sa(dp45
g2
I01
sg6
I5
sg7
S'STD_INPUT_HANDLE'
p46
sa(dp47
g2
I01
sg6
I5
sg7
S'STD_OUTPUT_HANDLE'
p48
sa(dp49
g2
I01
sg6
I5
sg7
S'STILL_ACTIVE'
p50
sa(dp51
g2
I01
sg6
I5
sg7
S'SW_HIDE'
p52
sa(dp53
g1
S'TerminateProcess(handle, exit_code) -> None\n\nTerminate the specified process and all of its threads.'
p54
sg2
I01
sg6
I2
sg7
S'TerminateProcess'
p55
sa(dp56
g2
I01
sg6
I5
sg7
S'WAIT_OBJECT_0'
p57
sa(dp58
g1
S'WaitForSingleObject(handle, timeout) -> result\n\nWait until the specified object is in the signaled state or\nthe time-out interval elapses. The timeout value is specified\nin milliseconds.'
p59
sg2
I01
sg6
I2
sg7
S'WaitForSingleObject'
p60
sa(dp61
g2
I01
sg6
I5
sg7
S'__doc__'
p62
sa(dp63
g2
I01
sg6
I5
sg7
S'__name__'
p64
sa(dp65
g2
I01
sg6
I5
sg7
S'__package__'
p66
sasg6
I1
sg7
S'_subprocess'
p67
s.