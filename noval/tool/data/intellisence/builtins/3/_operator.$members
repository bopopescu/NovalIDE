(dp0
Vchilds
p1
(lp2
(dp3
Vis_builtin
p4
I01
sVname
p5
V__doc__
p6
sVtype
p7
L5L
sa(dp8
g1
(lp9
(dp10
g4
I01
sg5
V__delattr__
p11
sg7
L5L
sa(dp12
g4
I01
sg5
V__dict__
p13
sg7
L5L
sa(dp14
g4
I01
sg5
V__dir__
p15
sg7
L2L
sVdoc
p16
V__dir__() -> list\u000adefault dir() implementation
p17
sa(dp18
g4
I01
sg5
g6
sg7
L5L
sa(dp19
g4
I01
sg5
V__eq__
p20
sg7
L5L
sa(dp21
g4
I01
sg5
V__format__
p22
sg7
L2L
sg16
Vdefault object formatter
p23
sa(dp24
g4
I01
sg5
V__ge__
p25
sg7
L5L
sa(dp26
g4
I01
sg5
V__getattribute__
p27
sg7
L5L
sa(dp28
g4
I01
sg5
V__gt__
p29
sg7
L5L
sa(dp30
g4
I01
sg5
V__hash__
p31
sg7
L5L
sa(dp32
g4
I01
sg5
V__init__
p33
sg7
L5L
sa(dp34
g4
I01
sg5
V__le__
p35
sg7
L5L
sa(dp36
g4
I01
sg5
V__lt__
p37
sg7
L5L
sa(dp38
g4
I01
sg5
V__module__
p39
sg7
L5L
sa(dp40
g4
I01
sg5
V__ne__
p41
sg7
L5L
sa(dp42
g4
I01
sg5
V__new__
p43
sg7
L2L
sg16
VCreate and return a new object.  See help(type) for accurate signature.
p44
sa(dp45
g4
I01
sg5
V__reduce__
p46
sg7
L2L
sg16
Vhelper for pickle
p47
sa(dp48
g4
I01
sg5
V__reduce_ex__
p49
sg7
L2L
sg16
Vhelper for pickle
p50
sa(dp51
g4
I01
sg5
V__repr__
p52
sg7
L5L
sa(dp53
g4
I01
sg5
V__setattr__
p54
sg7
L5L
sa(dp55
g4
I01
sg5
V__sizeof__
p56
sg7
L2L
sg16
V__sizeof__() -> int\u000asize of object in memory, in bytes
p57
sa(dp58
g4
I01
sg5
V__str__
p59
sg7
L5L
sa(dp60
g4
I01
sg5
V__subclasshook__
p61
sg7
L2L
sg16
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p62
sa(dp63
g4
I01
sg5
V__weakref__
p64
sg7
L5L
sa(dp65
g4
I01
sg5
Vcreate_module
p66
sg7
L5L
sa(dp67
g4
I01
sg5
Vexec_module
p68
sg7
L5L
sa(dp69
g4
I01
sg5
Vfind_module
p70
sg7
L5L
sa(dp71
g4
I01
sg5
Vfind_spec
p72
sg7
L5L
sa(dp73
g4
I01
sg5
Vget_code
p74
sg7
L5L
sa(dp75
g4
I01
sg5
Vget_source
p76
sg7
L5L
sa(dp77
g4
I01
sg5
Vis_package
p78
sg7
L5L
sa(dp79
g4
I01
sg5
Vload_module
p80
sg7
L5L
sa(dp81
g4
I01
sg5
Vmodule_repr
p82
sg7
L5L
sasg4
I01
sg5
V__loader__
p83
sg7
L3L
sg16
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p84
sa(dp85
g4
I01
sg5
V__name__
p86
sg7
L5L
sa(dp87
g4
I01
sg5
V__package__
p88
sg7
L5L
sa(dp89
g4
I01
sg5
V__spec__
p90
sg7
L5L
sa(dp91
g4
I01
sg5
V_compare_digest
p92
sg7
L2L
sg16
Vcompare_digest(a, b) -> bool\u000a\u000aReturn 'a == b'.  This function uses an approach designed to prevent\u000atiming analysis, making it appropriate for cryptography.\u000aa and b must both be of the same type: either str (ASCII only),\u000aor any bytes-like object.\u000a\u000aNote: If a and b are of different lengths, or if an error occurs,\u000aa timing attack could theoretically reveal information about the\u000atypes and lengths of a and b--but not their values.\u000a
p93
sa(dp94
g4
I01
sg5
Vabs
p95
sg7
L2L
sg16
Vabs(a) -- Same as abs(a).
p96
sa(dp97
g4
I01
sg5
Vadd
p98
sg7
L2L
sg16
Vadd(a, b) -- Same as a + b.
p99
sa(dp100
g4
I01
sg5
Vand_
p101
sg7
L2L
sg16
Vand_(a, b) -- Same as a & b.
p102
sa(dp103
g1
(lp104
(dp105
g4
I01
sg5
V__call__
p106
sg7
L5L
sa(dp107
g4
I01
sg5
g11
sg7
L5L
sa(dp108
g4
I01
sg5
g15
sg7
L2L
sg16
V__dir__() -> list\u000adefault dir() implementation
p109
sa(dp110
g4
I01
sg5
g6
sg7
L5L
sa(dp111
g4
I01
sg5
g20
sg7
L5L
sa(dp112
g4
I01
sg5
g22
sg7
L2L
sg16
Vdefault object formatter
p113
sa(dp114
g4
I01
sg5
g25
sg7
L5L
sa(dp115
g4
I01
sg5
g27
sg7
L5L
sa(dp116
g4
I01
sg5
g29
sg7
L5L
sa(dp117
g4
I01
sg5
g31
sg7
L5L
sa(dp118
g4
I01
sg5
g33
sg7
L5L
sa(dp119
g4
I01
sg5
g35
sg7
L5L
sa(dp120
g4
I01
sg5
g37
sg7
L5L
sa(dp121
g4
I01
sg5
g41
sg7
L5L
sa(dp122
g4
I01
sg5
g43
sg7
L2L
sg16
VCreate and return a new object.  See help(type) for accurate signature.
p123
sa(dp124
g4
I01
sg5
g46
sg7
L2L
sg16
VReturn state information for pickling
p125
sa(dp126
g4
I01
sg5
g49
sg7
L2L
sg16
Vhelper for pickle
p127
sa(dp128
g4
I01
sg5
g52
sg7
L5L
sa(dp129
g4
I01
sg5
g54
sg7
L5L
sa(dp130
g4
I01
sg5
g56
sg7
L2L
sg16
V__sizeof__() -> int\u000asize of object in memory, in bytes
p131
sa(dp132
g4
I01
sg5
g59
sg7
L5L
sa(dp133
g4
I01
sg5
g61
sg7
L2L
sg16
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p134
sasg4
I01
sg5
Vattrgetter
p135
sg7
L3L
sg16
Vattrgetter(attr, ...) --> attrgetter object\u000a\u000aReturn a callable object that fetches the given attribute(s) from its operand.\u000aAfter f = attrgetter('name'), the call f(r) returns r.name.\u000aAfter g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).\u000aAfter h = attrgetter('name.first', 'name.last'), the call h(r) returns\u000a(r.name.first, r.name.last).
p136
sa(dp137
g4
I01
sg5
Vconcat
p138
sg7
L2L
sg16
Vconcat(a, b) -- Same as a + b, for a and b sequences.
p139
sa(dp140
g4
I01
sg5
Vcontains
p141
sg7
L2L
sg16
Vcontains(a, b) -- Same as b in a (note reversed operands).
p142
sa(dp143
g4
I01
sg5
VcountOf
p144
sg7
L2L
sg16
VcountOf(a, b) -- Return the number of times b occurs in a.
p145
sa(dp146
g4
I01
sg5
Vdelitem
p147
sg7
L2L
sg16
Vdelitem(a, b) -- Same as del a[b].
p148
sa(dp149
g4
I01
sg5
Veq
p150
sg7
L2L
sg16
Veq(a, b) -- Same as a==b.
p151
sa(dp152
g4
I01
sg5
Vfloordiv
p153
sg7
L2L
sg16
Vfloordiv(a, b) -- Same as a // b.
p154
sa(dp155
g4
I01
sg5
Vge
p156
sg7
L2L
sg16
Vge(a, b) -- Same as a>=b.
p157
sa(dp158
g4
I01
sg5
Vgetitem
p159
sg7
L2L
sg16
Vgetitem(a, b) -- Same as a[b].
p160
sa(dp161
g4
I01
sg5
Vgt
p162
sg7
L2L
sg16
Vgt(a, b) -- Same as a>b.
p163
sa(dp164
g4
I01
sg5
Viadd
p165
sg7
L2L
sg16
Va = iadd(a, b) -- Same as a += b.
p166
sa(dp167
g4
I01
sg5
Viand
p168
sg7
L2L
sg16
Va = iand(a, b) -- Same as a &= b.
p169
sa(dp170
g4
I01
sg5
Viconcat
p171
sg7
L2L
sg16
Va = iconcat(a, b) -- Same as a += b, for a and b sequences.
p172
sa(dp173
g4
I01
sg5
Vifloordiv
p174
sg7
L2L
sg16
Va = ifloordiv(a, b) -- Same as a //= b.
p175
sa(dp176
g4
I01
sg5
Vilshift
p177
sg7
L2L
sg16
Va = ilshift(a, b) -- Same as a <<= b.
p178
sa(dp179
g4
I01
sg5
Vimatmul
p180
sg7
L2L
sg16
Va = imatmul(a, b) -- Same as a @= b.
p181
sa(dp182
g4
I01
sg5
Vimod
p183
sg7
L2L
sg16
Va = imod(a, b) -- Same as a %= b.
p184
sa(dp185
g4
I01
sg5
Vimul
p186
sg7
L2L
sg16
Va = imul(a, b) -- Same as a *= b.
p187
sa(dp188
g4
I01
sg5
Vindex
p189
sg7
L2L
sg16
Vindex(a) -- Same as a.__index__()
p190
sa(dp191
g4
I01
sg5
VindexOf
p192
sg7
L2L
sg16
VindexOf(a, b) -- Return the first index of b in a.
p193
sa(dp194
g4
I01
sg5
Vinv
p195
sg7
L2L
sg16
Vinv(a) -- Same as ~a.
p196
sa(dp197
g4
I01
sg5
Vinvert
p198
sg7
L2L
sg16
Vinvert(a) -- Same as ~a.
p199
sa(dp200
g4
I01
sg5
Vior
p201
sg7
L2L
sg16
Va = ior(a, b) -- Same as a |= b.
p202
sa(dp203
g4
I01
sg5
Vipow
p204
sg7
L2L
sg16
Va = ipow(a, b) -- Same as a **= b.
p205
sa(dp206
g4
I01
sg5
Virshift
p207
sg7
L2L
sg16
Va = irshift(a, b) -- Same as a >>= b.
p208
sa(dp209
g4
I01
sg5
Vis_
p210
sg7
L2L
sg16
Vis_(a, b) -- Same as a is b.
p211
sa(dp212
g4
I01
sg5
Vis_not
p213
sg7
L2L
sg16
Vis_not(a, b) -- Same as a is not b.
p214
sa(dp215
g4
I01
sg5
Visub
p216
sg7
L2L
sg16
Va = isub(a, b) -- Same as a -= b.
p217
sa(dp218
g1
(lp219
(dp220
g4
I01
sg5
g106
sg7
L5L
sa(dp221
g4
I01
sg5
g11
sg7
L5L
sa(dp222
g4
I01
sg5
g15
sg7
L2L
sg16
V__dir__() -> list\u000adefault dir() implementation
p223
sa(dp224
g4
I01
sg5
g6
sg7
L5L
sa(dp225
g4
I01
sg5
g20
sg7
L5L
sa(dp226
g4
I01
sg5
g22
sg7
L2L
sg16
Vdefault object formatter
p227
sa(dp228
g4
I01
sg5
g25
sg7
L5L
sa(dp229
g4
I01
sg5
g27
sg7
L5L
sa(dp230
g4
I01
sg5
g29
sg7
L5L
sa(dp231
g4
I01
sg5
g31
sg7
L5L
sa(dp232
g4
I01
sg5
g33
sg7
L5L
sa(dp233
g4
I01
sg5
g35
sg7
L5L
sa(dp234
g4
I01
sg5
g37
sg7
L5L
sa(dp235
g4
I01
sg5
g41
sg7
L5L
sa(dp236
g4
I01
sg5
g43
sg7
L2L
sg16
VCreate and return a new object.  See help(type) for accurate signature.
p237
sa(dp238
g4
I01
sg5
g46
sg7
L2L
sg16
VReturn state information for pickling
p239
sa(dp240
g4
I01
sg5
g49
sg7
L2L
sg16
Vhelper for pickle
p241
sa(dp242
g4
I01
sg5
g52
sg7
L5L
sa(dp243
g4
I01
sg5
g54
sg7
L5L
sa(dp244
g4
I01
sg5
g56
sg7
L2L
sg16
V__sizeof__() -> int\u000asize of object in memory, in bytes
p245
sa(dp246
g4
I01
sg5
g59
sg7
L5L
sa(dp247
g4
I01
sg5
g61
sg7
L2L
sg16
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p248
sasg4
I01
sg5
Vitemgetter
p249
sg7
L3L
sg16
Vitemgetter(item, ...) --> itemgetter object\u000a\u000aReturn a callable object that fetches the given item(s) from its operand.\u000aAfter f = itemgetter(2), the call f(r) returns r[2].\u000aAfter g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
p250
sa(dp251
g4
I01
sg5
Vitruediv
p252
sg7
L2L
sg16
Va = itruediv(a, b) -- Same as a /= b
p253
sa(dp254
g4
I01
sg5
Vixor
p255
sg7
L2L
sg16
Va = ixor(a, b) -- Same as a ^= b.
p256
sa(dp257
g4
I01
sg5
Vle
p258
sg7
L2L
sg16
Vle(a, b) -- Same as a<=b.
p259
sa(dp260
g4
I01
sg5
Vlength_hint
p261
sg7
L2L
sg16
Vlength_hint(obj, default=0) -> int\u000aReturn an estimate of the number of items in obj.\u000aThis is useful for presizing containers when building from an\u000aiterable.\u000a\u000aIf the object supports len(), the result will be\u000aexact. Otherwise, it may over- or under-estimate by an\u000aarbitrary amount. The result will be an integer >= 0.
p262
sa(dp263
g4
I01
sg5
Vlshift
p264
sg7
L2L
sg16
Vlshift(a, b) -- Same as a << b.
p265
sa(dp266
g4
I01
sg5
Vlt
p267
sg7
L2L
sg16
Vlt(a, b) -- Same as a<b.
p268
sa(dp269
g4
I01
sg5
Vmatmul
p270
sg7
L2L
sg16
Vmatmul(a, b) -- Same as a @ b.
p271
sa(dp272
g1
(lp273
(dp274
g4
I01
sg5
g106
sg7
L5L
sa(dp275
g4
I01
sg5
g11
sg7
L5L
sa(dp276
g4
I01
sg5
g15
sg7
L2L
sg16
V__dir__() -> list\u000adefault dir() implementation
p277
sa(dp278
g4
I01
sg5
g6
sg7
L5L
sa(dp279
g4
I01
sg5
g20
sg7
L5L
sa(dp280
g4
I01
sg5
g22
sg7
L2L
sg16
Vdefault object formatter
p281
sa(dp282
g4
I01
sg5
g25
sg7
L5L
sa(dp283
g4
I01
sg5
g27
sg7
L5L
sa(dp284
g4
I01
sg5
g29
sg7
L5L
sa(dp285
g4
I01
sg5
g31
sg7
L5L
sa(dp286
g4
I01
sg5
g33
sg7
L5L
sa(dp287
g4
I01
sg5
g35
sg7
L5L
sa(dp288
g4
I01
sg5
g37
sg7
L5L
sa(dp289
g4
I01
sg5
g41
sg7
L5L
sa(dp290
g4
I01
sg5
g43
sg7
L2L
sg16
VCreate and return a new object.  See help(type) for accurate signature.
p291
sa(dp292
g4
I01
sg5
g46
sg7
L2L
sg16
VReturn state information for pickling
p293
sa(dp294
g4
I01
sg5
g49
sg7
L2L
sg16
Vhelper for pickle
p295
sa(dp296
g4
I01
sg5
g52
sg7
L5L
sa(dp297
g4
I01
sg5
g54
sg7
L5L
sa(dp298
g4
I01
sg5
g56
sg7
L2L
sg16
V__sizeof__() -> int\u000asize of object in memory, in bytes
p299
sa(dp300
g4
I01
sg5
g59
sg7
L5L
sa(dp301
g4
I01
sg5
g61
sg7
L2L
sg16
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p302
sasg4
I01
sg5
Vmethodcaller
p303
sg7
L3L
sg16
Vmethodcaller(name, ...) --> methodcaller object\u000a\u000aReturn a callable object that calls the given method on its operand.\u000aAfter f = methodcaller('name'), the call f(r) returns r.name().\u000aAfter g = methodcaller('name', 'date', foo=1), the call g(r) returns\u000ar.name('date', foo=1).
p304
sa(dp305
g4
I01
sg5
Vmod
p306
sg7
L2L
sg16
Vmod(a, b) -- Same as a % b.
p307
sa(dp308
g4
I01
sg5
Vmul
p309
sg7
L2L
sg16
Vmul(a, b) -- Same as a * b.
p310
sa(dp311
g4
I01
sg5
Vne
p312
sg7
L2L
sg16
Vne(a, b) -- Same as a!=b.
p313
sa(dp314
g4
I01
sg5
Vneg
p315
sg7
L2L
sg16
Vneg(a) -- Same as -a.
p316
sa(dp317
g4
I01
sg5
Vnot_
p318
sg7
L2L
sg16
Vnot_(a) -- Same as not a.
p319
sa(dp320
g4
I01
sg5
Vor_
p321
sg7
L2L
sg16
Vor_(a, b) -- Same as a | b.
p322
sa(dp323
g4
I01
sg5
Vpos
p324
sg7
L2L
sg16
Vpos(a) -- Same as +a.
p325
sa(dp326
g4
I01
sg5
Vpow
p327
sg7
L2L
sg16
Vpow(a, b) -- Same as a ** b.
p328
sa(dp329
g4
I01
sg5
Vrshift
p330
sg7
L2L
sg16
Vrshift(a, b) -- Same as a >> b.
p331
sa(dp332
g4
I01
sg5
Vsetitem
p333
sg7
L2L
sg16
Vsetitem(a, b, c) -- Same as a[b] = c.
p334
sa(dp335
g4
I01
sg5
Vsub
p336
sg7
L2L
sg16
Vsub(a, b) -- Same as a - b.
p337
sa(dp338
g4
I01
sg5
Vtruediv
p339
sg7
L2L
sg16
Vtruediv(a, b) -- Same as a / b.
p340
sa(dp341
g4
I01
sg5
Vtruth
p342
sg7
L2L
sg16
Vtruth(a) -- Return True if a is true, False otherwise.
p343
sa(dp344
g4
I01
sg5
Vxor
p345
sg7
L2L
sg16
Vxor(a, b) -- Same as a ^ b.
p346
sasg4
I01
sg5
V_operator
p347
sg16
VOperator interface.\u000a\u000aThis module exports a set of functions implemented in C corresponding\u000ato the intrinsic operators of Python.  For example, operator.add(x, y)\u000ais equivalent to the expression x+y.  The function names are those\u000aused for special methods; variants without leading and trailing\u000a'__' are also provided for convenience.
p348
s.