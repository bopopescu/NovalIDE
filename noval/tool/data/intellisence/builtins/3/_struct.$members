(dp0
Vchilds
p1
(lp2
(dp3
g1
(lp4
(dp5
Vis_builtin
p6
I01
sVname
p7
V__delattr__
p8
sVtype
p9
L5L
sa(dp10
g6
I01
sg7
V__dir__
p11
sg9
L2L
sVdoc
p12
V__dir__() -> list\u000adefault dir() implementation
p13
sa(dp14
g6
I01
sg7
V__doc__
p15
sg9
L5L
sa(dp16
g6
I01
sg7
V__eq__
p17
sg9
L5L
sa(dp18
g6
I01
sg7
V__format__
p19
sg9
L2L
sg12
Vdefault object formatter
p20
sa(dp21
g6
I01
sg7
V__ge__
p22
sg9
L5L
sa(dp23
g6
I01
sg7
V__getattribute__
p24
sg9
L5L
sa(dp25
g6
I01
sg7
V__gt__
p26
sg9
L5L
sa(dp27
g6
I01
sg7
V__hash__
p28
sg9
L5L
sa(dp29
g6
I01
sg7
V__init__
p30
sg9
L5L
sa(dp31
g6
I01
sg7
V__le__
p32
sg9
L5L
sa(dp33
g6
I01
sg7
V__lt__
p34
sg9
L5L
sa(dp35
g6
I01
sg7
V__ne__
p36
sg9
L5L
sa(dp37
g6
I01
sg7
V__new__
p38
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p39
sa(dp40
g6
I01
sg7
V__reduce__
p41
sg9
L2L
sg12
Vhelper for pickle
p42
sa(dp43
g6
I01
sg7
V__reduce_ex__
p44
sg9
L2L
sg12
Vhelper for pickle
p45
sa(dp46
g6
I01
sg7
V__repr__
p47
sg9
L5L
sa(dp48
g6
I01
sg7
V__setattr__
p49
sg9
L5L
sa(dp50
g6
I01
sg7
V__sizeof__
p51
sg9
L2L
sg12
VS.__sizeof__() -> size of S in memory, in bytes
p52
sa(dp53
g6
I01
sg7
V__str__
p54
sg9
L5L
sa(dp55
g6
I01
sg7
V__subclasshook__
p56
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p57
sa(dp58
g6
I01
sg7
Vformat
p59
sg9
L5L
sa(dp60
g6
I01
sg7
Viter_unpack
p61
sg9
L2L
sg12
VS.iter_unpack(buffer) -> iterator(v1, v2, ...)\u000a\u000aReturn an iterator yielding tuples unpacked from the given bytes\u000asource, like a repeated invocation of unpack_from().  Requires\u000athat the bytes length be a multiple of the struct size.
p62
sa(dp63
g6
I01
sg7
Vpack
p64
sg9
L2L
sg12
VS.pack(v1, v2, ...) -> bytes\u000a\u000aReturn a bytes object containing values v1, v2, ... packed according\u000ato the format string S.format.  See help(struct) for more on format\u000astrings.
p65
sa(dp66
g6
I01
sg7
Vpack_into
p67
sg9
L2L
sg12
VS.pack_into(buffer, offset, v1, v2, ...)\u000a\u000aPack the values v1, v2, ... according to the format string S.format\u000aand write the packed bytes into the writable buffer buf starting at\u000aoffset.  Note that the offset is a required argument.  See\u000ahelp(struct) for more on format strings.
p68
sa(dp69
g6
I01
sg7
Vsize
p70
sg9
L5L
sa(dp71
g6
I01
sg7
Vunpack
p72
sg9
L2L
sg12
VS.unpack(buffer) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format\u000astring S.format.  The buffer's size in bytes must be S.size.  See\u000ahelp(struct) for more on format strings.
p73
sa(dp74
g6
I01
sg7
Vunpack_from
p75
sg9
L2L
sg12
VS.unpack_from(buffer, offset=0) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format\u000astring S.format.  The buffer's size in bytes, minus offset, must be at\u000aleast S.size.  See help(struct) for more on format strings.
p76
sasg6
I01
sg7
VStruct
p77
sg9
L3L
sg12
VStruct(fmt) --> compiled struct object\u000a\u000aReturn a new Struct object which writes and reads binary data according to\u000athe format string fmt.  See help(struct) for more on format strings.
p78
sa(dp79
g6
I01
sg7
g15
sg9
L5L
sa(dp80
g1
(lp81
(dp82
g6
I01
sg7
g8
sg9
L5L
sa(dp83
g6
I01
sg7
V__dict__
p84
sg9
L5L
sa(dp85
g6
I01
sg7
g11
sg9
L2L
sg12
V__dir__() -> list\u000adefault dir() implementation
p86
sa(dp87
g6
I01
sg7
g15
sg9
L5L
sa(dp88
g6
I01
sg7
g17
sg9
L5L
sa(dp89
g6
I01
sg7
g19
sg9
L2L
sg12
Vdefault object formatter
p90
sa(dp91
g6
I01
sg7
g22
sg9
L5L
sa(dp92
g6
I01
sg7
g24
sg9
L5L
sa(dp93
g6
I01
sg7
g26
sg9
L5L
sa(dp94
g6
I01
sg7
g28
sg9
L5L
sa(dp95
g6
I01
sg7
g30
sg9
L5L
sa(dp96
g6
I01
sg7
g32
sg9
L5L
sa(dp97
g6
I01
sg7
g34
sg9
L5L
sa(dp98
g6
I01
sg7
V__module__
p99
sg9
L5L
sa(dp100
g6
I01
sg7
g36
sg9
L5L
sa(dp101
g6
I01
sg7
g38
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p102
sa(dp103
g6
I01
sg7
g41
sg9
L2L
sg12
Vhelper for pickle
p104
sa(dp105
g6
I01
sg7
g44
sg9
L2L
sg12
Vhelper for pickle
p106
sa(dp107
g6
I01
sg7
g47
sg9
L5L
sa(dp108
g6
I01
sg7
g49
sg9
L5L
sa(dp109
g6
I01
sg7
g51
sg9
L2L
sg12
V__sizeof__() -> int\u000asize of object in memory, in bytes
p110
sa(dp111
g6
I01
sg7
g54
sg9
L5L
sa(dp112
g6
I01
sg7
g56
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p113
sa(dp114
g6
I01
sg7
V__weakref__
p115
sg9
L5L
sa(dp116
g6
I01
sg7
Vcreate_module
p117
sg9
L5L
sa(dp118
g6
I01
sg7
Vexec_module
p119
sg9
L5L
sa(dp120
g6
I01
sg7
Vfind_module
p121
sg9
L5L
sa(dp122
g6
I01
sg7
Vfind_spec
p123
sg9
L5L
sa(dp124
g6
I01
sg7
Vget_code
p125
sg9
L5L
sa(dp126
g6
I01
sg7
Vget_source
p127
sg9
L5L
sa(dp128
g6
I01
sg7
Vis_package
p129
sg9
L5L
sa(dp130
g6
I01
sg7
Vload_module
p131
sg9
L5L
sa(dp132
g6
I01
sg7
Vmodule_repr
p133
sg9
L5L
sasg6
I01
sg7
V__loader__
p134
sg9
L3L
sg12
VMeta path import for built-in modules.\u000a\u000a    All methods are either class or static methods to avoid the need to\u000a    instantiate the class.\u000a\u000a    
p135
sa(dp136
g6
I01
sg7
V__name__
p137
sg9
L5L
sa(dp138
g6
I01
sg7
V__package__
p139
sg9
L5L
sa(dp140
g6
I01
sg7
V__spec__
p141
sg9
L5L
sa(dp142
g6
I01
sg7
V_clearcache
p143
sg9
L2L
sg12
VClear the internal cache.
p144
sa(dp145
g6
I01
sg7
Vcalcsize
p146
sg9
L2L
sg12
Vcalcsize(fmt) -> integer\u000a\u000aReturn size in bytes of the struct described by the format string fmt.
p147
sa(dp148
g1
(lp149
(dp150
g6
I01
sg7
V__cause__
p151
sg9
L5L
sa(dp152
g6
I01
sg7
V__context__
p153
sg9
L5L
sa(dp154
g6
I01
sg7
g8
sg9
L5L
sa(dp155
g6
I01
sg7
g84
sg9
L5L
sa(dp156
g6
I01
sg7
g11
sg9
L2L
sg12
V__dir__() -> list\u000adefault dir() implementation
p157
sa(dp158
g6
I01
sg7
g15
sg9
L5L
sa(dp159
g6
I01
sg7
g17
sg9
L5L
sa(dp160
g6
I01
sg7
g19
sg9
L2L
sg12
Vdefault object formatter
p161
sa(dp162
g6
I01
sg7
g22
sg9
L5L
sa(dp163
g6
I01
sg7
g24
sg9
L5L
sa(dp164
g6
I01
sg7
g26
sg9
L5L
sa(dp165
g6
I01
sg7
g28
sg9
L5L
sa(dp166
g6
I01
sg7
g30
sg9
L5L
sa(dp167
g6
I01
sg7
g32
sg9
L5L
sa(dp168
g6
I01
sg7
g34
sg9
L5L
sa(dp169
g6
I01
sg7
g99
sg9
L5L
sa(dp170
g6
I01
sg7
g36
sg9
L5L
sa(dp171
g6
I01
sg7
g38
sg9
L2L
sg12
VCreate and return a new object.  See help(type) for accurate signature.
p172
sa(dp173
g6
I01
sg7
g41
sg9
L2L
sg12
Nsa(dp174
g6
I01
sg7
g44
sg9
L2L
sg12
Vhelper for pickle
p175
sa(dp176
g6
I01
sg7
g47
sg9
L5L
sa(dp177
g6
I01
sg7
g49
sg9
L5L
sa(dp178
g6
I01
sg7
V__setstate__
p179
sg9
L2L
sg12
Nsa(dp180
g6
I01
sg7
g51
sg9
L2L
sg12
V__sizeof__() -> int\u000asize of object in memory, in bytes
p181
sa(dp182
g6
I01
sg7
g54
sg9
L5L
sa(dp183
g6
I01
sg7
g56
sg9
L2L
sg12
VAbstract classes can override this to customize issubclass().\u000a\u000aThis is invoked early on by abc.ABCMeta.__subclasscheck__().\u000aIt should return True, False or NotImplemented.  If it returns\u000aNotImplemented, the normal algorithm is used.  Otherwise, it\u000aoverrides the normal algorithm (and the outcome is cached).\u000a
p184
sa(dp185
g6
I01
sg7
V__suppress_context__
p186
sg9
L5L
sa(dp187
g6
I01
sg7
V__traceback__
p188
sg9
L5L
sa(dp189
g6
I01
sg7
g115
sg9
L5L
sa(dp190
g6
I01
sg7
Vargs
p191
sg9
L5L
sa(dp192
g6
I01
sg7
Vwith_traceback
p193
sg9
L2L
sg12
VException.with_traceback(tb) --\u000a    set self.__traceback__ to tb and return self.
p194
sasg6
I01
sg7
Verror
p195
sg9
L3L
sg12
Nsa(dp196
g6
I01
sg7
g61
sg9
L2L
sg12
Viter_unpack(fmt, buffer) -> iterator(v1, v2, ...)\u000a\u000aReturn an iterator yielding tuples unpacked from the given bytes\u000asource according to the format string, like a repeated invocation of\u000aunpack_from().  Requires that the bytes length be a multiple of the\u000aformat struct size.
p197
sa(dp198
g6
I01
sg7
g64
sg9
L2L
sg12
Vpack(fmt, v1, v2, ...) -> bytes\u000a\u000aReturn a bytes object containing the values v1, v2, ... packed according\u000ato the format string fmt.  See help(struct) for more on format strings.
p199
sa(dp200
g6
I01
sg7
g67
sg9
L2L
sg12
Vpack_into(fmt, buffer, offset, v1, v2, ...)\u000a\u000aPack the values v1, v2, ... according to the format string fmt and write\u000athe packed bytes into the writable buffer buf starting at offset.  Note\u000athat the offset is a required argument.  See help(struct) for more\u000aon format strings.
p201
sa(dp202
g6
I01
sg7
g72
sg9
L2L
sg12
Vunpack(fmt, buffer) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format string\u000afmt.  The buffer's size in bytes must be calcsize(fmt). See help(struct)\u000afor more on format strings.
p203
sa(dp204
g6
I01
sg7
g75
sg9
L2L
sg12
Vunpack_from(fmt, buffer, offset=0) -> (v1, v2, ...)\u000a\u000aReturn a tuple containing values unpacked according to the format string\u000afmt.  The buffer's size, minus offset, must be at least calcsize(fmt).\u000aSee help(struct) for more on format strings.
p205
sasg6
I01
sg7
V_struct
p206
sg12
VFunctions to convert between Python values and C structs.\u000aPython bytes objects are used to hold the data representing the C struct\u000aand also as format strings (explained below) to describe the layout of data\u000ain the C struct.\u000a\u000aThe optional first format char indicates byte order, size and alignment:\u000a  @: native order, size & alignment (default)\u000a  =: native order, std. size & alignment\u000a  <: little-endian, std. size & alignment\u000a  >: big-endian, std. size & alignment\u000a  !: same as >\u000a\u000aThe remaining chars indicate types of args and must match exactly;\u000athese can be preceded by a decimal repeat count:\u000a  x: pad byte (no data); c:char; b:signed byte; B:unsigned byte;\u000a  ?: _Bool (requires C99; if not available, char is used instead)\u000a  h:short; H:unsigned short; i:int; I:unsigned int;\u000a  l:long; L:unsigned long; f:float; d:double.\u000aSpecial cases (preceding decimal count indicates length):\u000a  s:string (array of char); p: pascal string (with count byte).\u000aSpecial cases (only available in native format):\u000a  n:ssize_t; N:size_t;\u000a  P:an integer type that is wide enough to hold a pointer.\u000aSpecial case (not in native mode unless 'long long' in platform C):\u000a  q:long long; Q:unsigned long long\u000aWhitespace between formats is ignored.\u000a\u000aThe variable struct.error is an exception raised on errors.\u000a
p207
s.